---
title: "Shortcodes & Filters"
format: html
---

## Shortcodes

Shortcodes are special markdown directives that generate various types of content. Quarto shortcodes are similar in form and function to [Hugo shortcodes](https://gohugo.io/content-management/shortcodes/) and [WordPress shortcodes](https://codex.wordpress.org/Shortcode).

Quarto currently supports just two shortcodes: `meta` and `var`. Additional shortcodes (e.g. for inserting videos, tweets, gists, etc.) will be developed soon.

### meta

The `meta` shortcode allows you to insert content from Pandoc metadata (e.g. YAML at the top of the document and/or in `_quarto.yml`).

For example, the following shortcode inserts the value of the `title` field from YAML metadata:

``` {.markdown shortcodes="false"}
{{< meta title >}}
```

You can dereference sub-keys using the dot (`.)` delimiter. For example:

``` {.markdown shortcodes="false"}
{{< meta author.affiliation >}}
```

### var

The `var` shortcode enables you to insert content from a project-level `_variables.yml` file. Create this file alongside your `_quarto.yml` project file, and then include references to those variables within any document in your project.

Variables can be either simple values or can include arbitrary markdown content. To define variables, create a `_variables.yml` file in the root directory of your project. For example:

``` yaml
version: 1.2

email:
  info: info@example.com
  support: support@example.com

engine:
  jupyter: "[Jupyter](https://jupyter.org)"
  knitr: "[Knitr](<https://yihui.name/knitr>)"
```

Note that the `engine` variable values include markdown for hyperlinks.

To include the value of a variable, use the `{{</* var */>}}` shortcode, for example:

``` {.markdown shortcodes="false"}
Version {{< var version >}} is a minor upgrade.

Please contact us at {{< var email.info >}}.

Quarto includes {{< var engine.jupyter >}} and 
{{< var engine.knitr >}} computation engines.
```

### env

The `env` shortcode enables you to read values from environment variables. For example:

``` {.markdown shortcodes="false"}
Version {{ env PRODUCT_VERSION }} is a minor upgrade.
```

### Escaping

If you are writing documentation about using shortcodes (for example, this article!) you might need to prevent them from being processed. You can do this in two ways:

1.  Escape the shortcode reference like this:

    ``` {.default shortcodes="false"}
    {{</* var version */>}}
    ```

2.  Add a `shortcodes=false` attribute to any code block you want to prevent processing of shortcodes within:

    ```` {.default shortcodes="false"}
    ```{shortcodes=false}
    {{< var version >}}
    ```
    ````

## Filters

If the base features of Pandoc and Quarto don't do exactly what you need, you can very likely create a [Pandoc Filter](https://pandoc.org/filters.html) that bridges the gap. It's also possible to create filters that preprocess the contents of Jupyter Notebooks (`.ipynb`) before they are rendered by Quarto and Pandoc. We'll describe each of these filters in turn below.

### Pandoc Filters

Pandoc consists of a set of readers and writers. When converting a document from one format to another, text is parsed by a reader into pandoc's intermediate representation of the document---an "abstract syntax tree" or AST---which is then converted by the writer into the target format. The pandoc AST format is defined in the module [`Text.Pandoc.Definition`](https://hackage.haskell.org/package/pandoc-types-1.22/docs/Text-Pandoc-Definition.html) in the pandoc-types package.

A "filter" is a program that modifies the AST, between the reader and the writer.

    INPUT --reader--> AST --filter--> AST --writer--> OUTPUT

Pandoc's built-in citation processing is implemented as a filter, as are many of Quarto's extensions (e.g. cross-references, figure layout, etc.). Some other examples include:

| Filter                                                                                     | Description                                                                                                                          |
|------------------------------|------------------------------------------|
| [include-files](https://github.com/pandoc/lua-filters/tree/master/include-files)           | Filter to include other files in the document.                                                                                       |
| [include-code-files](https://github.com/pandoc/lua-filters/tree/master/include-code-files) | Filter to include code from source files.                                                                                            |
| [pagebreak](https://github.com/pandoc/lua-filters/tree/master/pagebreak)                   | Converts paragraps containing only the LaTeX `\newpage` or `\pagebreak` command into appropriate pagebreak markup for other formats. |

#### Using Filters

Add one or more filters to document rendering using the `filters` option. For example:

``` yaml
filters:
   - pagebreak.lua
```

By default, user filters are run after Quarto's built-in filters. For some filters you'll want to modify this behavior (e.g. for `include-files.lua` you'll almost always want it to run before Quarto's filters so that it can make use of Quarto extensions features like callouts, tabsets, etc.).

Fore example, here we arrange to run `include-files.lua` before Quarto;s filters and `pagebreak.lua` after:

``` yaml
filters:
  - include-files.lua
  - quarto
  - pagebreak.lua
```

#### Writing Filters

You can write Pandoc filters using Lua (via Pandoc's built-in Lua interpreter) or using any other language using a JSON representation of the Pandoc AST piped to/from an external process.

We strongly recommend using Lua Filters, which have the following advantages:

-   No external dependencies

-   High performance (no serialization or process execution overhead)

-   Access to Pandoc's library of [Lua helper functions](https://pandoc.org/lua-filters.html#pandoc-module).

See the documentation on [Writing Lua Filters](https://pandoc.org/lua-filters.html) for additional details.

If you want to write a JSON filter, see the documentation on [Writing JSON filters](https://pandoc.org/filters.html).

### Notebook Filters

Whenever you use Jupyter for embedded computations a notebook (`.ipynb`) is part of the rendering pipeline. This is naturally the case for rendering `.ipynb` files directly, however it is also the case for `.qmd` files that have embedded Julia or Python cells (in which case a temporary `.ipynb` is constructed). This notebook is ultimately converted into markdown and then rendered by Pandoc to the specified output format(s).

You may wish to do some pre-processing on the notebook prior to its conversion to markdown. This can be accomplished by specifying one or or more `ipynb-filters`. These filters are passed the [JSON representation](https://nbformat.readthedocs.io/en/latest/format_description.html) of the notebook on `stdin` and should write a transformed JSON representation to `stdout`.

For example, this notebook filter uses the [nbformat](https://nbformat.readthedocs.io/en/latest/index.html) package to read a notebook, prepend a comment to the source of each code cell, and then write it back to `stdout`:

``` python
import sys
import nbformat

# read notebook from stdin
nb = nbformat.reads(sys.stdin.read(), as_version = 4)

# prepend a comment to the source of each cell
for index, cell in enumerate(nb.cells):
  if cell.cell_type == 'code':
     cell.source = "# comment\n" + cell.source
  
# write notebook to stdout 
nbformat.write(nb, sys.stdout)
```

You can arrange for this filter to be run using the `ipynb-filters` option (specified at either the document or project level):

``` yaml
---
ipynb-filters:
  - filter.py
---
```

Note that the current working directory for the filter will be set to the location of the input notebook.

## Includes

The [include-files](https://github.com/pandoc/lua-filters/tree/master/include-files) filter is a convenient way to re-use markdown content within a project. You can make this filter available by [downloading](https://raw.githubusercontent.com/pandoc/lua-filters/master/include-files/include-files.lua) it from the site linked to above, copying it into your project directory, then adding it as a filter within `_quarto.yml` as follows:

``` yaml
filters:
  - include-files.lua
  - quarto
```

::: callout-important
Note that we've specified that `include-files.lua` should run prior to Quarto's built in filters. This is important so that you can use Quarto extended features (e.g. callouts, tabsets, shortcodes, etc.) within the included files.
:::

To include a file named `_common.md` you would use this markdown:

```` markdown
```{.include}
_common.md
```
````

You can also include multiple files:

```` markdown
```{.include}
_common.md
_download.md
```
````

In the examples above the names of included files are prefaced with an underscore. You should always use an underscore prefix with included files so that they are automatically ignored (i.e. not treated as standalone files) by a `quarto render` of your project.
