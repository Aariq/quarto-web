---
title: "Shortcodes"
---

## Overview

Shortcodes are special markdown directives that generate various types of content. Quarto shortcodes are similar in form and function to [Hugo shortcodes](https://gohugo.io/content-management/shortcodes/) and [WordPress shortcodes](https://codex.wordpress.org/Shortcode).

For example, the following shortcode prints the `title` from document metadata:

``` {.markdown shortcodes="false"}
{{< meta title >}}
```

Quarto supports several shortcodes natively:

| Shortcode               | Description                            |
|-------------------------|----------------------------------------|
| [var](#var)             | Print value from `_variables.yml` file |
| [meta](#meta)           | Print value from document metadata     |
| [env](#env)             | Print system environment variable      |
| [pagebreak](#pagebreak) | Insert a native page-break             |
| [include](includes.qmd) | Include contents of another qmd        |

You can also [create your own](#custom-shortcodes) shortcodes (more details on that below).

## Built-In Shortcodes

### var {#var}

The `var` shortcode enables you to insert content from a project-level `_variables.yml` file. Create this file alongside your `_quarto.yml` project file, and then include references to those variables within any document in your project.

Variables can be either simple values or can include arbitrary markdown content. To define variables, create a `_variables.yml` file in the root directory of your project. For example:

``` yaml
version: 1.2

email:
  info: info@example.com
  support: support@example.com

engine:
  jupyter: "[Jupyter](https://jupyter.org)"
  knitr: "[Knitr](<https://yihui.name/knitr>)"
```

Note that the `engine` variable values include markdown for hyperlinks.

To include the value of a variable, use the `{{</* var */>}}` shortcode, for example:

``` {.markdown shortcodes="false"}
Version {{< var version >}} is a minor upgrade.

Please contact us at {{< var email.info >}}.

Quarto includes {{< var engine.jupyter >}} and 
{{< var engine.knitr >}} computation engines.
```

### meta {#meta}

The `meta` shortcode allows you to insert content from Pandoc metadata (e.g. YAML at the top of the document and/or in `_quarto.yml`).

For example, the following shortcode inserts the value of the `title` field from YAML metadata:

``` {.markdown shortcodes="false"}
{{< meta title >}}
```

You can dereference sub-keys using the dot (`.)` delimiter. For example:

``` {.markdown shortcodes="false"}
{{< meta author.affiliation >}}
```

### env {#env}

The `env` shortcode enables you to read values from environment variables. For example:

``` {.markdown shortcodes="false"}
Version {{< env PRODUCT_VERSION >}} is a minor upgrade.
```

### pagebreak {#pagebreak}

The `pagebreak` shortcode enables you to insert a native pagebreak into a document (.e.g in LaTeX this would be a `\newpage`, in MS Word a docx-native pagebreak, in HTML a `page-break-after: always` CSS directive, etc.):

``` markdown
page 1

{{{< pagebreak >}}}

page 2
```

Native pagebreaks are supported for HTML, LaTeX, Context, MS Word, Open Document, and ePub (for other formats a form-feed character `\f` is inserted).

### include

The `include` shortcode is a convenient way to re-use content across documents. For example:

``` markdown
{{{< include _content.qmd >}}
```

See the article on [Includes](includes.qmd) for additional details.

## Escaping Shortcodes

If you are writing documentation about using shortcodes (for example, this article!) you might need to prevent them from being processed. You can do this in two ways:

1.  Escape the shortcode reference with extra braces like this:

    ``` {.default shortcodes="false"}
    {{{< var version >}}}
    ```

2.  Add a `shortcodes=false` attribute to any code block you want to prevent processing of shortcodes within:

    ```` {.default shortcodes="false"}
    ```{{shortcodes=false}}

    {{< var version >}}
    ```
    ````

## Custom Shortcodes {#custom-shortcodes}

You can create your own shortcodes using Lua (the same language used for [filters](filters.qmd)). To get started with developing shortcodes:

1.  Be sure you have a [very recent](https://github.com/quarto-dev/quarto-cli/releases/latest) version of Quarto CLI (custom shortcodes requires v0.9.341 or greater).
2.  Read the documentation on [Pandoc Lua Filters](https://pandoc.org/lua-filters.html), which describes the Lua extension API for Pandoc.

Below we'll provide a few examples of custom shortcodes and their implementation.

### Example: Simple

Custom shortcodes are implemented as Lua functions that take one or more arguments and return a Pandoc AST node (or list of nodes).

Here's the implementation of the `env` shortcode that is built in to Quarto:

**env.lua**

``` lua
function env(args)
  local var = pandoc.utils.stringify(args[1])
  local value = os.getenv(var)
  if value ~= nil then
    return pandoc.Str(value)
  else
    return pandoc.Null()
  end
end
```

Note that arguments to shortcodes are provided in `args` (a 1-based array), and that each argument is a list of Pandoc inlines (i.e. markdown AST parsed from the text).

We use the `pandoc.utils.stringify()` function to convert the inlines to an ordinary string, and then the `os.getenv()` function to get its value.

If this function was included in a source file named `env.lua`, you could register it for use with:

``` yaml
shortcodes:
  - env.lua
```

Then use it with:

``` markdown
{{{< env HOME >}}}
```

### Example: Raw Output

Shortcodes can tailor their output to the format being rendered to. This is often useful when you want to conditionally generate rich HTML output but still have the same document render properly to PDF or MS Word.

The `pagebreak` shortcode generates "native" pagebreaks in a variety of formats. Here's the implementation of `pagebreak`:

**pagebreak.lua**

``` lua
function pagebreak()
 
  local raw = {
    epub = '<p style="page-break-after: always;"> </p>',
    html = '<div style="page-break-after: always;"></div>',
    latex = '\\newpage{}',
    ooxml = '<w:p><w:r><w:br w:type="page"/></w:r></w:p>',
    odt = '<text:p text:style-name="Pagebreak"/>',
    context = '\\page'
  }

  if FORMAT == 'docx' then
    return pandoc.RawBlock('openxml', raw.ooxml)
  elseif FORMAT:match 'latex' then
    return pandoc.RawBlock('tex', raw.latex)
  elseif FORMAT:match 'odt' then
    return pandoc.RawBlock('opendocument', raw.odt)
  elseif FORMAT:match 'html.*' then
    return pandoc.RawBlock('html', raw.html)
  elseif FORMAT:match 'epub' then
    return pandoc.RawBlock('html', raw.epub)
  elseif FORMAT:match 'context' then
    return pandoc.RawBlock('context', raw.context)
  else
    -- fall back to insert a form feed character
    return pandoc.Para{pandoc.Str '\f'}
  end

end
```

We use the `pandoc.RawBlock()` function to output the appropriate raw content for the target `FORMAT`. Note that raw blocks are passed straight through to the output file and are not processed as markdown.

If this function was implemented within `pagebreak.lua`, you could register it for use with:

``` yaml
shortcodes:
  - pagebreak.lua
```

Then use it with:

``` markdown
{{{< pagebreak >}}}
```

### Example: Named Arguments

The examples above use either a single argument (`env`) or no arguments at all (`pagebreak`). Here we demonstrate named argument handling by implementing a `git-rev` shortcode that prints the current git revision, providing a `short` option to determine whether a short or long SHA1 is displayed:

**git.lua**

``` lua
-- run git and read its output
function git(command)
  local p = io.popen("git " .. command)
  local output = p:read('*all')
  p:close()
  return output
end

-- return a table containing shortcode definitions
-- defining shortcodes this way allows us to create helper 
-- functions that are not themselves considered shortcodes 
return {
  ["git-rev"] = function(args, kwargs)
    -- command line args
    local cmdArgs = ""
    local short = pandoc.utils.stringify(kwargs["short"])
    if short == "true" then
      cmdArgs = cmdArgs .. "--short "
    end
    
    -- run the command
    local cmd = "rev-parse " .. cmdArgs .. "HEAD"
    local rev = git(cmd)
    
    -- return as string
    return pandoc.Str(rev)
  end
}
```

There are some new things demonstrated here :

1.  Rather than defining our shortcode functions globally, we return a table with the shortcode definitions. This allows us to define helper functions that are not themselves registered as shortcodes. It also enables us to define a shortcode with a dash (`-`) in its name.

2.  There is a new argument to our shortcode handler: `kwargs`. This holds any named arguments to the shortcode. As with `args`, values in `kwargs` will always be a list of Pandoc inlines (allowing you to accept markdown as an argument). Since `short` is a simple boolean value we need to call `pandoc.utils.stringify()` to treat it as a string and then compare it to `"true"`.

We'd register and use this shortcode as follows:

``` {.markdown shortcodes="false"}
---
title: "My Document"
shortcodes:
  - git.lua
---

{{< git-rev >}}
{{< git-rev short=true >}}
```

### Example: Metadata Options

In some cases you may want to provide options that affect how you shortcode behaves. There is a third argument to shortcode handlers (`meta`) that provides access to document and/or project level metadata.

Let's implement a different version of the `git-rev` shortcode that emits the revision as a link to GitHub rather than plain text. To do this we make use of `github.owner` and `github.repo` metadata values:

**git.lua**

``` lua
function git(command)
  local p = io.popen("git " .. command)
  local output = p:read('*all')
  p:close()
  return output
end

return {
  
  ["git-rev"] = function(args, kwargs, meta)
    -- run the command
    local rev = git("rev-parse HEAD")
    
    -- target repo
    local owner = pandoc.utils.stringify(meta["github.owner"])
    local repo = pandoc.utils.stringify(meta["github.repo"])
    local url = "https://github.com/" 
                .. owner .. "/" .. repo .. "/" .. rev 
    
    -- return as link
    return pandoc.Link(pandoc.Str(rev), url)
  end
}
```

As with `args` and `kwargs`, `meta` values are always provided as a list of Pandoc inlines so often need to be converted to string using `pandoc.utils.stringify()`.

To use this shortcode in a document we register it, provide the GitHub info as document options, then include the shortcode where we want the link to be:

``` {.markdown shortcodes="false"}
---
title: "My Document"
shortcodes:
  - git.lua
github:
  owner: quarto-dev
  repo: quarto-cli
---

{{< git-rev >}}
```

The shortcode registration and GitHub metadata could just as well been provided in a project-level `_quarto.yml` file or a directory-level `_metadata.yml` file.
