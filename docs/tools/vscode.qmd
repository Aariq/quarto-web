---
title: VS Code
resources:
 - images/vscode-*.png
---

## Overview

Quarto can render Jupyter notebooks represented as plain text (`.qmd`) or as a normal notebook file (`.ipynb`). The [Quarto VS Code Extension](https://marketplace.visualstudio.com/items?itemName=quarto.quarto) includes many tools that enhance working these documents, including:

-   Integrated render and preview for Quarto documents.
-   Syntax highlighting for markdown and embedded languages
-   Completion and diagnostics for YAML options
-   Completion for embedded languages (e.g. Python, R, Julia, etc.)
-   Commands and key-bindings for running cells and selected lines.

The Quarto extension integrates directly with the Jupyter, R, and Julia extensions. For example, here the Quarto extension runs a Python cell and shows contextual help for Python functions:

![](/docs/computations/images/python-vscode.png){.border .preview-image}

Alternatively, if you are editing an `.ipynb` rather than a `.qmd`, you can use the [VS Code Jupyter Notebook UI](https://code.visualstudio.com/docs/datascience/jupyter-notebooks) as your editor. Here is the "Hello, Quarto" example from the homepage inside the VS Code notebook editor:

![](images/vscode.png){.border fig-alt="An ipynb file open in VSCode. The contents of this page are the same as the first part of the Getting Started: Welcome section of this website."}

If you look at the source code you'll note that YAML options were provided both at the top of the document and within the code cell. We'll describe working with YAML options in more detail below.

## Render and Preview

The Quarto VS Code extension includes commands and keyboard shortcuts for rendering Quarto documents (both standalone and within websites or books). After rendering, `quarto preview` is used behind the scenes to provide a preview pane within VS Code alongside your document:

![](images/vscode-render.png){fig-alt="Two windows arranged side by side. The window on the left is an ipynb file opened in VSCode. The contents of this document are the same as the first part of the Getting Started: Welcome section of this website. The contents of this document are rendered by Quarto in the window on the right."}

To render and preview, execute the **Quarto: Render** command. You can alternatively use the <kbd>Ctrl+Shift+K</kbd> keyboard shortcut, or the Render button at the top right of the editor:

![](images/vscode-render-button.png){.border fig-alt="The top of the Visual Studio code editor. The right side of the editor tab area includes a Render button."}

Note that on the Mac you should use `Cmd` rather than `Ctrl` as the prefix for all Quarto keyboard shortcuts.

Additionally, there are commands available to render specific formats. Here is a complete list of the supported render commands:

- Quarto: Render
- Quarto: Render HTML
- Quarto: Render PDF
- Quarto: Render Word

The **Quarto: Render** command renders the default format of the currently active document. The other commands render specific formats (regardless of the document's default format). The <kbd>Ctrl+Shift+K</kbd> keyboard shortcut will re-execute the most recently executed render command.

::: {.callout-note appearance="simple"}
Embedded preview is currently supported for HTML and PDF based formats (including `revealjs` and `beamer` slideshows), however for Word and other formats you need to use the appropriate external program to preview the output.
:::

#### External Preview

If you prefer to use an external browser for preview (or have no preview triggered at all by rendering document) you can use the Preview Type option to specify an alternate behavior:

![](images/vscode-preview-settings.png){.border}

## Code Cells

There are a variety of tools that make it easier to edit and execute code cells. Editing tools include syntax highlighting, code folding, code completion, and signature tips:

![](images/vscode-code-cell.png)

For Python, R, and Julia cells, commands are available to execute the current cell, previous cells, or the currently selected line(s). Cell output is shown side by side in the Jupyter interactive console:

![](images/vscode-execute-cell.png)

Execute the current cell with `Ctrl+Shift+Enter`, the current line(s) with `Ctrl+Enter`, or previous cells with `Ctrl+Alt+P` (note that on the Mac you should use `Cmd` rather than `Ctrl` as the prefix for all Quarto keyboard shortcuts).

Enhanced features for embedded languages (e.g. completion, code execution) can be enabled by installing the most recent version(s) of these extensions:

- [Python Extension](https://marketplace.visualstudio.com/items?itemName=ms-python.python)
- [R Extension](https://marketplace.visualstudio.com/items?itemName=Ikuyadeu.r)
- [Julia Extension](https://marketplace.visualstudio.com/items?itemName=julialang.language-julia)

Note that you can quickly insert a new code cell using the `Ctrl+Shift+I` keyboard shortcut.

## Contextual Assistance

You'll notice a Quarto panel located at the bottom of VS Code alongside the existing Terminal and Output panels. This panel shows contextual assistance depending on the current cursor location:

1) Help/documentation is shown when editing code
2) A realtime preview of equations is shown when editing LaTeX math
3) Thumbnail previews are shown when your cursor is located on a markdown image.

For example, below help on the matplotlib `plot()` function is shown automatically when the cursor is located on the function:

![](/docs/computations/images/python-vscode.png){.border}

Here a preview of the currently edited LaTeX quation is shown in the same pane:

![](images/vscode-equation.png)

## YAML Intelligence

YAML code completion is available for project files, YAML front matter, and executable cell options:

![](images/vscode-yaml-completion.png)

If you have incorrect YAML it will also be highlighted when documents are saved:

![](images/vscode-yaml-diagnostics.png)

Note that YAML intelligence features require version 0.9.44 or later of the [Quarto CLI](https://github.com/quarto-dev/quarto-cli/releases/latest).

## Code Snippets

Code snippets are templates that make it easier to enter repeating code patterns (e.g. code blocks, callouts, divs, etc.). Execute the **Insert Snippet** command within a Quarto document to insert a markdown snippet:

![](images/vscode-snippets.png)

## Document Navigation

If you have a large document use the outline view for quick navigation between sections:

![](images/vscode-outline.png)

You can also use the `Go to Symbol in Editor` command (`Ctrl+Shift+O`) keyboard shortcut for type-ahead navigation of the current document's outline.

Use the `Go to File` command (`Ctrl+P`) to navigate to other files and the `Go to Symbol in Workspace` command (`Ctrl+T`) for type-ahead navigation to all headings in the workspace:

![](images/vscode-workspace-symbols.png)


## Notebook Editor

In addition to editing Quarto document as plain-text `.qmd` files, you can also use the VS Code Notebook Editor to author `.ipynb` notebooks that are rendered with Quarto. Next we'll review the basics of editing `.ipynb` notebooks for use with Quarto. 

### YAML Front Matter

The first cell of your notebook should be a **Raw** cell that contains the document title, author, and any other options you need to specify. Note that you can switch the type of a call to **Raw** using the cell type menu at the bottom right of the cell:

![](images/vscode-raw.png){.border fig-alt="The top section of an ipynb file open in VSCode. There is a Raw cell containing yaml front matter."}

In this example we specify that we want code to appear collapsed by default. There are YAML options to control many other aspects of document rendering. See the documentation on [Authoring](../authoring/markdown-basics.qmd) and [Output Formats](../output-formats/html-basics.qmd) for additional details.

### Markdown Cells

Here's the underlying code for the markdown cell:

![](images/vscode-markdown.png){.border fig-alt="A snippet of an ipynb document containing a Markdown cell. The cell contains some text written in Markdown."}

Note that a Quarto cross-reference (`@fig-polar`) is included in the markdown. Any valid Pandoc markdown syntax can be included in markdown cells.

### Output Options

Quarto uses leading comments with a special prefix (`#|`) to denote cell options. Here we specify the `label` and `fig-cap` options so that the plot generated from the cell can be cross-referenced.

![](images/vscode-cell-options.png){.border fig-alt="A snippet of a JupyterLab document containing a code cell. At the top of cell, before the code, are the Quarto chunk options '#| label: fig-polar' and '#| fig-cap: A line plot on a polar axis.'"}

Note that options must appear at the very beginning of the cell. As with document front-matter, option names/values use YAML syntax.

There are many output options available, including options to optionally hide code, warnings, and/or output. See the documentation on [Output Outputs](../computations/execution-options.qmd#output-options) for additional details.

### Cell Execution

``` include
../computations/_jupyter-execute.md
```

There are many other execution options available (e.g. to control caching, optimizing kernel start-up time, etc.). Learn more about these options in [Execution Options](../computations/execution-options.qmd).


### Converting Notebooks

You can convert between .ipynb and .qmd representations of a notebook using the `quarto convert` command. For example:

``` bash
quarto convert basics-jupyter.ipynb
quarto convert basics-jupyter.qmd
```

See `quarto convert help` for additional details on converting notebooks.
