---
title: "Optional Dependencies"
---

Depending on how you are using Quarto, you may need to install some additional dependencies (e.g. Jupyter, LaTeX, etc.). This article covers how to install these dependencies.

## Jupyter {.platform-table}

If you already have Python 3 and Jupyter installed in your environment, then you should have everything required to render Jupyter notebooks with Python kernels.

If you don't yet have Python 3 on your system, we recommend you install a version using the standard installer from <https://www.python.org/downloads/>.

If you are in a fresh Python 3 environment, installing the `jupyter` package will provide everything required to run Quarto:

+---------------+--------------------------------+
| Pkg. Manager  | Command                        |
+===============+================================+
| Pip\          | ``` bash                       |
| (Windows)     | py -m pip install jupyter      |
|               | ```                            |
+---------------+--------------------------------+
| Pip\          | ``` bash                       |
| (Mac/Linux)   | python3 -m pip install jupyter |
|               | ```                            |
+---------------+--------------------------------+
| Conda         | ``` bash                       |
|               | conda install jupyter          |
|               | ```                            |
+---------------+--------------------------------+

You can verify that Quarto is configured correctly for Jupyter with:

``` bash
quarto check jupyter
```

### Python Versions

On Mac OS and Linux, Quarto will by default use the version of Python 3 that it finds in the system path. Modify the `PATH` before invoking Quarto to use a different version of Python. You can also request a specific version of Python using the `QUARTO_PYTHON` environment variable.

::: callout-warning
#### Mac OS Python 3

If you are running Mac OS you might already have a version of Python 3 installed via the [Command Line Tools](https://developer.apple.com/xcode/features/). Even so, we still recommend that you install a version of Python 3 using the standard installer at <https://www.python.org/downloads/>.
:::

On Windows, Quarto will use Conda if it's invoked within an activated Conda environment. Otherwise, it will use the [Python Windows Launcher](https://docs.python.org/3/using/windows.html#launcher) to select a version of Python 3. Use the `PY_PYTHON` environment variable to override the default behavior (for example: `PY_PYTHON=3.8`). You can alternatively also request a specific version of Python using the `QUARTO_PYTHON` environment variable.

The `quarto check jupyter` command will tell you which version of Python will be selected for the shell it is invoked from within.

## Knitr

To use Quarto with R, you should install the **rmarkdown** R package:

``` r
install.packages("rmarkdown")
```

Installation of the **rmarkdown** package will also install the **knitr** package so you will have everything required to render documents containing R code. You can verify that Quarto is configured correctly for Knitr with:

``` bash
quarto check knitr
```

## LaTeX

If you expect to use Quarto to create PDFs, you will need to install a recent distribution of TeX. While you can employ whatever toolchain you like for LaTeX compilation, we strongly recommend the use of [TinyTeX](https://yihui.org/tinytex/), which is a distribution of [TeX Live](https://tug.org/texlive/) that provides a reasonably sized initial download (\~100 MB) that includes the 200 or so most commonly used TeX packages for Pandoc documents.

To install TinyTeX, use the following command:

``` bash
quarto tools install tinytex
```

If you prefer TeX Live, you can find instructions for installing it here: <https://tug.org/texlive/>.

## Pandoc

A recent version of Pandoc (v2.17.1.1) is installed alongside Quarto. This version of Pandoc won't interfere with others you may have on your system (it's not added to the system PATH).

To interact directly with the version of Pandoc installed with Quarto, use the `quarto pandoc` command. For example:

``` bash
quarto pandoc --version
quarto pandoc --list-output-formats
```

If you want to use an alternate version of Pandoc you can define the `QUARTO_PANDOC` environment variable and Quarto will look for Pandoc at the specified location.

Note that Quarto is expected to work correctly with only the currently embedded version, and so errors and other unexpected behavior may occur if you use a custom version (especially if it is an older version).
