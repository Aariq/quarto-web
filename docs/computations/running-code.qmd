---
title: Running Code
format: html
---

## Overview

Quarto supports executable code blocks within markdown. This allows you to create fully reproducible documents and reports---the code required to produce your output is part of the document itself, and is automatically re-run whenever the document is rendered.

There are currently two engines supported for running computations:

-   [Jupyter](https://jupyter.org/), for running code from Python and many other languages.

-   [Knitr](https://yihui.org/knitr/), for running code from R.

Extensive customization of code chunk output is supported, including the ability to hide code and/or output as well as fold code (make it visible only on demand).

## Code Blocks

Code blocks that use braces around the language name (e.g. ```` ```{python} ````) are executable, and will be run by Quarto during render. Here are a couple of simple examples in Python and R to illustrate (the output produced by the code block is shown on the Output tab):

### Python (Jupyter)

::: panel-tabset
## Code

```` markdown
---
title: "Jupyter Document"
format: html
jupyter: python3
---

```{{python}}
import matplotlib.pyplot as plt
plt.plot([1,2,3,4])
plt.show()
```

```{{python}}
import pandas as pd
d = {'one' : [1., 2., 3., 4.],
     'two' : [4., 3., 2., 1.]}
df = pd.DataFrame(d)
df
```
````

## Output

![](/docs/computations/images/jupyter-document.png){.border fig-alt="The resulting document rendered from the source code in the `Code` tab using the Jupyter engine. At the top of the page is the title `Jupyter Document` in large text. There is a block of code with a gray background underneath the title. Underneath this block is a line plot of y = x. There is another code block with a gray background under this and a table underneath that."}
:::

### R (Knitr)

::: panel-tabset
## Code

```` markdown
---
title: "Knitr Document"
format: html
execute:
  warning: false
---

```{{r}}
library(ggplot2)
ggplot(airquality, aes(Temp, Ozone)) + 
        geom_point() + 
        geom_smooth(method = "loess", se = FALSE)
```

```{{r}}
summary(airquality)
```
````

## Output

![](/docs/computations/images/knitr-document.png){.border .preview-image fig-alt="The resulting document rendered from the source code in the `Code` tab using the Knitr engine. At the top of the page is the title `Knitr Document` in large text. There is a block of code with a gray background underneath the title. Underneath this block is a scatterplot of the `airquality` dataset fit with a polynomial regression line and overlaid with a grey ribbon representing the confidence interval. There is another code block with a gray background under this plot with the output of `summary(airquality)`."}
:::

Note that we added the `execute: warning: false` option to suppress printing of warnings. See [Execution Options](/docs/computations/execution-options.qmd) for additional details.

You can produce a wide variety of output types from executable code blocks, including:

-   Static plots (e.g. from matplotlib or ggplot2).

-   Interactive plots (e.g. from plotly or leaflet).

-   Tabular output (e.g. from printing R or Pandas data frames)

-   Plain text output (e.g. printing the results of statistical summaries).

### Non-Executable Blocks

Note that code blocks that use conventional markdown code block syntax (either ```` ```python ```` or ```` ```{.python} ````) are not executable:

+-------------------+-------------+
| Code Block Syntax | Executable? |
+===================+:===========:+
|     ```{python}   | Yes         |
|     1 + 1         |             |
|     ```           |             |
+-------------------+-------------+
|     ```python     | No          |
|     1 + 1         |             |
|     ```           |             |
+-------------------+-------------+
|     ```{.python}  | No          |
|     1 + 1         |             |
|     ```           |             |
+-------------------+-------------+

Non-executable code blocks are printed but not executed.

## Rendering

### Markdown

Quarto will automatically run computations in any markdown document that contains executable code blocks. For example, the Python example shown above might be rendered with:

``` bash
quarto render jupyter-document.qmd
```

The R example might have been rendered with:

``` bash
quarto render knitr-document.qmd
```

### Notebooks

The Python example above uses a markdown input file, Quarto can also render any Jupyter notebook (.ipynb):

``` bash
quarto render jupyter-document.ipynb
```

``` include
_jupyter-execute.md
```

## Engine Binding

Earlier we said that the engine used for computations was determined automatically. You may want to customize this---for example you may want to use the Jupyter [R kernel](https://github.com/IRkernel/IRkernel) rather than Knitr, or you may want to use Knitr with Python code (via [reticulate](https://rstudio.github.io/reticulate/)).

Here are the basic rules for automatic binding:

+-----------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Extension | Engine Binding                                                                                                                                                                                     |
+===========+====================================================================================================================================================================================================+
| .qmd      | Use Knitr engine if an `{r}` code block is discovered within the file                                                                                                                              |
|           |                                                                                                                                                                                                    |
|           | Use Jupyter engine if an executable code block (e.g. `{python}`) is discovered within the file. The kernel used is determined based on the language of the first executable code block discovered. |
|           |                                                                                                                                                                                                    |
|           | Use no engine if no executable code blocks are discovered.                                                                                                                                         |
+-----------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| .ipynb    | Jupyter engine                                                                                                                                                                                     |
+-----------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| .Rmd      | Knitr engine                                                                                                                                                                                       |
+-----------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| .md       | No engine                                                                                                                                                                                          |
+-----------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

You can override the engine used via the `engine` option. For example:

``` markdown
engine: jupyter
```

``` markdown
engine: knitr
```

You can also specify that no execution engine should be used via `engine: markdown`.

The presence of the `knitr` or `jupyter` option will also override the default engine:

``` markdown
knitr: true
```

``` markdown
jupyter: python3
```

Variations with additional engine-specific options also work to override the default engine:

``` markdown
knitr:
  opts_knit:
    verbose: true
```

``` markdown
jupyter:
  kernelspec:
    display_name: Python 3
    language: python
    name: python3
```
