---
title: Running Code
description: "Quarto supports executable code blocks within markdown. This allows you to create fully reproducible documents and reports---the code required to produce your output is part of the document itself, and is automatically re-run whenever the document is rendered."
format: html
---

``` include
_running-code.md
```

## Engine Binding

Earlier we said that the engine used for computations was determined automatically. You may want to customize this---for example you may want to use the Jupyter [R kernel](https://github.com/IRkernel/IRkernel) rather than Knitr, or you may want to use Knitr with Python code (via [reticulate](https://rstudio.github.io/reticulate/)).

Here are the basic rules for automatic binding:

+-----------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Extension | Engine Binding                                                                                                                                                                                     |
+===========+====================================================================================================================================================================================================+
| .qmd      | Use Knitr engine if an `{r}` code block is discovered within the file                                                                                                                              |
|           |                                                                                                                                                                                                    |
|           | Use Jupyter engine if an executable code block (e.g. `{python}`) is discovered within the file. The kernel used is determined based on the language of the first executable code block discovered. |
|           |                                                                                                                                                                                                    |
|           | Use no engine if no executable code blocks are discovered.                                                                                                                                         |
+-----------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| .ipynb    | Jupyter engine                                                                                                                                                                                     |
+-----------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| .Rmd      | Knitr engine                                                                                                                                                                                       |
+-----------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| .md       | No engine                                                                                                                                                                                          |
+-----------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

You can override the engine used via the `engine` option. For example:

``` markdown
engine: jupyter
```

``` markdown
engine: knitr
```

You can also specify that no execution engine should be used via `engine: markdown`.

The presence of the `knitr` or `jupyter` option will also override the default engine:

``` markdown
knitr: true
```

``` markdown
jupyter: python3
```

Variations with additional engine-specific options also work to override the default engine:

``` markdown
knitr:
  opts_knit:
    verbose: true
```

``` markdown
jupyter:
  kernelspec:
    display_name: Python 3
    language: python
    name: python3
```

## Fenced Echo

If you are writing a tutorial or documentation on using Quarto code blocks, you'll likely want to include the fenced code delimiter (e.g. ```` ```{python} ````) in your code output to emphasize that executable code requires that delimiter. You can do this using the `echo: fenced` option. For example, the following code block:

``` {{python}}
#| echo: fenced
1 + 1
```

Will be rendered as:

```{python}
#| echo: fenced
1 + 1
```

This is especially useful when you want to demonstrate the use of cell options. For example, here we demonstrate the use of the `output` and `code-overflow` options:

```{{python}}
#| echo: fenced
#| output: false
#| code-overflow: wrap
1 + 1
```

This code block appears in the rendered document as:

```{python}
#| echo: fenced
#| output: false
#| code-overflow: wrap
1 + 1
```

Note that all YAML options will be included in the fenced code output _except for_ `echo: fenced` (as that might be confusing to readers).

This behavior can also be specified at the document level if you want all of your executable code blocks to include the fenced delimiter and YAML options:

```yaml
---
title: "My Document"
format: html
execute:
  echo: fenced
---
```

#### Unexecuted Blocks

Often you'll want to include a fenced code block purely as documentation (not executable). You can do this by using two curly braces around the language (e.g. `python`, `r`, etc.) rather than one. For example:

``` {{{python}}}
1 + 1
```

Will be output into the document as:

``` {{python}}
1 + 1
```

If you want to show an example with multiple code blocks and other markdown, just enclose the entire example in 4 backticks (e.g. ````` ```` `````) and use the two curly brace syntax for code blocks within. For example:

`````
````
---
title: "My document"
---

Some markdown content.

```{{{python}}}
1 + 1
```

Some additional markdown content.

````
`````
