---
title: "Passports & Colors"
subtitle: "Originally published at <https://observablehq.com/@neocartocnrs/passeports-colors>"
author: "neocarto"
date: 2020-10-20
license: mit
format: 
  html:
    code-tools: true
execute:
  echo: false
---


```{ojs}
//| panel: input
//| layout-ncol: 3

viewof ch = checkbox({
  title: "Passport color:",
  options: [
    { value: "red", label: "Red" },
    { value: "green", label: "Green" },
    { value: "blue", label: "Blue" },
    { value: "black", label: "Black" }
  ],
  value: ["red", "green", "blue", "black"],
  submit: false
})

viewof type = radio({
  title: "Representation:",
  options: [
    { label: 'Passports', value: 'p' },
    { label: 'Circles', value: 'c' }
  ],
  value: 'p'
})

viewof k = slider({
  title: "Symbol size:",
  min: 1,
  max: 10,
  value: 3,
  step: 1
})
```



```{ojs}
map = {
  for (let i = 0; i < 200; i++) {
    simulation.tick();
  }

  const svg = d3
    .create("svg")
    .attr("viewBox", [0, 0, width, height])
    .style("width", "100%")
    .style("height", "auto");

  // Defs

  var defs = svg.append("defs");

  const pattern = defs
    .append("pattern")
    .attr("id", "hatch")
    .attr("patternUnits", "userSpaceOnUse")
    .attr("width", 6)
    .attr("height", 6);

  pattern
    .append("line")
    .attr("x1", 0)
    .attr("y1", 0)
    .attr("x2", 6)
    .attr("y1", 6)
    .attr("stroke", "white")
    .attr("stroke-width", 1)
    .attr("stroke-opacity", 0.7);

  // Sphere

  svg
    .append("rect")
    .attr("opacity", 1)
    .attr("x", 0)
    .attr("y", 0)
    .attr("width", width)
    .attr("height", height)
    .style('fill', "#9ACBE3")
    .attr("opacity", 0.8);

  svg
    .append("rect")
    .attr("fill-opacity", 0.4)
    .attr("x", 0)
    .attr("y", height - 60)
    .attr("width", width)
    .attr("height", 60)
    .attr('fill', "white");

  svg
    .append("rect")
    .attr("fill-opacity", 0.4)
    .attr("x", 0)
    .attr("y", 0)
    .attr("width", width)
    .attr("height", height)
    .attr('fill', "url('#hatch')");

  // Countries

  svg
    .append("path")
    .datum(topojson.feature(json, json.objects.countries))
    .attr("fill", "white")
    .style('fill-opacity', 0.7)
    .attr("d", path);

  // Passeports images

  svg
    .append("g")
    .selectAll("image")
    .data(data.sort((a, b) => d3.descending(a.mobilityscore, b.mobilityscore)))
    .join("image")
    .attr("class", "pasp")
    .attr("xlink:href", d => d.thumb)
    .attr('width', d => d.imgw)
    .attr('height', d => d.imgh)
    .attr("x", d => d.x - d.imgw / 2)
    .attr("y", d => d.y - d.imgh / 2)
    .attr("style", "border: 5px solid #555")
    .style("visibility", visib[0]);

  // Test

  svg
    .selectAll('image')
    .data(data)
    .enter()
    .append('image')
    .attr("xlink:href", d => d.thumb)
    .attr('width', d => d.imgw)
    .attr('height', d => d.imgh)
    .attr("x", d => d.x - d.imgw / 2)
    .attr("y", d => d.y - d.imgh / 2);

  // Passeports circles

  svg
    .append("g")
    .selectAll("circle")
    .data(data.sort((a, b) => d3.descending(a.mobilityscore, b.mobilityscore)))
    .join("circle")
    .attr("class", "pasp")
    .attr("r", d => radius(d.mobilityscore))
    .attr("cx", d => d.x)
    .attr("cy", d => d.y)
    .attr("fill", d => colors.get(d.color))
    .attr("stroke", "#404752")
    .attr("stroke-width", 0)
    .style("visibility", visib[1]);

  // Title

  svg
    .append("text")
    .attr("x", width / 2)
    .attr("y", height - 17)
    .text("GLOBAL PASSPORT POWER RANK")
    .attr("text-anchor", "middle")
    .attr("font-family", "sans-serif")
    .attr("fill", "#5c658a")
    .attr("fill-opacity", 0.3)
    .style("font-size", "45px");

  // Chart

  svg
    .append("text")
    .attr("x", 10)
    .attr("y", 410)
    .text("The Power of Colors")
    .attr("font-family", "sans-serif")
    .attr("font-weight", "bold")
    .attr("fill", "#4a524d")
    .style("font-size", "21px");

  const x1 = 10;
  const y1 = 430;
  const barheight = 2;

  svg
    .selectAll(".chart")
    .data(bycolor)
    .join("rect")
    .attr('height', barheight)
    .attr('width', d => d[1] * 5)
    .attr('y', function(d, i) {
      return y1 + i * 7 * barheight;
    })
    .attr('x', x1)
    .attr('class', "chart")
    .attr("fill", d => colors.get(d[0]))
    .attr("opacity", 1);

  svg
    .selectAll(".charttxt")
    .data(bycolor)
    .join("text")
    .attr('x', 10)
    .attr('y', function(d, i) {
      return y1 + i * 7 * barheight - 3;
    })
    .text(
      d =>
        "People with " +
        d[0] +
        " passports can travel to an average of " +
        Math.round(d[1]) +
        " countries"
    )
    .attr("font-family", "sans-serif")
    .attr("fill", "#545252")
    .style("font-size", "9px");

  // Tooltip

  const tooltip = svg.append("g");

  tooltip.style("visibility", "hidden");

  tooltip
    .append("image")
    .attr("class", "tooltipimg")
    .attr('width', 70)
    .attr('height', 100)
    .attr("x", 10)
    .attr("y", 32);

  tooltip
    .append("text")
    .attr("class", "tooltipname")
    .attr("x", 10)
    .attr("y", 22)
    .attr("font-family", "sans-serif")
    .attr("font-weight", "bold")
    .attr("fill", "#4a524d")
    .style("font-size", "21px");

  const y = 145;

  tooltip
    .append("text")
    .attr("x", 10)
    .attr("y", y)
    .text("With this passport")
    .attr("font-family", "sans-serif")
    .attr("fill", "#4a524d")
    .style("font-size", "12px");

  tooltip
    .append("text")
    .attr("x", 10)
    .attr("y", y + 12)
    .text("you can reach")
    .attr("font-family", "sans-serif")
    .attr("fill", "#4a524d")
    .style("font-size", "12px");

  tooltip
    .append("text")
    .attr("class", "tooltiptxt")
    .attr("x", 10)
    .attr("y", y + 24)
    .attr("font-family", "sans-serif")
    .attr("font-weight", "bold")
    .attr("fill", "#4a524d")
    .style("font-size", "12px");

  tooltip
    .append("text")
    .attr("class", "tooltiptxt")
    .attr("x", 10)
    .attr("y", y + 36)
    .text("without prior visa")
    .attr("font-family", "sans-serif")
    .attr("fill", "#4a524d")
    .style("font-size", "12px");

  tooltip
    .append("text")
    .attr("class", "tooltiptxt")
    .attr("x", 10)
    .attr("y", y + 48)
    .text("(in 2019 before Covid19)")
    .attr("font-family", "sans-serif")
    .attr("fill", "#4a524d")
    .style("font-size", "12px");

  svg
    .selectAll(".pasp")
    .on("touchmove mousemove", function(event, d) {
      d3.select(this)
        .attr("stroke-width", 2)
        .raise();
      tooltip.style("visibility", "visible");
      svg.select(".tooltipimg").attr("xlink:href", d.thumb);
      svg.select(".tooltipname").text(d.name);
      svg.select(".tooltiptxt").text(d.mobilityscore + " countries");
    })
    .on("touchend mouseleave", function() {
      tooltip.style("visibility", "hidden");
      d3.select(this)
        .attr("stroke-width", 0)
        .lower();
    });

  // Sources

  var source = svg
    .append("text")
    .attr("x", width / 2)
    .attr("y", height - 5)
    .attr("text-anchor", "middle")
    .text(
      "Map designed by Nicolas Lambert, 2020 - Data Source: https://www.passportindex.org (2019 data before covid19) - Behind this map: see https://observablehq.com/@neocartocnrs/passeports-colors"
    )
    .attr("font-family", "sans-serif")
    .style("font-size", "10px")
    .style("font-style", "italic")
    .attr("fill", "#5c658a")
    .attr("fill-opacity", 0.6);

  svg
    .append("circle")
    .attr("fill", "white")
    .attr("cx", width)
    .attr("cy", 0)
    .attr("r", 150)
    .attr("opacity", 0.4);

  svg
    .append("circle")
    .attr("fill", "white")
    .attr("cx", width)
    .attr("cy", 0)
    .attr("r", 160)
    .attr("opacity", 0.4);

  svg
    .append("circle")
    .attr("fill", "white")
    .attr("cx", width)
    .attr("cy", 0)
    .attr("r", 170)
    .attr("opacity", 0.4);

  var help = svg
    .append("text")
    .attr("y", 5)
    .attr("font-family", "sans-serif")
    .attr("font-weight", "bold")
    .attr("fill", "#3e4657")
    .style("font-size", "11px")
    .attr("fill-opacity", 0.4)
    .attr("text-anchor", "end")
    .attr("font-family", "sans-serif");

  hlp.forEach(d => {
    help
      .append("tspan")
      .attr("x", width - 10)
      .attr("dy", 15)
      .text(d);
  });

  return svg.node();
}
```

# Color matter

I deliver here a cartography by proportional passports (sic). And yeah, on this map, the surface of the passports represented is proportional to their power, that is to say to the number of countries they allow to reach without prior visa (in 2019 before the Covid epidemic19). And as absurd as it may seem, when it comes to international mobility, color matters. If you have a red passport, be aware that you will be able to travel easily to an average of 135 countries. If you have a blue passport, it will give you access to 103 countries. With a black passport, you will be able to reach 88 countries. And if by misfortune you have a green passport, only 78 countries will open their doors to you. In addition, you should know that the most « powerful » passport in the world is the United Arab Emirates passport, which gives you access to 179 countries around the world (compared to 170 for a French passport). On the other hand, the least powerful passport is the Afghan passport, which gives access to only 35 countries.

But still, you probably think it’s absurd to take the color of passports as a criterion, don’t you? And you’re not entirely wrong, even if these colors are not chosen at random. Red, for example, was chosen by the communist countries, you will easily understand why. But red is also the choice of all European countries except Croatia. The color green, for its part, was chosen by the majority of Muslim countries. As you know, green is the color of Islam. Blue is very present in America (North and South). And finally black passports are extremely rare. Only 7 countries use them.

Eurasia, America, Muslim countries: in the end, these colors refer more or less to a regionalization of the World. More than the color of your passport, it is actually the place of your country in the world order that determines your ability to cross borders. In other words, regardless of whether you are a citizen of a powerful country rich in peace or a poor country in war, you will not have access to the same spatial opportunities. The first criterion to be entitled to international mobility is therefore above all to be born in a good place. No more and no less.

Note: the data used here come from the website [passportindex.org](passportindex.org). But other rankings exist with significantly different data. See for example [henleypassportindex.com](henleypassportindex.com).

```{ojs}
visib = {
  if (type == "p") {
    var style1 = "visible";
    var style2 = "hidden";
  }

  if (type == "c") {
    var style1 = "hidden";
    var style2 = "visible";
  }

  for (let i = 0; i < 200; i++) {
    simulation.tick();
  }
  return [style1, style2];
}
```

```{ojs}
//| echo: true
colors = new Map()
  .set("red", "#c76f65")
  .set("green", "#80bd6c")
  .set("blue", "#698ec9")
  .set("black", "#5c5959")
```

```{ojs}
//| echo: true
bycolor = Array.from(
  d3.rollup(data, v => d3.mean(v, d => d.mobilityscore), d => d.color)
)
```

```{ojs}
//| echo: true
nd2 = Array.from(d3.group(data, d => d.color)).map(d => d[1][0])
```

```{ojs}
//| echo: true
bycolor2 = d3.rollups(
  data,
  v => ({
    nb: v.length,
    score: d3.mean(v, d => d.mobilityscore)
  }),
  d => d.color
)
```

```{ojs}
//| echo: true
hlp = {
  if (type == "p") {
    var t = "passport";
  } else {
    var t = "circle";
  }

  var txt =
    "On this map, the\nsurface area of each\n " +
    t +
    " is proportional\nto the number of\ncountries it allows \nto go to in 2019\n(before\nCovid19).";
  return txt.split("\n");
}
```

# Data Import & handling

```{ojs}
//| echo: true
radius = d3.scaleSqrt(
  [0, d3.max(data, d => d.mobilityscore)],
  [0, 5.6 * Math.sqrt(k)]
)
```

```{ojs}
simulation = d3
  .forceSimulation(data)
  .force("x", d3.forceX(d => projection(d.position)[0]))
  .force("y", d3.forceY(d => projection(d.position)[1]))
  .force("collide", d3.forceCollide(d => d.imgw / 2))
  .stop()
```

```{ojs}
//| echo: true
data = passeports
  .map((d) => {
    const id = d.id;
    const name = d.name;
    const thumb =
      "https://raw.githubusercontent.com/neocarto/resources/master/datasets/passports/outputs/thumb/" +
      d.id.toLowerCase() +
      ".png";
    const color = d.color;
    const mobilityscore = mobilyscore.get(d.id);
    const feature = features.get(d.id);
    return {
      id,
      position: feature && feature.properties.position,
      name: name,
      thumb: thumb,
      color: color,
      mobilityscore: +mobilityscore,
      imgw: Math.sqrt(+mobilityscore * k * 0.7),
      imgh: Math.sqrt((+mobilityscore * k) / 0.7)
    };
  })
  .filter(
    (d) =>
      d.color == ch[0] ||
      d.color == ch[1] ||
      d.color == ch[2] ||
      d.color == ch[3]
  )
```

```{ojs}
// centroid -> position
features = new Map(
  topojson
    .feature(json, json.objects.countries)
    .features.map(d => {
      d.properties.position = d3.geoCentroid(
        d.geometry.type == "Polygon" ? d : largestPolygon(d)
      );
      return d;
    })
    .map(d => [d.properties.ISO2, d])
)
```

```{ojs}
passeports = d3.csv(
  "https://raw.githubusercontent.com/neocarto/resources/master/datasets/passports/outputs/ctrindex.csv"
)
```

```{ojs}
powerrank = d3.csv(
  "https://raw.githubusercontent.com/neocarto/resources/master/datasets/passports/outputs/passport-power-rank-2019.csv"
)
```

```{ojs}
mobilyscore = new Map(powerrank.map(d => [d.id, +d.mobilityscore]))
```

```{ojs}
json = d3.json(
  "https://raw.githubusercontent.com/neocarto/resources/master/datasets/passports/outputs/countries.topojson"
)
```

# Appendix

```{ojs}
callout = (g, value) => {
  if (!value) return g.style("display", "none");

  g.style("display", null)
    .style("pointer-events", "none")
    .style("font", "10px sans-serif");

  const path = g
    .selectAll("path")
    .data([null])
    .join("path")
    .attr("fill", "white")
    .attr("stroke", "black");

  const text = g
    .selectAll("text")
    .data([null])
    .join("text")
    .call(text =>
      text
        .selectAll("tspan")
        .data((value + "").split(/\n/))
        .join("tspan")
        .attr("x", 0)
        .attr("y", (d, i) => `${i * 1.1}em`)
        .style("font-weight", (_, i) => (i ? null : "bold"))
        .style("font-size", (_, i) => (i ? null : 12))
        .text(d => d)
    );

  const { x, y, width: w, height: h } = text.node().getBBox();

  text.attr("transform", `translate(${-w / 2},${15 - y})`);
  path.attr(
    "d",
    `M${-w / 2 - 10},5H-5l5,-5l5,5H${w / 2 + 10}v${h + 20}h-${w + 20}z`
  );
}
```

```{ojs}
//| echo: true
import { checkbox, slider, radio } from "@jashkenas/inputs"
```

```{ojs}
//| echo: true
path = d3.geoPath(projection)
```

```{ojs}
projection = d3.geoPatterson()
```

```{ojs}
// To fit svg width according to the projection (from @d3/projection-comparison)
height = {
  const [[x0, y0], [x1, y1]] = d3
    .geoPath(projection.fitWidth(width, sphere))
    .bounds(sphere);
  const dy = Math.ceil(y1 - y0),
    l = Math.min(Math.ceil(x1 - x0), dy);
  projection.scale((projection.scale() * (l - 1)) / l).precision(0.2);
  return dy;
}
```

```{ojs}
sphere = ({ type: "Sphere" })
```

```{ojs}
// To put circles in the largest polygon (from @xangregg/proportional-geographic-scatterplot-by-country)
largestPolygon = function(d) {
  var best = {};
  var bestArea = 0;
  d.geometry.coordinates.forEach(function(coords) {
    var poly = { type: 'Polygon', coordinates: coords };
    var area = d3.geoArea(poly);
    if (area > bestArea) {
      bestArea = area;
      best = poly;
    }
  });
  return best;
}
```

```{ojs}
topojson = require("topojson@3")
```

```{ojs}
d3 = require("d3@6", "d3-geo-projection@2")
```

