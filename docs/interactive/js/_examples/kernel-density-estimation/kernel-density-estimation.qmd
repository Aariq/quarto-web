---
title: "Kernel Density Estimation"
subtitle: "Originally published at <https://observablehq.com/@d3/kernel-density-estimation>"
author: "Mike Bostock"
date: 2019-06-28
license: isc
format: 
  html:
    keep-hidden: true
    code-tools: true
---

[Kernel density estimation](https://en.wikipedia.org/wiki/Kernel_density_estimation), or KDE, estimates the probability distribution of a random variable. The kernel’s *bandwidth* determines the estimate’s smoothness: if the bandwidth is too small, the estimate may include spurious bumps and wiggles; too large, and the estimate reveals little about the underlying distribution.

This example, based on [work by John Firebaugh](https://bl.ocks.org/jfirebaugh/900762), shows times between eruptions of [Old Faithful](https://en.wikipedia.org/wiki/Old_Faithful). See also a [two-dimensional density estimation](https://observablehq.com/@d3/density-contours) of this data.

```{ojs}
//| echo: false
viewof bandwidth = {
  const form = html`<form>
  <input name=i type=range min=1 max=20 value=7 step=any style="width:180px;">
  <output style="font-size:smaller;font-style:oblique;" name=o></output>
</form>`;
  form.i.oninput = () => form.o.value = `${(form.value = form.i.valueAsNumber).toFixed(1)} bandwidth`;
  form.i.oninput();
  return form;
}
```

```{ojs}
//| echo: false
chart = {
  const svg = d3.create("svg")
      .attr("viewBox", [0, 0, width, height]);

  svg.append("g")
      .attr("fill", "#bbb")
    .selectAll("rect")
    .data(bins)
    .join("rect")
      .attr("x", d => x(d.x0) + 1)
      .attr("y", d => y(d.length / data.length))
      .attr("width", d => x(d.x1) - x(d.x0) - 1)
      .attr("height", d => y(0) - y(d.length / data.length));

  svg.append("path")
      .datum(density)
      .attr("fill", "none")
      .attr("stroke", "#000")
      .attr("stroke-width", 1.5)
      .attr("stroke-linejoin", "round")
      .attr("d", line);

  svg.append("g")
      .call(xAxis);

  svg.append("g")
      .call(yAxis);

  return svg.node();
}
```

```{ojs}
function kde(kernel, thresholds, data) {
  return thresholds.map(t => [t, d3.mean(data, d => kernel(t - d))]);
}
```

```{ojs}
function epanechnikov(bandwidth) {
  return x => Math.abs(x /= bandwidth) <= 1 ? 0.75 * (1 - x * x) / bandwidth : 0;
}
```

```{ojs}
line = d3.line()
    .curve(d3.curveBasis)
    .x(d => x(d[0]))
    .y(d => y(d[1]))
```

```{ojs}
x = d3.scaleLinear()
    .domain(d3.extent(data)).nice()
    .range([margin.left, width - margin.right])
```

```{ojs}
y = d3.scaleLinear()
    .domain([0, d3.max(bins, d => d.length) / data.length])
    .range([height - margin.bottom, margin.top])
```

```{ojs}
xAxis = g => g
    .attr("transform", `translate(0,${height - margin.bottom})`)
    .call(d3.axisBottom(x))
    .call(g => g.append("text")
        .attr("x", width - margin.right)
        .attr("y", -6)
        .attr("fill", "#000")
        .attr("text-anchor", "end")
        .attr("font-weight", "bold")
        .text(data.title))
```

```{ojs}
yAxis = g => g
    .attr("transform", `translate(${margin.left},0)`)
    .call(d3.axisLeft(y).ticks(null, "%"))
    .call(g => g.select(".domain").remove())
```

```{ojs}
thresholds = x.ticks(40)
```

```{ojs}
density = kde(epanechnikov(bandwidth), thresholds, data)
```

```{ojs}
bins = d3.histogram()
    .domain(x.domain())
    .thresholds(thresholds)
  (data)
```

```{ojs}
data = Object.assign(await FileAttachment("faithful.json").json(), {title: "Time between eruptions (min.)"})
```

```{ojs}
height = 500
```

```{ojs}
margin = ({top: 20, right: 30, bottom: 30, left: 40})
```

```{ojs}
d3 = require("d3@6")
```

