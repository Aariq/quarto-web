---
title: "Men's Tennis"
subtitle: "How Has Men’s Tennis Changed From 1973–2021? Originally published at <https://observablehq.com/@unkleho/how-has-mens-tennis-changed-from-1973-2021>"
author: "Kaho Cheung"
date: 2021-07-18
format: 
  html:
    toc: false
    code-tools: true

execute:
  echo: false
---

::: {layout="[ [1], [1,1] ]"}

#### Height and Weight

```{ojs}
{
  // There is some wild data that needs to be cleaned up!
  const data = playersData.filter(
    p =>
      p.height &&
      p.height < 300 &&
      p.height > 100 &&
      p.weight > 0 &&
      p.weight < 150
  );

  return Plot.plot({
    grid: true,
    width,
    color: {
      range: [radixColours.blue.blue4, radixColours.blue.blue11].map(c =>
        c.replace(/ /g, ',')
      )
    },
    x: {
      label: 'Weight (kg)'
    },
    y: {
      label: 'Height (cm)'
    },
    marks: [
      Plot.rect(
        data,
        Plot.bin({ fill: "count" }, { x: "weight", y: "height", inset: 0 })
      )
    ]
  });
}
```



#### Average Height

```{ojs}
{
  // Try replacing the two players below with your favourite player!
  const labels = isDesktop
    ? [getPlayer('John McEnroe'), getPlayer('Roger Federer')]
    : [getPlayer('Andy Murray'), getPlayer('Ivan Lendl')];
  const data = getData();

  return Plot.plot({
    width,
    y: {
      grid: true,
      label: 'Average Height (cm)',
      nice: true
    },
    marks: [
      Plot.line(data, {
        x: "date",
        y: "averageHeight",
        curve: "natural",
        stroke: colours[0]
      }),
      Plot.area(data, {
        x1: "date",
        y1: Math.floor(d3.min(data, d => d.averageHeight)),
        y2: "averageHeight",
        curve: "natural",
        fill: colours[0],
        fillOpacity: 0.2
      }),
      Plot.link(labels, {
        x1: "dateStart",
        y1: "height",
        x2: "dateEnd",
        y2: "height"
      }),
      Plot.dot(labels, {
        x: "dateStart",
        y: "height",
        fill: 'black'
      }),
      Plot.dot(labels, {
        x: "dateEnd",
        y: "height",
        fill: 'black'
      }),
      Plot.text(labels, {
        x: "dateEnd",
        y: "height",
        text: d => d.name + ' (' + d.height + 'cm)',
        textAnchor: "end",
        fontSize: 14,
        dx: -5,
        dy: 15
      }),
      Plot.ruleY([
        Math.floor(d3.min(data, d => d.averageHeight)),
        isDesktop ? Math.ceil(d3.max(data, d => d.averageHeight)) : 192
      ])
    ]
  });
}
```

#### Average Weight

```{ojs}
{
  const data = getData();
  const labels = [getPlayer('Michael Chang'), getPlayer('Novak Djokovic')];

  return Plot.plot({
    width,
    y: {
      grid: true,
      label: 'Average Weight (kg)'
    },
    marks: [
      Plot.line(getData(), {
        x: "date",
        y: "averageWeight",
        curve: "natural",
        stroke: colours[0]
      }),
      Plot.area(getData(), {
        x1: "date",
        y1: Math.floor(d3.min(data, d => d.averageWeight)),
        y2: "averageWeight",
        curve: "natural",
        fill: colours[0],
        fillOpacity: 0.2
      }),
      Plot.link(labels, {
        x1: "dateStart",
        y1: "weight",
        x2: "dateEnd",
        y2: "weight"
      }),
      Plot.dot(labels, {
        x: "dateStart",
        y: "weight",
        fill: 'black'
      }),
      Plot.dot(labels, {
        x: "dateEnd",
        y: "weight",
        fill: 'black'
      }),
      Plot.text(labels, {
        x: "dateEnd",
        y: "weight",
        text: d => d.name + ' (' + d.weight + 'kg)',
        textAnchor: "end",
        fontSize: 14,
        dx: -5,
        dy: 15
      }),
      Plot.ruleY([
        Math.floor(d3.min(data, d => d.averageWeight)),
        Math.ceil(d3.max(data, d => d.averageWeight))
      ])
    ]
  });
}
```

:::

## Libraries

### Observable Plot

<https://github.com/observablehq/plot>

Most of the charts are created with Observable's new Plot library. This is my first attempt and I definitely found it easy to work with.

### D3 Render

<https://github.com/unkleho/d3-render>

The __Backhand Comparison__ and __Lefty vs Righty__ charts both use \`d3-render\`, an experimental declarative d3 library I have been working on.

<https://observablehq.com/@unkleho/introducing-d3-render-truly-declarative-and-reusable-d3>

## Data

### Mens Top 100 Year End rankings, 1973-2021

Data from <https://www.atptour.com/en/rankings>

```{ojs}
rawRankingsData = d3
  .csvParse(await FileAttachment("rankings.csv").text(), d3.autoType)
  .map(d => {
    return {
      ...d,
      year: d.date.getFullYear()
    };
  })
```

### All Men in Top 100, 1973-2021

Data from <https://www.atptour.com/en/players>

```{ojs}
rawPlayersData = new Map(
  d3
    .csvParse(await FileAttachment("players.csv").text(), d3.autoType)
    .map(d => [d.id, d])
)
```

```{ojs}
//| echo: true
playersData = [...rawPlayersData].map(([key, value]) => value)
```

### Merged Rankings and Player Data

```{ojs}
rawPlayerRankingsData = rawRankingsData.map(d => {
  const playerId = d.playerUrl
    .replace('https://www.atptour.com/en/players/', '')
    .replace('/overview', '');

  return {
    ...d,
    ...rawPlayersData.get(playerId),
    count: 1
  };
})
// .filter(d => d.ranking <= ranking)
```

```{ojs}
rawCountryData = d3Array.groups(
  rawPlayerRankingsData,
  d => d.year,
  d => d.country
)
```

## Helpers

```{ojs}
getData = (ranking = 100) => {
  const data = d3Array.rollup(
    rawPlayerRankingsData.filter(d => d.ranking <= ranking),
    v => {
      const oneHandedBackhand = v.filter(d => d.backhand === 'one-handed')
        .length;
      const twoHandedBackhand = v.filter(d => d.backhand === 'two-handed')
        .length;
      const totalBackhand = oneHandedBackhand + twoHandedBackhand;
      const oneHandedBackhandPercent = oneHandedBackhand / totalBackhand;
      const twoHandedBackhandPercent = twoHandedBackhand / totalBackhand;

      const rightHanded = v.filter(d => d.hand === 'right').length;
      const leftHanded = v.filter(d => d.hand === 'left').length;
      const totalHanded = rightHanded + leftHanded;
      const rightHandedPercent = rightHanded / totalHanded;
      const leftHandedPercent = leftHanded / totalHanded;

      return {
        averageAge: d3.mean(v, v => v.age),
        averageHeight: d3.mean(v, v => v.height),
        averageWeight: d3.mean(v, v => v.weight),
        oneHandedBackhand,
        twoHandedBackhand,
        oneHandedBackhandPercent,
        twoHandedBackhandPercent,
        rightHanded,
        leftHanded,
        rightHandedPercent,
        leftHandedPercent
      };
    },
    d => d.year
  );

  return Array.from(data).map(([year, d]) => ({
    year,
    date: new Date(year, 0, 1),
    ...d
  }));
}
```

```{ojs}
getPlayer = name => {
  // const name = 'Roger Federer';
  const rankingsData = rawRankingsData.filter(d => d.name === name);
  const playerData = [...rawPlayersData]
    .map(([key, value]) => value)
    .find(value => value.name === name);

  return {
    dateStart: new Date(d3.min(rankingsData, d => d.year), 0, 1),
    dateEnd: new Date(d3.max(rankingsData, d => d.year), 0, 1),
    ...playerData
  };
}
```

```{ojs}
area = d3
  .area()
  .curve(d3.curveBasis)
  .x(d => x(d.data.year))
  .y0(d => y(d[0]))
  .y1(d => y(d[1]))
```

```{ojs}
x = d3
  .scaleTime()
  .domain(
    d3.extent(backhandData, d => {
      return d.year;
    })
  )
  .range([margin.left, width - margin.right])
```

```{ojs}
y = d3.scaleLinear().range([height - margin.bottom, margin.top])
```

```{ojs}
color = d3
  .scaleOrdinal()
  .domain(['oneHandedBackhandPercent', 'twoHandedBackhandPercent'])
  .range([radixColours.blue.blue11, radixColours.cyan.cyan8])
```

```{ojs}
xAxis = g =>
  g.attr("transform", `translate(0,${height - margin.bottom})`).call(
    d3
      .axisBottom(x)
      .ticks(width / 80)
      .tickSizeOuter(0)
      .tickFormat(d3.format("d"))
  )
```

```{ojs}
yAxis = g =>
  g
    .attr("transform", `translate(${margin.left},0)`)
    .call(d3.axisLeft(y).ticks(10, "%"))
    .call(g => g.select(".domain").remove())
```

```{ojs}
height = width > 600 ? 500 : 350
```

```{ojs}
margin = ({ top: 4, right: 8, bottom: 20, left: 36 })
```

```{ojs}
isDesktop = width > 600
```

```{ojs}
colours = [
  radixColours.blue.blue11,
  radixColours.orange.orange9,
  radixColours.red.red9,
  radixColours.cyan.cyan8,
  radixColours.grass.grass9,
  radixColours.yellow.yellow8
].map(c => c.replace(/ /g, ','))
// Need to use comma because d3.color doesn't accept space for hsl
```

## Imports

```{ojs}
import { radio } from '@jashkenas/inputs'
```

```{ojs}
d3 = require("d3@5")
```

```{ojs}
d3Array = require("d3-array")
```

```{ojs}
render = d3Render.default
```

```{ojs}
d3Render = require('d3-render')
```

```{ojs}
radixColours = import('https://unpkg.com/@radix-ui/colors@0.1.7/index.mjs?module')
```

