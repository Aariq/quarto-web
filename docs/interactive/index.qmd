---
title: "Interactive Documents"
---

## Overview

Adding interactivity to an article is a great way to help readers explore the concepts and data you are presenting more deeply. There are three ways to add interactive components to Quarto documents:

1.  Create custom JavaScript visualizations using [Observable](https://observablehq.com/@observablehq/five-minute-introduction).

2.  Use the [Shiny](https://shiny.rstudio.com) R package to add interactivity to Knitr engine documents.

3.  Incorporate [Jupyter Widgets](https://jupyter.org/widgets) or [htmlwidgets](https://www.htmlwidgets.org/) (for the Jupyter and Knitr engines, respectively) into your document.

Each of these techniques has distinct benefits and drawbacks in terms of expressiveness, ease of development, and deployment requirements. We'll touch on these considerations briefly below, then provide links to more in depth documentation for learning more.

## JavaScript

## Shiny

The Shiny package provides a flexible, easy to use framework for creating interactive web applications with R. Quarto in turn includes support for embedding Shiny components and applets into documents created with the Knitr engine.

Here's a live example of Shiny interactive components along with a brief explanation of the code required to create them:

::: {.border layout-ncol="2"}
```{=html}
 <iframe id="example1" src="https://gallery.shinyapps.io/goog-trend-index/" style="border: none; width: 100%; height: 720px" frameborder="0"></iframe>
```
<div>

<br/>

Shiny comes with a variety of built in input widgets. With minimal syntax it is possible to include widgets like the ones shown on the left in your apps:

``` r
# Select type of trend to plot
selectInput(inputId = "type", 
            label = strong("Trend index"),
            choices = unique(trend_data$type),
            selected = "Travel")
```

Displaying outputs is equally hassle-free:

``` r
mainPanel(
  plotOutput(outputId = "lineplot", 
             height = "300px"),
)
```

Build your plots or tables as you normally would in R, and make them reactive with a call to the appropriate render function:

``` r
output$lineplot <- renderPlot({
  plot(x = selected_trends()$date, 
       y = selected_trends()$close, 
       type = "l",
       xlab = "Date", 
       ylab = "Trend index")
})
```

</div>
:::

Shiny makes it very straightforward to create interactive documents using only R. Unlike using JavaScript though, you will need to [deploy](shiny/running#deployment) documents that use Shiny to a server.

To learn more see the articles on [Using Shiny with Quarto](shiny/).

## Widgets

[Jupyter Widgets](https://jupyter.org/widgets) and [htmlwidgets](https://www.htmlwidgets.org/) are great ways to incorporate interactivity into your documents if you don't know JavaScript and prefer to work exclusively in Python or R. They also run entirely client-side so can be deployed within normal static HTML documents.

For example, the following Python code is all that is required to embed a Leaflet map into a Jupyter engine document:

```{python}
from ipyleaflet import Map, Marker, basemaps, basemap_to_tiles
m = Map(
  basemap=basemap_to_tiles(
    basemaps.NASAGIBS.ModisTerraTrueColorCR, "2017-04-08"
  ),
  center=(52.204793, 360.121558),
  zoom=4
)
m.add_layer(Marker(location=(52.204793, 360.121558)))
m
```

These articles contain additional examples as well as links to widgets available for the respective environments:

-   [Jupyter Widgets](widgets/jupyter.qmd) (Jupyter engine).

-   [htmlwidgets](widgets/htmlwidgets.qmd) (Knitr engine).

## Layout

Once you've gotten familiar with using various interactive components see the article on [Component Layout](layout.qmd) to learn how to:

-   Group inputs into an [input panel](layout.qmd#input-panel).

-   Present multiple outputs in a [tabset panel](layout.qmd#tabset-panel).

-   Use a [full page layout](layout.qmd#full-page-layout) rather than the default article layout.

-   Add a [sidebar panel](layout.qmd#sidebar-panel) for inputs in a full page layout.

-   Create custom [panel layouts](layout.qmd#panel-layout) to arrange outputs into rows and columns.
