---
title: "Virtual Environments"
format: html
---

Virtual environments provide a project-specific version of installed packages. This both helps you to faithfully reproduce your environment (e.g. if you are collaborating with a colleague or deploying to a server) as well as isolate the use of packages so that upgrading a package in one project doesn't break other projects.

There are several popular flavors of virtual environment, we will cover the following ones here:

1.  [venv](https://packaging.python.org/guides/installing-using-pip-and-virtual-environments/#creating-a-virtual-environment) (built into Python 3)

2.  [conda](https://towardsdatascience.com/managing-project-specific-environments-with-conda-406365a539ab) (built in to Anaconda/Miniconda)

3.  [renv](https://rstudio.github.io/renv/articles/renv.html) (package for managing R environments)

Below we'll provide some example workflows for using these tools with Quarto. In these examples we'll assume that you are already within a project directory that contains Quarto documents (so the environment will be created as a sub-directory of the project).

We'll also cover using virtual environments with [JupyterLab](#jupyterlab), [RStudio](#rstudio), and [VS Code](#vs-code).

## Using venv {#using-venv .platform-table}

Here we'll provide a brief run through of creating a venv for a Quarto project. See the [full documentation](https://packaging.python.org/guides/installing-using-pip-and-virtual-environments/#creating-a-virtual-environment) on using virtual environments with Python for additional details.

To create a new Python 3 virtual environment in the directory `env`:

<table><thead><tr class="header"><th><p>Platform</p></th><th><p>Command</p></th></tr></thead><tbody><tr class="odd"><td><p>Windows</p></td><td><div class="sourceCode" id="cb1"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="ex">py</span> <span class="at">-m</span> venv env</span></code></pre></div></td></tr><tr class="even"><td><p>Mac/Linux</p></td><td><div class="sourceCode" id="cb2"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="ex">python3</span> <span class="at">-m</span> venv env</span></code></pre></div></td></tr></tbody></table>

To use the environment you need to activate it. This differs slightly depending on which platform / shell you are using:

<table><thead><tr class="header"><th><p>Shell</p></th><th><p>Command</p></th></tr></thead><tbody><tr class="odd"><td><p>Windows<br />
(Command)</p></td><td><div class="sourceCode" id="cb1"><pre class="sourceCode default"><code class="sourceCode default"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>env\Scripts\activate.bat</span></code></pre></div></td></tr><tr class="even"><td><p>Windows<br />
(PowerShell)</p></td><td><div class="sourceCode" id="cb2"><pre class="sourceCode default"><code class="sourceCode default"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>env\Scripts\Activate.ps1</span></code></pre></div></td></tr><tr class="odd"><td><p>Mac/Linux</p></td><td><div class="sourceCode" id="cb3"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="bu">source</span> env/bin/activate</span></code></pre></div></td></tr></tbody></table>

::: callout-note
#### PowerShell Note

Note that you may receive an error about running scripts being disabled when activating within PowerShell. If you get this error then execute the following command:

``` bash
Set-ExecutionPolicy -ExecutionPolicy Unrestricted -Scope CurrentUser
```
:::

Once you've activated the environment, you need to ensure that you have the packages required to render your documents. This will typically encompass `jupyter` / `jupyterlab` plus whatever other packages are used in your Python code. ip to install packages into your environment. For example:

<table><thead><tr class="header"><th><p>Platform</p></th><th><p>Command</p></th></tr></thead><tbody><tr class="odd"><td><p>Windows</p></td><td><div class="sourceCode" id="cb1"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="ex">py</span> <span class="at">-m</span> pip install matplotlib pandas</span></code></pre></div></td></tr><tr class="even"><td><p>Mac/Linux</p></td><td><div class="sourceCode" id="cb2"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="ex">python3</span> <span class="at">-m</span> pip install matplotlib pandas</span></code></pre></div></td></tr></tbody></table>

Assuming you installed all of the required packages (likely more than just `pandas` and `matplotlib`) you should now be able to `quarto render` documents within the directory.

To deactivate an environment use the `deactivate` command:

``` bash
deactivate
```

### Saving Environments {.platform-table}

To make your environment reproducible, you need to create a `requirements.txt` file that enumerates all of the packages in use. To do this use the `pip freeze` command:

<table><thead><tr class="header"><th><p>Platform</p></th><th><p>Command</p></th></tr></thead><tbody><tr class="odd"><td><p>Windows</p></td><td><div class="sourceCode" id="cb1"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="ex">py</span> <span class="at">-m</span> pip freeze <span class="op">&gt;</span> requirements.txt</span></code></pre></div></td></tr><tr class="even"><td><p>Mac/Linux</p></td><td><div class="sourceCode" id="cb2"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="ex">python3</span> <span class="at">-m</span> pip freeze <span class="op">&gt;</span> requirements.txt</span></code></pre></div></td></tr></tbody></table>

You should generally check the `requirements.txt` file into version control.

### Restoring Environments {.platform-table}

To reproduce the environment on another machine you create an empty environment, activate it, and then `pip install` using `requirements.txt`:

First, follow the [instructions above](#using-venv) for creating and activating a virtual environment for your platform/shell.

Then, install packages from `requirements.txt`:

<table><thead><tr class="header"><th><p>Platform</p></th><th><p>Command</p></th></tr></thead><tbody><tr class="odd"><td><p>Windows</p></td><td><div class="sourceCode" id="cb1"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="ex">py</span> <span class="at">-m</span> pip install <span class="at">-r</span> requirements.txt</span></code></pre></div></td></tr><tr class="even"><td><p>Mac/Linux</p></td><td><div class="sourceCode" id="cb2"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="ex">python3</span> <span class="at">-m</span> pip install <span class="at">-r</span> requirements.txt</span></code></pre></div></td></tr></tbody></table>

## Using conda {.platform-table}

This section will cover the basics of creating and using conda environments with Quarto projects. See this article on [managing project specific environments](https://towardsdatascience.com/managing-project-specific-environments-with-conda-406365a539ab) with Conda for additional details.

To create a new environment in the directory `env`:

``` bash
conda create --prefix env python
```

If this is the first time you've used conda in your shell, you may need to execute one of the following commands before using other conda tools:

<table><thead><tr class="header"><th><p>Shell</p></th><th><p>Command</p></th></tr></thead><tbody><tr class="odd"><td><p>Windows<br />
(Command)</p></td><td><div class="sourceCode" id="cb1"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="ex">conda</span> init cmd.exe</span></code></pre></div></td></tr><tr class="even"><td><p>Windows<br />
(PowerShell)</p></td><td><div class="sourceCode" id="cb2"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="ex">conda</span> init powershell</span></code></pre></div></td></tr><tr class="odd"><td><p>Linux / Older Mac<br />
(Bash)</p></td><td><div class="sourceCode" id="cb3"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="ex">conda</span> init bash</span></code></pre></div></td></tr><tr class="even"><td><p>Newer Mac<br />
(Zsh)</p></td><td><div class="sourceCode" id="cb4"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="ex">conda</span> init zsh</span></code></pre></div></td></tr></tbody></table>

You will likely need to exit and restart your terminal for `conda init` to be reflected in your session.

To use the environment you need to activate it, which you do as follows:

<table><thead><tr class="header"><th><p>Platform</p></th><th><p>Command</p></th></tr></thead><tbody><tr class="odd"><td><p>Windows</p></td><td><div class="sourceCode" id="cb1"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="ex">conda</span> activate .<span class="dt">\e</span>nv</span></code></pre></div></td></tr><tr class="even"><td><p>Mac/Linux</p></td><td><div class="sourceCode" id="cb2"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="ex">conda</span> activate ./env</span></code></pre></div></td></tr></tbody></table>

Once you've activated the environment, you need to ensure that you have the packages required to render your documents. This will typically encompass `jupyter` / `jupyterlab` plus whatever other packages are used in your Python code. Use `conda install` to install packages into your environment. For example:

``` bash
conda install jupyterlab
conda install pandas matplotlib 
```

Assuming you installed all of the required packages (likely more than just `pandas` and `matplotlib`) you should now be able to `quarto render` documents within the directory.

Use `conda deactivate` to exit an activated environment:

``` bash
conda deactivate
```

### Saving Environments

To make your environment reproducible, you need to create a `environment.yml` file that enumerates all of the packages in use. Do this using the `conda env export` command:

``` bash
conda env export > environment.yml
```

You should generally check the `environment.yml` file into version control.

### Restoring Environments

To reproduce the environment on another machine you just pass the `environment.yml` file as an argument to `conda create`:

``` bash
conda create --prefix env -f environment.yml
```

## Using renv

The [renv](https://rstudio.github.io/renv/articles/renv.html) package provides functionality similar to the venv and conda, but for R packages. To create a new renv environment, install the **renv** package from CRAN then call the `renv::init()` function:

``` r
install.pacakges("renv")
renv::init()
```

As part of initialization, your `.Rprofile` file is modified to ensure that the renv is activated automatically at the start of each R session.

If you plan on using **both** R and Python in your project, you can have renv automatically create and manage a Python virtual environment as follows:

``` r
renv::use_python()
```

To install R packages use the standard R `install.packages` function. You can also install GitHub packages using the `renv::install` function. For example:

``` r
install.packages("ggplot2")      # install from CRAN
renv::install("tidyverse/dplyr") # install from GitHub
```

To install Python packages just use `pip` as described above from the built-in RStudio terminal.

### Saving Environments

To record the current versions of all R (and optionally Python) packages, use the `renv::snapshot()` function:

``` r
renv::snapshot()
```

This will record an `renv.lock` file for R packages and a `requirements.txt` file for Python packages). These files should be checked into version control.

### Restoring Environments

To reproduce the environment on another machine use the `renv::restore()` function:

``` r
renv::restore()
```

## JupyterLab {#jupyterlab .platform-table}

To use Jupyter or JupyterLab within a Python virtual environment you just need to activate the environment and then launch the Jupyter front end. For example:

<table><thead><tr class="header"><th><p>Shell</p></th><th><p>Command</p></th></tr></thead><tbody><tr class="odd"><td><p>Windows<br />
(Command)</p></td><td><div class="sourceCode" id="cb1"><pre class="sourceCode default"><code class="sourceCode default"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>env\Scripts\activate.bat</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>py -m jupyter lab</span></code></pre></div></td></tr><tr class="even"><td><p>Windows (PowerShell)</p></td><td><div class="sourceCode" id="cb2"><pre class="sourceCode default"><code class="sourceCode default"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>env\Scripts\Activate.ps1</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>py -m jupyter lab</span></code></pre></div></td></tr><tr class="odd"><td><p>Mac/Linux</p></td><td><div class="sourceCode" id="cb3"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="bu">source</span> env/bin/activate</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="ex">python3</span> <span class="at">-m</span> jupyter lab</span></code></pre></div></td></tr></tbody></table>

All of the Python packages installed within the `env` will be available in your Jupyter notebook session. The workflow is similar if you are using conda environments.

## RStudio {#rstudio}

If you are using Quarto within RStudio it is strongly recommended that you use the [current release](https://www.rstudio.com/products/rstudio/download/) of RStudio from <https://www.rstudio.com/products/rstudio/download/> (the documentation below assumes you are using this build).

### renv

If you are using **renv**, RStudio will automatically do the right thing in terms of binding Quarto to the R and/or Python packages in your project-local environments.

If you need to install R packages ust use `install.packages`; if you need to install Python packages simply use pip or conda within the Terminal as described above.

### venv / condaenv

RStudio will automatically activate any venv or condaenv that it finds within a project directory. Just be sure to create an RStudio project within the same directory where you created your `env` and things will work as expected with no additional configuration.

If you need to install Python packages simply use pip or conda within the Terminal as described above.

## VS Code {#vs-code}

If you create a virtual environment in the `env/` directory as described above, Visual Studio Code should automatically discover that environment when you load a workspace from the environment's parent directory.

Note that this applies only to `venv` not Conda environments (which have a separate mechansim for binding to the current VS Code session).

You can read more about VS Code support for virtual environments here: <https://code.visualstudio.com/docs/python/environments>.
