---
title: "Tutorial: Hello, Quarto"
editor_options:
  markdown:
    wrap: sentence
    canonical: true
---

{{< include ../_tool-chooser.md >}}

## Overview

In this tutorial we'll show you how to use Quarto with Neovim.

If you already have Neovim configured to your liking, you may only want to add the [quarto-nvim](https://github.com/quarto-dev/quarto-nvim) and only refer to this guide for inspiration and seeing the possibilities.
But if you are entirely new to Neovim or want to simply try out a configuration already set up for data science with Quarto, you should head over to this [kickstarter configuration](https://github.com/jmbuhr/quarto-nvim-kickstarter).
This is also what we will be using for this tutorial.

::: callout-note
Neovim is a hightly customizable editor.
So much so that neovim core member TJ Devries has recently coined the term Personal Development Environment (PDE) to separate the concept from Integrated Developement Environemts (IDEs) such as VS Code and RStudio.
<!-- TODO: tj name and link -->

Out of the box neovim is fairly minimal.
To work efficiently and get all the nice features, you have to configure it.
You have to make it your own.
If this approach sounds enticing to you, read on.
Welcome to the rabbit hole.
:::

The Quarto Neovim plugin aims to not reinvent the wheel.
Existing plugins in the Neovim ecosystem are leveraged to provide the full experience.
Some of the features provided by `quarto-nvim` and enhanced by plugins found in the kickstarter configuration are:

-   Integrated preview for Quarto documents.
-   Syntax highlighting for markdown and embedded languages
-   Completion for embedded languages (e.g. Python, R, Julia, etc.)
-   Commands and key-bindings for running cells and selected lines.
-   Completion for bibliography references, file paths, LaTeX math symbols, emoji.
-   Optional spellchecking and completion.
-   Code snippets.
-   Export of code chunks into standalone scripts.

### Basic Workflow

Quarto `.qmd` files contain a combination of markdown and executable code cells.
Here's what it might look like in Neovim to edit and preview a `.qmd` file:

![](../images/neovim-overview.png){.border fig-alt="Three windows arranged side by side. The window on the left is a qmd file opened in Neovim. The upper window on the right is a web browser. The contents of the qmd document are rendered by Quarto in the browser window. The third window is a rendered graph showing the output of executing a code chunk in the qmd file."}

The document on the left is *rendered* into the HTML version you see on the right.
This is the basic model for Quarto publishing---take a source document and render it to a variety of [output formats](https://quarto.org/docs/output-formats/all-formats.html), including HTML, PDF, MS Word, etc.

The tutorials will make use of the `matplotlib` and `plotly` Python packages---the commands you can use to install them are given in the table below.

+-----------+--------------------------------------------------------------+
| Platform  | Commands                                                     |
+===========+==============================================================+
| Mac/Linux |     python3 -m pip install jupyter matplotlib plotly         |
+-----------+--------------------------------------------------------------+
| Windows   |     py -m pip install jupyter matplotlib plotly              |
+-----------+--------------------------------------------------------------+

::: callout-note
<!-- TODO: link knitr -->
Note that while this tutorial uses Python, using Julia (via the [IJulia](https://julialang.github.io/IJulia.jl/stable/) kernel) or using R (via the [knitr package]()), are also well supported.
See the articles on [Using Julia](/docs/computations/julia.qmd) and [Using R](/docs/computations/r.qmd) for additional details.
:::


## Render and Preview

We'll start out by rendering a simple example (`hello.qmd`) to a couple of formats.
If you want to follow along step-by-step in your own environment, create a new file named `hello.qmd` and copy the following content into it.

```` markdown
---
title: "Quarto Basics"
format:
  html:
    code-fold: true
jupyter: python3
---

For a demonstration of a line plot on a polar axis, see @fig-polar.

```{{python}}
#| label: fig-polar
#| fig-cap: "A line plot on a polar axis"

import numpy as np
import matplotlib.pyplot as plt

r = np.arange(0, 2, 0.01)
theta = 2 * np.pi * r
fig, ax = plt.subplots(
  subplot_kw = {'projection': 'polar'} 
)
ax.plot(theta, r);
ax.set_rticks([0.5, 1, 1.5, 2]);
ax.grid(True);
plt.show()
```
````

To render and preview, execute the **QuartoPreview** by pressing `:` to enter command mode and typing the command (there is autocompletion if you press the `tab` key).

### How it Works

### Authoring

### Running Cells

## YAML Options

## Markdown

## Code Cells

## External Preview

{{< include _footer.md >}}

