---
title: "Tutorial: Hello, Quarto"
editor_options:
  markdown:
    wrap: sentence
    canonical: true
---

``` include
../_tool-chooser.md
```

## Overview

In this tutorial we'll show you how to use Jupyter Lab with Quarto.
You'll edit code and markdown in Juptyer Lab just as you would with any notebook and preview the rendered document in a web browser as you work.

Here's how this will look:

![](images/jupyter-quarto-preview.png){fig-alt="On the left: A Jupyter notebook titled Quarto Basics containing some text, a code cell, and the result of the code cell, which is a line plot on a polar axis. On the right: Rendered version of the same notebook."}

The notebook on the left is *rendered* into the HTML version you see on the right.
This is the basic model for Quarto publishing---take a source document (in this case a notebook) and render it to a variety of output formats, including HTML, PDF, MS Word, etc.

## Rendering

We'll start out by opening a notebook (`polar-axis.ipynb`) in Jupyter Lab and rendering it to a couple of formats.
If you want to follow along step-by-step in your own environment, download the notebook below.

::: {.callout-note appearance="minimal"}
<i class="bi bi-journal-code"></i> [Download polar-axis.ipynb](_polar-axis.ipynb){download="polar-axis.ipynb"}
:::

Then, create a new directory to work within and copy the notebook into this directory.

Once you've done that, switch to this directory in a terminal, install notebook dependencies (if necessary), and open Jupyter Lab to get started working with the notebook.
The commands you can use for installation and opening Jupyter Lab are given in the table below.

+-------------+------------------------------------------------------+
| Platform    | Commands                                             |
+=============+======================================================+
| Mac/Linux   |     python3 -m pip install matplotlib plotly_express |
|             |     python3 -m jupyter lab polar-axis.ipynb          |
+-------------+------------------------------------------------------+
| Windows     |     py -m pip install matplotlib plotly_express      |
|             |     py -m jupyter lab polar-axis.ipynb               |
+-------------+------------------------------------------------------+

![](images/jupyter-basics.png){fig-alt="A Jupyter notebook titled Quarto Basics containing some text, a code cell, and the result of the code cell, which is a line plot on a polar axis."}

Next, create a new Terminal within Jupyter Lab to use for Quarto commands:

![](images/jupyter-terminal.png){.border fig-alt="Screenshot of menu items in Jupuyter Lab: File > New > Terminal."}

And finally, render the notebook to a couple of formats:

``` bash
quarto render polar-axis.ipynb --to html
quarto render polar-axis.ipynb --to docx
```

## Authoring

The `quarto render` command is used to create the final version of your document for distribution.
However, during authoring you'll use the `quarto preview` command.
Try it now from the Terminal with `polar-axis.ipynb`:

``` bash
quarto preview polar-axis.ipynb
```

This will render your document and then display it in a web browser:

![](images/quarto-preview.png){.border fig-alt="Rendered version of the earlier notebook in a web browser." width="500"}

You might want to position Jupyter Lab and the browser preview side-by-side so you can see changes as you work:

![](images/jupyter-quarto-preview.png){fig-alt="Side-by-side preview of notebook on the left and live preview in the browser on the right."}

To see the live preview in action, change some of the code, run the changed cell, then save the notebook.
You'll see that the preview updates immediately.
This is the basic workflow for authoring with Quarto.

There are few different types of cells in our notebook, let's work a bit with each type.

## YAML Options

You are likely already familiar with markdown and code cells, but there is a new type of cell ("Raw") that is used for document-level YAML options:

![](images/jupyter-yaml.png){.border fig-alt="YAML of the notebook with the fields title, format, and jupyter. Title is set to Quarto Basics with title: \"Quarto Basics\". Format is defined as html in the next line, and within the html format, code-fold is set to true. Jupyter is set to python3 with jupyter: python3."}

Try changing the `code-fold` option to `false`:

``` yaml
format: 
  html:
    code-fold: false
```

Then save the notebook.
You'll notice that the code is now shown above the plot, where previously it was hidden with a "Code" button that could be used to show it.

## Markdown Cells

Markdown cells contain raw markdown that will be passed through to Quarto during rendering.
You can use any valid Quarto markdown syntax in these cells.
Here we specify a header and a cross-reference to the figure created in the code cell below:

![](images/jupyter-markdown.png){.border fig-alt="A Markdown cell with the title Polar Axis as a second level header and text that reads 'For a demonstration of a line plot on a polar axis, see @fig-polar.'"}

Try changing the header and saving the notebook---the preview will update with the new header text.

## Code Cells

You are likely already familiar with code cells, like the one shown below:

![](images/jupyter-cell.png){.border fig-alt="A code cell with cell options for label and fig-cap and the code required to create the line plot on a polar axis."}

But there are some new components at the top of the code cell: `label` and `fig-cap`options.
Cell options are written in YAML using a specially prefixed comment (`#|`).

In this example, the cell options are used to make the figure cross-reference-able.
Try changing the `fig-cap` and/or the code, running the cell, and then saving the notebook to see the updated preview.

There are a wide variety of cell options that you can apply to tailor your output.
We'll delve into these options in the next tutorial.

``` include
_footer.md
```
