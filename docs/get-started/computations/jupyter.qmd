---
title: "Tutorial: Computations"
editor_options:
  markdown:
    wrap: sentence
    canonical: true
---

``` include
../_tool-chooser.md
```

## Overview

Quarto has a wide variety of options available for controlling how code and computational output appear within rendered documents.
In this tutorial we'll take a simple notebook that has some numeric output and plots and cover how to apply these options.

If you want to follow along step-by-step in your own environment, download the notebook below:

::: {.callout-note appearance="minimal"}
<i class="bi bi-journal-code"></i> [Download computations.ipynb](_computations.ipynb){download="computations.ipynb"}
:::

Then, create a new directory to work within and copy the notebook into this directory.

Once you've done that, switch to this directory in a Terminal, install notebook dependencies (if necessary), and open Jupyter Lab to get started working with the notebook.
The commands you can use for installation and opening Jupyter Lab are given in the table below.

+-------------+------------------------------------------------------+
| Platform    | Commands                                             |
+=============+======================================================+
| Mac/Linux   |     python3 -m pip install matplotlib plotly_express |
|             |     python3 -m jupyter lab computations.ipynb        |
+-------------+------------------------------------------------------+
| Windows     |     py -m pip install matplotlib plotly_express      |
|             |     py -m jupyter lab  computations.ipynb            |
+-------------+------------------------------------------------------+

The notebook as we start out is shown below.
Note that none of the cells are executed yet.

![](images/jupyter-computations.png){.border}

Next, create a new Terminal within Jupyter Lab to use for Quarto commands:

![](../hello/images/jupyter-terminal.png){.border}

Finally, run `quarto preview` in the Terminal and position Jupyter Lab side-by-side with the browser showing the preview:

``` bash
quarto preview computations.ipynb
```

![](images/jupyter-computations-preview.png){.border}

Go ahead and run all of the cells and then save the notebook.
You'll see that the preview updates immediately.

## Cell Output

All of the code in the notebook is displayed within the rendered document.
However, for some documents, you may want to hide all of the code and just show the output.
Let's go ahead and specify `echo: false` within the document `execute` options to prevent code from being printed:

![](images/jupyter-execute-echo-false.png){.border}

Save the notebook after making this change.
The preview will update to show the output with no code:

![](images/exec-echo-false-preview.png){.border}

You might want to selectively enable code `echo` for some cells.
To do this add the `echo: true` cell option.
Try this with the NumPy cell:

![](images/jupyter-exec-echo-true.png){.border}

Save the notebook and note that the code is now included for the NumPy cell:

![](images/exec-echo-true-preview.png){.border}

There a large number of other options available for cell output, for example `warning` to show/hide warnings (which can be especially helpful for package loading messages), `include` as a catch all for preventing any output (code or results) from being included in output, and `error` to prevent errors in code execution from halting the rendering of the document (and print the error in the rendered document).

See the [Jupyter Cell Options](https://quarto.org/docs/reference/cells/cells-jupyter.html) documentation for additional details.

## Code Folding

Rather than hiding code entirely, you might want to fold it and allow readers to view it at their discretion.
You can do this via the `code-fold` option.
Remove the `echo` option we previously added and add the `code-fold` HTML format option:

![](images/jupyter-code-fold.png){.border}

Save the notebook.
Now a "Code" widget is available above the output of each cell:

![](images/code-fold-preview.png){.border}

You can also provide global control over code folding.
Try adding `code-tools: true` to the HTML format options:

![](images/jupyter-code-tools.png){.border}

Save the notebook and you'll see that a code menu appears at the top right of the document that provides global control over showing and hiding code.

![](images/code-tools-preview.png){.border}

## Figures

Let's improve the appearance of our Matplotlib output.
It could certainly stand to be wider, and it would be nice to provide a caption and a label for cross-referencing.

Go ahead and modify the Matplotlib cell to include `label` and `fig-cap` options as well as a call to `fig.set_size_inches()` to set a larger figure size with a wider aspect ratio:

![](images/jupyter-figure-options.png){.border}

Execute the cell to see the updated plot.
Then, save the notebook so that the Quarto preview is updated:

![](images/figure-options-preview.png){.border}

## Multiple Figures

The Plotly cell visualizes GDP and life expectancy data from a single year (2007).
Let's plot another year next to it for comparison and add a caption and subcaptions.
Since this will produce a wider visualization we'll also use the `column` option to lay it out across the entire page rather than being constrained to the body text column.

There are quite a few changes to this cell.
Copy and paste the code below into the notebook if you want to try them locally:

``` python
#| label: fig-gapminder
#| fig-cap: Life Expectancy and GDP
#| fig-subcap:
#|   - "Gapminder: 1957"
#|   - "Gapminder: 2007"
#| layout-ncol: 2
#| column: page

import plotly.express as px
import plotly.io as pio
pio.renderers.default = "notebook"
gapminder = px.data.gapminder()
def gapminder_plot(year):
    gapminderYear = gapminder.query("year == " + 
                                    str(year))
    fig = px.scatter(gapminderYear, 
                     x="gdpPercap", y="lifeExp",
                     size="pop", size_max=60,
                     hover_name="country")
    fig.show()
    
gapminder_plot(1957)
gapminder_plot(2007)
```

Run the modified cell then save the notebook.
The preview will update as follows:

![](images/plotly-preview.png){.border}

Let's discuss some of the new options used here.
You've seen `fig-cap` before but we've now added a `fig-subcap` option:

``` python
#| fig-cap: Life Expectancy and GDP 
#| fig-subcap:
#|   - "Gapminder: 1957"
#|   - "Gapminder: 2007"
```

For code cells with multiple outputs adding the `fig-subcap` option enables us to treat them as subfigures.

We also added an option to control how multiple figures are laid out---in this case we specified side-by-side in two columns:

``` python
#| layout-ncol: 2
```

If you have 3, 4, or more figures in a panel there are many options available for customizing their layout.
See the article [Figure Layout](/docs/authoring/figure-layout.qmd) for details.

Finally, we added an option to control the span of the page that our figures occupy:

``` python
#| column: page
```

This allows our figure display to span out beyond the normal body text column.
See the documentation on [Article Layout](/docs/authoring/article-layout.qmd) to learn about all of the available layout options.

``` include
_footer.md
```
