---
title: "HTML Basics"
description: "Quarto supports a wide variety of options that allow you to produce rich HTML technical documents."
format: html
comments:
  hypothesis: true
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning=FALSE)
```

## Overview

Use the `html` format to create HTML output. For example:

``` {.yaml}
---
title: "My document"
format:
  html:
    toc: true
    html-math-method: katex
    css: styles.css
---
```

This example highlights a few of the options available for HTML output. This document covers these and other options in detail.

## Table of Contents

Use the `toc` option to include an automatically generated table of contents in the output document. Use the `toc-depth` option to specify the number of section levels to include in the table of contents. The default is 3 (which means that level-1, 2, and 3 headings will be listed in the contents). For example:

``` {.markdown}
toc: true
toc-depth: 2
```

Note that HTML documents implement support for floating the table of contents to the right of the page. See the [Floating TOC](../output-formats/html-bootstrap.md#floating-toc) documentation for additional details.

You can customize the title used for the table of contents using the `toc-title` option:

``` {.yaml}
toc-title: Contents
```

If you want to exclude a heading from the table of contents, add both the `.unnumbered` and `.unlisted` classes to it:

``` {.markdown}
### More Options {.unnumbered .unlisted}
```

The HTML format by default uses a floating table of contents. You can revert to a standard table of contents that appears at the top using the following:

```{.yaml}
format:
  html:
    toc: true
    toc-float: false
```

The floating table of contents can be used to navigate to sections of the document and also will automatically highlight the appropriate section as the user scrolls. The table of contents is responsive and will become hidden once the viewport becomes too narrow. See an example on the right of this page.

```{.include}
_document-options-section-numbering.md
```


## CSS Styles

To add a CSS stylesheet to your document, just provide the `css` option. For example:

``` {.yaml}
format:
  html: 
    css: styles.css
```

Using the `css` option works well for simple tweaks to document appearance. If you want to do more extensive customization see the documentation on [HTML Themes](html-themes.md).

## LaTeX Equations

By default, LaTeX equations are rendered using [MathJax](https://www.mathjax.org/). Use the `html-math-method` option to choose another method. For example:

``` {.yaml}
format:
  html:
    html-math-method: katex
```

You can also specify a `url` for the library to load for a given method:

``` {.yaml}
html-math-method:
  method: mathjax
  url: "https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"
```

Available math rendering methods include:

+-----------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Method    | Description                                                                                                                                                                                                                      |
+===========+==================================================================================================================================================================================================================================+
| `mathjax` | Use [MathJax](https://www.mathjax.org/) to display embedded TeX math in HTML output.                                                                                                                                             |
+-----------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `katex`   | Use [KaTeX](https://github.com/Khan/KaTeX) to display embedded TeX math in HTML output.                                                                                                                                          |
+-----------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `webtex`  | Convert TeX formulas to `<img>` tags that link to an external script that converts formulas to images.                                                                                                                           |
+-----------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `gladtex` | Enclose TeX math in `<eq>` tags in HTML output. The resulting HTML can then be processed by [GladTeX](https://humenda.github.io/GladTeX/) to produce images of the typeset formulas and an HTML file with links to these images. |
+-----------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `mathml`  | Convert TeX math to [MathML](https://www.w3.org/Math/) (note that currently only Firefox and Safari natively support MathML)                                                                                                     |
+-----------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `plain`   | No special processing (formulas are put inside a `span` with `class="math").`                                                                                                                                                    |
+-----------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

Note that this is more detailed documentation on each of these options in the Pandoc [Math Rendering in HTML](https://pandoc.org/MANUAL.html#math-rendering-in-html) documentation.

## Tabsets

You can use tabsets to present content that will vary in interest depending on the audience. For example, here we provide some example code in a variety of languages:

::: {.panel-tabset}
## R

``` {.r}
fizz_buzz <- function(fbnums = 1:50) {
  output <- dplyr::case_when(
    fbnums %% 15 == 0 ~ "FizzBuzz",
    fbnums %% 3 == 0 ~ "Fizz",
    fbnums %% 5 == 0 ~ "Buzz",
    TRUE ~ as.character(fbnums)
  )
  print(output)
}
```

## Python

``` {.python}
def fizz_buzz(num):
  if num % 15 == 0:
    print("FizzBuzz")
  elif num % 5 == 0:
    print("Buzz")
  elif num % 3 == 0:
    print("Fizz")
  else:
    print(num)
```

## Java

``` {.java}
public class FizzBuzz
{
  public static void fizzBuzz(int num)
  {
    if (num % 15 == 0) {
      System.out.println("FizzBuzz");
    } else if (num % 5 == 0) {
      System.out.println("Buzz");
    } else if (num % 3 == 0) {
      System.out.println("Fizz");
    } else {
      System.out.println(num);
    }
  }
}
```

## Julia

``` {.julia}
function FizzBuzz(num)
  if num % 15 == 0
    println("FizzBuzz")
  elseif num % 5 == 0
    println("Buzz")
  elseif num % 3 == 0
    println("Fizz")
  else
    println(num)
  end
end
```
:::

Create a tabset via a markdown div with the class name panel-tabset (e.g. `::: {.panel-tabset}`). Each top-level heading within the div creates a new tab. For example, here is the markdown used to implement the first two tabs displayed above:

```` {.markdown}
::: {.panel-tabset}
## R

``` {.r}
fizz_buzz <- function(fbnums = 1:50) {
  output <- dplyr::case_when(
    fbnums %% 15 == 0 ~ "FizzBuzz",
    fbnums %% 3 == 0 ~ "Fizz",
    fbnums %% 5 == 0 ~ "Buzz",
    TRUE ~ as.character(fbnums)
  )
  print(output)
}
```

## Python

``` {.python}
def fizz_buzz(num):
  if num % 15 == 0:
    print("FizzBuzz")
  elif num % 5 == 0:
    print("Buzz")
  elif num % 3 == 0:
    print("Fizz")
  else:
    print(num)
```

:::
````

## Self Contained

HTML documents typically have a number of external dependencies (e.g. images, CSS style sheets, JavaScript, etc.). By default these dependencies are placed in a `_files` directory alongside your document. For example, if you render `report.md` to HTML:

``` {.bash}
quarto render report.md --to html
```

Then the following output is produced:

``` {.ini}
report.html
report_files/
```

You might alternatively want to create an entirely self-contained HTML document (with images, css, etc. embedded into the HTML file). You can do this by specifying the `self-contained` option:

``` {.yaml}
format:
  html:
    self-contained: true
```

This will produce a standalone HTML file with no external dependencies, using `data:` URIs to incorporate the contents of linked scripts, style sheets, images, and videos. The resulting file should be "self-contained," in the sense that it needs no external files and no net access to be displayed properly by a browser.

## Anchor Sections

Hover over a section title to see an anchor link. Enable/disable this behavior with:

``` {.yaml}
format:
  html:
    anchor-sections: true
```

Anchor links are also automatically added to figures and tables that have a [cross reference](../authoring/cross-references.md) defined.

## Reference Popups

Hover over @xie2015 to see a reference to the definitive book on knitr[^1].

[^1]: knitr is an R package for creating dynamic documents.

Control this behavior with the following options:

``` {.yaml}
format:
  html:
    hover-citations: true
    hover-footnotes: true
```



## Commenting

This page has commenting with [Hypothes.is](https://web.hypothes.is/) enabled via the following YAML option:

``` {.yaml}
comments:
  hypothesis: true
```

You can see the Hypothesis UI at the far right of the page. Rather than `true`, you can specify any of the available Hypothesis [embedding options](https://h.readthedocs.io/projects/client/en/latest/publishers/config/) as a sub-key of `hypothesis`. For example:

``` {.yaml}
comments:
  hypothesis: 
    theme: clean
```

You can enable [Utterances](https://utteranc.es/) commenting using the `utterances` option. Here you need to specify at least the Git repo you want to use for storing comments:

``` {.yaml}
comments:
  utterances:
    repo: quarto-dev/quarto-docs
```

You can also specify the other options [documented here](https://utteranc.es/).

``` {.include}
_document-options-end.md
```




## References {.unlisted}

