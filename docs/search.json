[
  {
    "href": "html-bootstrap.html#floating-toc",
    "title": "HTML w/ Bootstrap",
    "section": "Floating TOC",
    "text": "The HTML format by default uses a floating table of contents which can be customized using the following:\nformat:\n  html:\n    toc: true\n    toc-float: true\n    toc-title: Contents\nThe floating table of contents can be used to navigate to sections of the document and also will automatically highlight the appropriate section as the user scrolls. The table of contents is responsive and will become hidden once the viewport becomes too narrow. See an example on the right of this page."
  },
  {
    "href": "html-bootstrap.html#tabsets",
    "title": "HTML w/ Bootstrap",
    "section": "Tabsets",
    "text": "Example\nTabsets as such:\nRPythonJavaJulia\n\n\nfizz_buzz <- function(num_array=seq_len(100L)) {\n  result_array <- Map(function(r,n){cat(paste0(ifelse(r=='',n,r),'\\n'))},\n                      r=paste0(ifelse(num_array%%3L,'','Fizz'),\n                                 ifelse(num_array%%5L,'','Buzz')),\n                      n=num_array)\n}\n\n\ndef fizz_buzz(num):\n  if num % 15 == 0:\n    print(\"FizzBuzz\")\n  elif num % 5 == 0:\n    print(\"Buzz\")\n  elif num % 3 == 0:\n    print(\"Fizz\")\n  else:\n    print(num)\n\n\npublic class FizzBuzz\n{\n  public static void fizzBuzz(int num)\n  {\n    if (num % 15 == 0) {\n      System.out.println(\"FizzBuzz\");\n    } else if (num % 5 == 0) {\n      System.out.println(\"Buzz\");\n    } else if (num % 3 == 0) {\n      System.out.println(\"Fizz\");\n    } else {\n      System.out.println(num);\n    }\n  }\n}\n\n\nfunction FizzBuzz(num)\n  if num % 15 == 0\n    println(\"FizzBuzz\")\n  elseif num % 5 == 0\n    println(\"Buzz\")\n  elseif num % 3 == 0\n    println(\"Fizz\")\n  else\n    println(num)\n  end\nend\n\n\n\n\nMarkdown\nThe example is implemented using markdown like:\n::: {.tabset}\n## R\n\n``` {.r}\nfizz_buzz <- function(num_array=seq_len(100L)) {\n  result_array <- Map(function(r,n){cat(paste0(ifelse(r=='',n,r),'\\n'))},\n                      r=paste0(ifelse(num_array%%3L,'','Fizz'),\n                                 ifelse(num_array%%5L,'','Buzz')),\n                      n=num_array)\n}\n```\n\n## Python\n\n``` {.python}\ndef fizz_buzz(num):\n  if num % 15 == 0:\n    print(\"FizzBuzz\")\n  elif num % 5 == 0:\n    print(\"Buzz\")\n  elif num % 3 == 0:\n    print(\"Fizz\")\n  else:\n    print(num)\n```\n\n:::"
  },
  {
    "href": "html-bootstrap.html#code-blocks",
    "title": "HTML w/ Bootstrap",
    "section": "Code Blocks",
    "text": "By default code blocks are rendered with a left border whose color is derived from the currently theme. You can customize code chunk appearance with some simple options that control the background color and left border. Options can either be booleans to enable or disable the treatment or can be legal CSS color strings (or they could even be SASS variable names!).\n\nAppearance\nHere is the default appearance for code blocks (note the border at left and no background highlighting):\n\nYou can add a background using the code-background option:\ncode-background: true\n\nYou can combine a background and border treatment as well as customize the left border color:\ncode-background: true\ncode-border-left: \"#31BAE9\"\n\n\n\nHighlighting\nYou can specify the code highlighting style using highlight-style and specifying one of the supported themes. Supported themes include all the themes included in Pandoc (pygments, tango, espresso, zenburn, kate, monochrome, breezedark, haddock) as well as an additional set of extended themes here:\nhttps://github.com/quarto-dev/quarto-cli/tree/main/src/resources/pandoc/highlight-styles\nFor example:\nhighlight-style: github\nHighlighting themes can provide either a single highlighting definition or two definitions, one optimized for a light colored background and another optimized for a dark color background. When available, Quarto will automatically select the appropriate style based upon the code chunk background color’s darkness. Users may always opt to specify the full name (e.g. atom-one-dark) to by pass this automatic behavior.\nBy default, code is highlighted using the arrow theme. We’ve additionally introduced the arrow-dark theme which is designed to provide beautiful, accessible highlighting against dark backgrounds.\nExamples of the light and dark themes:\n\nArrow (light)\n\n\n\nArrow (dark)\n\n\n\nAyu (light)\n\n\n\nAyu (dark)"
  },
  {
    "href": "html-bootstrap.html#responsive-figures",
    "title": "HTML w/ Bootstrap",
    "section": "Responsive Figures",
    "text": "If an image does not include an explicitly set height, it will automatically become responsive. Try resizing the browser and note how the image below grows and shrinks.\n\n\n\n\n\nUnder Pressure"
  },
  {
    "href": "more-formats.html",
    "title": "More Formats",
    "section": "",
    "text": ""
  },
  {
    "href": "pdfs-and-latex.html#installing-tex",
    "title": "PDFs and LaTeX",
    "section": "Installing TeX",
    "text": "To install TinyTeX, use the following command:\n$ quarto install tinytex\nIf you prefer TeX Live, you can find instructions for installing it here: https://tug.org/texlive/.\nNote that Quarto’s automatic installation of missing TeX packages will work for TinyTeX and TeX Live, but not for other TeX distributions (as it relies on TeX Live’s tlmgr command)."
  },
  {
    "href": "pdfs-and-latex.html#latex-packages",
    "title": "PDFs and LaTeX",
    "section": "LaTeX Packages",
    "text": "When creating a PDF document, Pandoc allows the use of raw LaTeX directives intermixed with markdown. In some cases this LaTeX will require additional LaTeX packages. To add these packages to your document, use the header-includes YAML option. For example:\ntitle: \"My Document\"\nformat:\n  pdf:\n    header-includes: |\n      \\usepackage{fontawesome}\n      \\usepackage{sansmath}\nNote the use of the | character on the line with header-includes to indicate that the value is a multi-line string.\nIf you don’t already have these packages installed locally, then Quarto will automatically install them during rendering of the document."
  },
  {
    "href": "pdfs-and-latex.html#quarto-pdf-engine",
    "title": "PDFs and LaTeX",
    "section": "Quarto PDF Engine",
    "text": "Quarto’s built-in PDF compilation engine handles running LaTeX multiple times to resolve index and bibliography entries, and also performs automatic LaTeX package installation. This section describes customizing the built-in engine (see the Alternate PDF Engines section below for docs on using other engines).\n\nPDF Compilation\nThe following options are available for customizing PDF compilation:\n\n\n\n\n\n\n\nOption\nDescription\n\n\n\n\nlatex-min-runs\nNumber (minimum number of compilation passes)\n\n\nlatex-max-runs\nNumber (maximum number of compilation passes)\n\n\nlatex-clean\nBoolean (clean intermediates after compilation, defaults to true)\n\n\nlatex-output-dir\nString (output directory for intermediates and PDF)\n\n\nlatex-makeindex\nString (program to use for makeindex)\n\n\nlatex-makeindex-opts\nArray (options for makeindexprogram)\n\n\n\n\n\nPackage Installation\nThe following options are available for customizing automatic package installation:\n\n\n\n\n\n\n\nOption\nDescription\n\n\n\n\nlatex-auto-install\nBoolean (enable/disable automatic package installation)\n\n\nlatex-tlmgr-opts\nArray (options for tlmgr)"
  },
  {
    "href": "pdfs-and-latex.html#alternate-pdf-engines",
    "title": "PDFs and LaTeX",
    "section": "Alternate PDF Engines",
    "text": "To disable Quarto’s built in PDF engine, set the latex-auto-mk option to false:\ntitle: \"My Document\"\nlatex-auto-mk: false\nThe above configuration will result in Pandoc’s default behavior for PDF compilation (pdf-engine: pdflatex ). You can then use the pdf-engine and pdf-engine-opts to further customize Pandoc compilation. For example:\ntitle: \"My Document\"\nlatex-auto-mk: false\npdf-engine: xelatex\npdf-engine-opt: -outdir=out"
  },
  {
    "href": "html-themes.html#overview",
    "title": "Theming System",
    "section": "Overview",
    "text": "HTML documents rendered with Quarto use Bootstrap 5 by default. This can be disabled or customized via the theme option:\ntheme: default # bootstrap 5 default\ntheme: cosmo   # cosmo bootswatch theme\ntheme: pandoc  # pandoc default html treatment\ntheme: none    # no css added to document\nNote that all of the features described in HTML Basics (e.g. code folding, citation hover, commenting, etc.) are still available with theme: pandoc or theme: none. However the features described in HTML Bootstrap (e.g. floating toc, callouts, tabs) are only available for documents with Bootstrap.\nQuarto includes 25 themes from the Bootswatch project (for example, the website uses the cosmo theme). Below we describe how to use SASS to create your own themes."
  },
  {
    "href": "html-themes.html#basic-options",
    "title": "Theming System",
    "section": "Basic Options",
    "text": "Pandoc supports a set of basic metadata options for customizing document appearance without directly using CSS. These options are available for both the pandoc theme as well as for all Bootstrap themes.\nIf you are using a Bootstrap theme or the Pandoc theme, there are a set of options you can provide in document metadata to customize it’s appearance. These include:\n\n\n\n\n\n\n\nOption\nDescription\n\n\n\n\nmax-width\nThe maximum width occupied by page content. Defaults to 1400px for bootstrap themes and 36em for the pandoc theme.\n\n\nmainfont\nSets the font-family property for the document.\n\n\nfontsize\nSets the base CSS font-size for the document.\n\n\nfontcolor\nSets the default text color for the document.\n\n\nlinkcolor\nSets the default text color for hyperlinks.\n\n\nmonofont\nSets the font-family property for <code> elements.\n\n\nmonobackgroundcolor\nSets the background-color property for <code> elements.\n\n\nlinestretch\nSets the CSS line-height property (affects distance between lines of text, defaults to 1.5).\n\n\nbackgroundcolor\nSets the background-color for the document.\n\n\nmargin-left, margin-right, margin-top, margin-bottom\nSets the CSS margin properties for the document body.\n\n\n\nFor example. here we set the font-size a bit larger and specify that we want a bit more space between lines of text:\ntitle: \"My Document\"\nformat:\n  html: \n    theme: cosmo\n    font-size: 1.1em\n    linestretch: 1.7"
  },
  {
    "href": "html-themes.html#theme-options",
    "title": "Theming System",
    "section": "Theme Options",
    "text": "While the basic customization described above handles many common requirements, you can do extensive additional customization using SASS theme files. Bootstrap defines over 1,400 variables that control fonts, colors, padding, borders, and much more. You can see all of the variables here:\nhttps://github.com/twbs/bootstrap-sass/blob/master/assets/stylesheets/bootstrap/_variables.scss\nSASS theme files can define both variables that globally set things like colors and fonts, as well as rules that define more fine grained behavior. To customize an existing Bootstrap theme with your own set of variables and/or rules, just provide the base theme and then your custom theme file(s):\ntheme:\n  - cosmo\n  - custom.scss\nYour custom.scss file might look something like this:\n/*-- scss:defaults --*/\n$h2-font-size:          1.6rem !default;\n$headings-font-weight:  500 !default;\n$body-color:            $gray-700 !default;\n\n/*-- scss:rules --*/\nh1, h2, h3, h4, h5, h6 {\n  text-shadow: -1px -1px 0 rgba(0, 0, 0, .3);\n}\nNote that the variables section is denoted by the /*-- scss:defaults --*/ comment and the rules section (where normal CSS rules go) is denoted by the /*-- scss:rules --*/ comment."
  },
  {
    "href": "html-themes.html#custom-themes",
    "title": "Theming System",
    "section": "Custom Themes",
    "text": "You can naturally also create an entirely custom theme and provide only that (in this case you will inherit from the default Bootstrap theme):\ntheme: custom.scss\nFor example, here are the theme files for the 25 built-in Bootswatch themes:\nhttps://github.com/quarto-dev/quarto-cli/tree/main/src/resources/formats/html/bootstrap/themes\nYou can read more about the custom theming design here:\nhttps://github.com/quarto-dev/quarto-cli/blob/main/design/quarto-themes.md"
  },
  {
    "href": "callouts.html#callout-types",
    "title": "Callout Blocks",
    "section": "Callout Types",
    "text": "There are five types of callouts available:\n\nnote\ntip\nimportant\ncaution\nwarning\n\nHere is what the various types look like in HTML output:\n\n\n\n\n\n\nNote that there are five types of callouts, including: note, tip, warning, caution, and important.\n\n\n\n\n\n\n\n\n\nTip With Caption\n\n\n\nThis is an example of a callout with a caption.\n\n\n\n\n\n\n\n\nThis is Important\n\n\n\nDanger, callouts will really improve your writing.\n\n\n\n\n\n\n\n\nCallouts provide a simple way to attract attention, for example, to this warning.\n\n\n\n\n\n\n\n\n\nExpand To Learn About Collapse\n\n\n\n\n\nThis is an example of a ‘collapsed’ caution callout that can be expanded by the user. You can use collapse=\"true\" to collapse it by default or collapse=\"false\" to make a collapsible callout that is expanded by default."
  },
  {
    "href": "callouts.html#markdown-syntax",
    "title": "Callout Blocks",
    "section": "Markdown Syntax",
    "text": "Create callouts in markdown using the following syntax (note that the first markdown heading used within the callout is used as the callout heading):\n:::{.callout-note}\nNote that there are five types of callouts, including:\n`note`, `tip`, `warning`, `caution`, and `important`.\n:::\n\n:::{.callout-tip}\n## Tip With Caption\n\nThis is an example of a callout with a caption.\n:::\n\n:::{.callout-caution  collapse=\"true\"}\n## Expand To Learn About Collapse\n\nThis is an example of a 'folded' caution callout that can be expanded by the user. You can use `collapse=\"true\"` to collapse it by default or `collapse=\"false\"` to make a collapsible callout that is expanded by default.\n:::"
  },
  {
    "href": "callouts.html#format-support",
    "title": "Callout Blocks",
    "section": "Format Support",
    "text": "The following formats render callouts as illustrated above:\n\nHTML\nMS Word\nEPUB\n\nIn PDF output the awesomebox LaTeX package is used for callouts.\nIn other formats, callouts are placed in a simple blockquote."
  },
  {
    "href": "rendering-rmds.html#overview",
    "title": "Rendering Rmds",
    "section": "Overview",
    "text": "For R users, Quarto is designed to be highly compatible with existing R Markdown documents:\n\nQuarto uses Rmd as it’s native file format for R, and should generally be able to render any existing Rmd document without changes.\nQuarto uses standard knitr options to control chunk execution and output.\n\nQuarto also introduces a number of enhancements for Rmd files that are described below. Additionally, Quarto includes a comprehensive system for laying out figure panels and a built-in system for cross-references to figures, tables, equations, sections, theorems, etc."
  },
  {
    "href": "rendering-rmds.html#rendering-from-r",
    "title": "Rendering Rmds",
    "section": "Rendering from R",
    "text": "RStudio IDE\nIn RStudio v1.4 or later, documents that use format rather than output in their YAML metadata will be rendered with Quarto when executing the Knit command from the IDE.\n\n\nR Console\nYou can render from the R console using the quarto R package. To install the R package:\ninstall.packages(\"quarto\")\nThen, to render a document:\nlibrary(quarto)\nquarto_render(\"document.Rmd\")\n\n\nIntermediates\nYou can control whether to keep intermediate .md and/or .tex files using the keep-md and keep-tex options:\n---\nformat:\n  pdf:\n    toc: true\n    keep-md: true\n    keep-tex: true\n---"
  },
  {
    "href": "rendering-rmds.html#quarto-formats",
    "title": "Rendering Rmds",
    "section": "Quarto Formats",
    "text": "One important point of divergence is that Quarto uses it’s own system of output formats rather than traditional R Markdown formats. So instead of this:\n---\noutput: \n  html_document:\n    toc: true\n---\nYou write this:\n---\nformat:\n  html:\n    toc: true\n---\nWhere format is any of the over 40 Pandoc output formats. In addition, you will eventually be able to create custom output formats as Quarto Extensions."
  },
  {
    "href": "rendering-rmds.html#section",
    "title": "Rendering Rmds",
    "section": "",
    "text": ""
  },
  {
    "href": "rendering-rmds.html#options-in-yaml",
    "title": "Rendering Rmds",
    "section": "Options in YAML",
    "text": "In R Markdown documents the setup chunk is often used to set document-wide knitr and/or R options. This works perfectly well, but does have the disadvantage of being somewhat awkward to share across all documents within a project.\nIn Quarto documents, you can provide these options in YAML. For example:\n---\ntitle: \"My Document\"\nknitr:\n  opts_chunk:\n    fig.width: 6\n    fig.height: 4\nr-options:\n  width: 70\n  digits: 5\n---\nNote that these options can also be provided on a per-format basis."
  },
  {
    "href": "rendering-rmds.html#code-folding",
    "title": "Rendering Rmds",
    "section": "Code Folding",
    "text": "For HTML output, Quarto enables you to specify that code is included in the document but hidden by default using the <details> tag. For example:\n\nTo specify that all chunks within a document should use code folding, use the code-fold option:\n---\ntitle: \"My Document\"\nformat:\n  html:\n    code-fold: true\n---\nYou can also set code folding on a per-chunk basis with the fold attribute:\n::: {.cell fold='true' fig.alt='{}'}\n\n```{.r .cell-code  fold=\"true\"}\nsummary(cars)\n```\n\n::: {.cell-output-stdout}\n```\n     speed           dist       \n Min.   : 4.0   Min.   :  2.00  \n 1st Qu.:12.0   1st Qu.: 26.00  \n Median :15.0   Median : 36.00  \n Mean   :15.4   Mean   : 42.98  \n 3rd Qu.:19.0   3rd Qu.: 56.00  \n Max.   :25.0   Max.   :120.00  \n```\n:::\n:::\nUse the code-summary option to provide a custom caption for the <details> tag:\n---\ntitle: \"My Document\"\nformat:\n  html:\n    code-fold: true\n    code-summary: \"Show the code\"\n---\nYou can provide summary text per-cell with the summary attribute:\n::: {.cell summary='Show the code' fig.alt='{}'}\n\n```{.r .cell-code  summary=\"Show the code\"}\nsummary(cars)\n```\n\n::: {.cell-output-stdout}\n```\n     speed           dist       \n Min.   : 4.0   Min.   :  2.00  \n 1st Qu.:12.0   1st Qu.: 26.00  \n Median :15.0   Median : 36.00  \n Mean   :15.4   Mean   : 42.98  \n 3rd Qu.:19.0   3rd Qu.: 56.00  \n Max.   :25.0   Max.   :120.00  \n```\n:::\n:::\nIf you want all foldable code regions to be shown by default, use code-fold: show. For example:\n---\ntitle: \"My Document\"\nformat:\n  html:\n    code-fold: show\n---\nThis can also be specified on a per-cell basis:\n::: {.cell fold='show' fig.alt='{}'}\n\n```{.r .cell-code  fold=\"show\"}\nsummary(cars)\n```\n\n::: {.cell-output-stdout}\n```\n     speed           dist       \n Min.   : 4.0   Min.   :  2.00  \n 1st Qu.:12.0   1st Qu.: 26.00  \n Median :15.0   Median : 36.00  \n Mean   :15.4   Mean   : 42.98  \n 3rd Qu.:19.0   3rd Qu.: 56.00  \n Max.   :25.0   Max.   :120.00  \n```\n:::\n:::"
  },
  {
    "href": "rendering-rmds.html#cache-control",
    "title": "Rendering Rmds",
    "section": "Cache Control",
    "text": "You can use standard knitr cache attributes to cache time consuming code chunks. In addition, you can use quarto command line options (or their equivalent arguments to the quarto_render function) to control caching behavior without changing the document’s code.\nUse these command line options to force the use of caching on all chunks, disable the use of caching on all chunks, or to force a refresh of the cache even if it has not been invalidated:\n$ quarto render document.Rmd --cache \n$ quarto render document.Rmd --no-cache \n$ quarto render document.Rmd --cache-refresh \nOr from R using the quarto package:\nlibrary(quarto)\nquarto_render(\"document.Rmd\", cache = TRUE)\nquarto_render(\"document.Rmd\", cache = FALSE)\nquarto_render(\"document.Rmd\", cache_refresh = TRUE)\nYou can also specify these options within a document’s YAML metadata. The main advantage of this over the knitr setup chunk is that could specify caching for an entire project in one place. For example:\n---\nproject:\n  name: myproject\ncache: true\n---"
  },
  {
    "href": "book-basics.html#overview",
    "title": "Creating a Book",
    "section": "Overview",
    "text": "Quarto Books are combinations of multiple documents (chapters) into a single manuscript. Books can be created in a variety of formats:\n\nPDF\nHTML\nEPUB\nMS Word\n\nHTML books are not that different from Quarto Websites save for the fact that chapters and sections are numbered and therefore support Cross References.\nHere are some examples of books created with Quarto:\n\nHands on Programming with R\nVisualization Curriculum"
  },
  {
    "href": "book-basics.html#getting-started",
    "title": "Creating a Book",
    "section": "Getting Started",
    "text": "To create a new book project, use the Quarto create-project command:\n$ quarto create-project mybook --type book\nThis will create the scaffolding for a simple book in the mybook subdirectory. To build and view the HTML version of the book use the serve command:\n$ quarto serve mybook\nThis will build the HTML version of the book and run a local web server to view it. Here’s what you’ll see in your browser for the simple book scaffolding:\n\nThe book’s chapters are contained in the files index.md, introduction.md, summary.md. Try adding some content to one of these files and saving—you’ll notice that the book preview is automatically updated in the browser.\nYou’ll also notice that a Quarto project file (_quarto.yml) was created in the mybook directory. This file contains the initial configuration for your book:\nproject:\n  type: book\n\nbook:\n  title: \"mybook\"\n  author: \"Jane Doe\"\n  date: \"5/11/2021\"\n  chapters:\n    - index.md\n    - intro.md\n    - summary.md\n    - references.md\n\nbibliography: references.bib\n\nformat:\n  html:\n    theme: cosmo\n  pdf:\n    documentclass: report\n  epub:\n    epub-cover-image: cover.png"
  },
  {
    "href": "book-basics.html#workflow",
    "title": "Creating a Book",
    "section": "Workflow",
    "text": "Development\nWhen working on a book, you’ll typically run the local development server as described above and incrementally preview content as you work:\n$ quarto serve\nIf you have a plain markdown file (with no computations), then saving it will cause the preview to automatically update (as will changes to config files, CSS files, etc.). If you are working on a file with computations (e.g. an Rmd or Jupyter notebook) then you need to explicitly re-render it to update the preview.\nNote that development server updates do not cause an update to the final book output. Consequently, you should always quarto render your site before deploying it as described below in Publishing.\n\n\nRStudio\nNote that if you are using Quarto within RStudio, you can run the development server within the RStudio Viewer pane using the quarto R package:\nlibrary(quarto)\nquarto_serve()\nNote that you should also be sure to disable the standard RStudio preview behavior when using this workflow:\n\nNote that the (No Preview) option is checked to disable the normal preview on render behavior.\nRStudio v1.4 automatically uses Quarto to render Rmd documents whenever it sees a format key in the YAML front matter (as opposed to an output key). For projects, you typically provide the format configuration in _quarto.yml so may not have a format key in individual documents.\nHowever, since RStudio v1.4 is not aware of Quarto projects, you should add an explicit entry in YAML front-matter to ensure that Quarto (rather than the rmarkdown package) is used for rendering:\n---\ntitle: \"My Page\"\nknit: quarto render\n---\n\n\nPublishing\nWhen you are ready to publish the book, use the render command to render all output formats:\n$ quarto render --to all\nIf you pass no arguments to quarto render the default format (HTML) will be rendered. You can also render individual formats via the --to argument:\n$ quarto render           # render default format (HTML)\n$ quarto render --to pdf  # render PDF format only\nThe output of your book will be written to the _book sub-directory of your book project:\nmybook/\n  _book/\n    index.html # and other website files\n    mybook.pdf\n    mybook.epub"
  },
  {
    "href": "book-basics.html#learning-more",
    "title": "Creating a Book",
    "section": "Learning More",
    "text": "Once you are familiar with the basic mechanics, read the article on Book Authoring to learn about:\n\nHow to structure your book (numbered and unnumbered chapters/sections, creating multiple parts, adding appendices, etc.)\nIncorporating computational output from knitr or Jupyter (including tools for caching the results of longer running chapters/sections).\nCreating cross-references to chapters, sections, figures, tables, etc.\nCustomizing the style and appearance of your book in the various output formats.\nProviding navigation and other tools for readers (e.g. download other formats, share on twitter, suggest changes, etc.)"
  },
  {
    "href": "footnotes-and-citations.html",
    "title": "Footnotes & Citations",
    "section": "",
    "text": ""
  },
  {
    "href": "html-basics.html#overview",
    "title": "HTML Extensions",
    "section": "Overview",
    "text": "Quarto adds several features on top of standard pandoc markdown for the html format:\n\nHover for section anchor links\nHover to view citations and footnotes\nCode folding via <details>\nCopy button for code blocks\nCommenting via Hypothesis or Utterances\n\nNote that these features all work irrespective of whether a Bootstrap or other theme is applied."
  },
  {
    "href": "html-basics.html#anchor-sections",
    "title": "HTML Extensions",
    "section": "Anchor Sections",
    "text": "Hover over a section title to see an anchor link. Enable/disable this behavior with:\nanchor-sections: true"
  },
  {
    "href": "html-basics.html#reference-hover",
    "title": "HTML Extensions",
    "section": "Reference Hover",
    "text": "Hover over Xie (2015) to see a reference to the definitive book on knitr1.\nControl this behavior with the following options:\nhover-citations: true\nhover-footnotes: true"
  },
  {
    "href": "html-basics.html#code-blocks",
    "title": "HTML Extensions",
    "section": "Code Blocks",
    "text": "Folding\nClick the Code button to see the code that produced this plot.\n\n\nCode\nlibrary(ggplot2)\ndat <- data.frame(cond = rep(c(\"A\", \"B\"), each=10),\n                  xvar = 1:20 + rnorm(20,sd=3),\n                  yvar = 1:20 + rnorm(20,sd=3))\n\nggplot(dat, aes(x=xvar, y=yvar)) +\n    geom_point(shape=1) + \n    geom_smooth() \n\n\n\n\n\nCode folding can be set globally or on a per-chunk basis (chunks can be set to display folded or unfolded by default). For example:\ncode-fold: false # no folding (default)\ncode-fold: true  # fold code (initially hidden)\ncode-fold: show  # fold code (initially shown)\nYou can customize the summary text via:\ncode-summary: \"Show the code\"\nUse the fold and summary chunk attributes to control this on a chunk-by-chunk basis.\n\n\nCopy Button\nHover over the code block below and you will see a copy icon in the top-right corner:\n\nlibrary(dygraphs)\ndygraph(nhtemp, main = \"New Haven Temperatures\") %>% \n  dyRangeSelector(dateWindow = c(\"1920-01-01\", \"1960-01-01\"))\n\nThis behavior is enabled by default but you configure it using the code-copy option:\ncode-copy: hover # show button on hover (default)\ncode-copy: true  # always show hover button\ncode-copy: false # never show hover button\n\n\nLinking\nThe code-link option enables hyper-linking of functions within code blocks to their online documentation:\ncode-link: true\nCode linking is currently implemented only for the knitr engine (via the downlit package)."
  },
  {
    "href": "html-basics.html#commenting",
    "title": "HTML Extensions",
    "section": "Commenting",
    "text": "This page has commenting with Hypothes.is enabled via the following YAML option:\ncomments:\n  hypothesis: true\nYou can see the Hypothesis UI at the far right of the page. Rather than true, you can specify any of the available Hypothesis embedding options as a sub-key of hypothesis. For example:\ncomments:\n  hypothesis: \n    theme: clean\nYou can enable Utterances commenting using the utterances option. Here you need to specify at least the Git repo you want to use for storing comments:\ncomments:\n  utterances:\n    repo: quarto-dev/quarto-docs\nYou can also specify the other options documented here."
  },
  {
    "href": "html-basics.html#references",
    "title": "HTML Extensions",
    "section": "References",
    "text": "Xie, Yihui. 2015. Dynamic Documents with R and Knitr. 2nd ed. Boca Raton, Florida: Chapman; Hall/CRC. https://yihui.name/knitr/."
  },
  {
    "href": "ms-word.html",
    "title": "MS Word",
    "section": "",
    "text": ""
  },
  {
    "href": "using-rstudio.html",
    "title": "Using RStudio",
    "section": "",
    "text": ""
  },
  {
    "href": "website-navigation.html#overview",
    "title": "Website Navigation",
    "section": "Overview",
    "text": "There are a variety of options available for providing website navigation, including:\n\nUsing top navigation (a navbar) with optional sub-menus.\nUsing side navigation with a hierarchy of pages.\nCombining top and side navigation (where top navigation links to different sections of the site each with their own side navigation).\n\nIn addition, you can add full text search to either the top or side navigation interface."
  },
  {
    "href": "website-navigation.html#top-navigation",
    "title": "Website Navigation",
    "section": "Top Navigation",
    "text": "To add top-navigation to a website, add a navbar entry to the site config in _quarto.yml. For example, the following YAML:\nsite:\n  navbar:\n    type: dark\n    background: primary\n    search: true\n    left:\n      - text: \"Home\"\n        file: index.Rmd\n      - talks.Rmd\n      - about.Rmd \nWould result in a navigation bar that looks something like this:\n\nAbove we use the left option to specify items for the left side of the navigation bar. You can also use the right option to specify items for the right side.\nThe text for navigation bar items will be taken from the underlying target document’s title. Note that in the above example we provide a custom text: \"Home\" value for index.Rmd.\nYou can also create a navigation menu by including a menu (which is list of items much like left and right). For example:\nleft:\n  - text: \"More\"\n    menu:\n      - talks.Rmd\n      - about.Rmd \nHere are all of the options available for top navigation:\n\n\n\n\n\n\n\nOption\nDescription\n\n\n\n\ntitle\nNavbar title (uses the site-title if none is specified).\n\n\nlogo\nOptional logo image to be displayed left of the title.\n\n\ntype\n“dark” or “light” (each Bootstrap theme has a light and dark variation of the navigation bar)\n\n\nbackground\nBackground color (“primary,” “secondary,” “success,” “danger,” “warning,” “info,” “light,” or “dark”)\n\n\nsearch\nInclude a search box (true or false)\n\n\nleft / right\nLists of navigation items for left and right side of navbar\n\n\npinned\nAlways show the navbar (true or false). Defaults to false, and uses headroom.js to automatically show the navbar when the user scrolls up on the page.\n\n\ncollapse\nCollapse the navbar items into a hamburger menu when the display gets narrow (defaults to true)\n\n\ncollapse-below\nResponsive breakpoint at which to collapse navbar items to a hamburger menu (“sm,” “md,” “lg,” “xl,” or “xxl,” defaults to “lg”)\n\n\n\nHere are the options available for individual navigation items:\n\n\n\n\n\n\n\nOption\nDescription\n\n\n\n\nfile\nLink to file contained with the project.\n\n\nurl\nLink to external URL.\n\n\ntext\nText to display for navigation item (defaults to the document title if not provided).\n\n\nicon\nName of one of the standard Bootstrap 5 icons (e.g. “github,” “twitter,” “share,” etc.).\n\n\naria-label\nAccessible label for the navigation item.\n\n\nmenu\nList of navigation items to populate a drop-down menu."
  },
  {
    "href": "website-navigation.html#side-navigation",
    "title": "Website Navigation",
    "section": "Side Navigation",
    "text": "If your site consists of more than a handful of documents, you might prefer to use side navigation, which enables you to display an arbitrarily deep hierarchy or articles.\nIf you are reading this page on a desktop device then you will see the default side navigation display on the left (otherwise you’ll see a title bar at the top which you can click or touch to reveal the navigation).\nTo add side navigation to a website, add a sidebar entry to the site section of _quarto.yml. For example:\nsite:\n  sidebar:\n    style: \"docked\"\n    search: true\n    contents:\n      - section: \"Basics\"\n        contents:\n          - index.md\n          - basics-knitr.Rmd\n          - basics-jupyter.md\n      - section: \"Layout\"\n        contents:\n          - layout.md\n          - layout-knitr.Rmd\n          - layout-jupyter.md\nThere are two styles of side navigation available: “docked” which shows the navigation in a sidebar with a distinct background color, and “floating” which places it closer to the main body text. Here’s that the “docked” and “floating” styles look like (respectively):\n\n\n\n\n\n\n\n\nHere are all of the options available for side navigation:\n\n\n\n\n\n\n\nOption\nDescription\n\n\n\n\nid\nOptional identifier (used only for hybrid navigation, described below).\n\n\ntitle\nSidebar title (uses the project title if none is specified).\n\n\nsubtitle\nOptional subtitle\n\n\nlogo\nOptional logo image\n\n\nsearch\nInclude a search box (true or false). Note that if there is already a search box on the top navigation bar it won’t be displayed on the sidebar.\n\n\ntools\nList of sidebar tools (e.g. link to github or twitter, etc.). See the next section for details.\n\n\nfooter\nFooter content to place immediately below the sidebar.\n\n\nitems\nList of navigation items to display (typically top level items will in turn have a list of sub-items).\n\n\nstyle\n“docked” or “floating”\n\n\ntype\n“dark” or “light” (hint to make sure the text color is the inverse of the background)\n\n\nbackground\nBackground color (“none,” “primary,” “secondary,” “success,” “danger,” “warning,” “info,” “light,” “dark,” or “white”). Defaults to “light.”\n\n\nalignment\nAlignment (“left,” “right,” or “center”).\n\n\ncollapse-level\nWhether to show sidebar navigation collapsed by default. The default is 2, which shows the top and next level fully expanded (but leaves the 3rd and subsequent levels collapsed).\n\n\npinned\nAlways show a title bar that expands to show the sidebar at narrower screen widths (true or false). Defaults to false, and uses headroom.js to automatically show the navigation bar when the user scrolls up on the page.\n\n\n\n\nSidebar Tools\nIn addition to traditional navigation, the sidebar can also display a set of tools (e.g. social actions, github view or edit action, etc…) A basic tool definition consists of an icon name and an href to follow when clicked. For icon, use the icon name of any of the 1,300+ Bootstrap Icons.\nFor example:\n\n\n\n\n\n\n\nsite:\n  sidebar:\n    tools:\n      - icon: twitter\n        href: https://twitter.com\n      - icon: github\n        menu:\n          - text: Source Code\n          - url:  https://code.com\n          - text: Report a Bug\n          - url:  https://bugs.com"
  },
  {
    "href": "website-navigation.html#hybrid-navigation",
    "title": "Website Navigation",
    "section": "Hybrid Navigation",
    "text": "If you have a website with dozens or even hundreds of pages you will likely want to use top and side navigation together (where the top navigation links to various sections, each with their own side navigation).\nTo do this, provide a list of nav-side entries and give them each an id, which you then use to reference them from the nav-top. For example, if you are using the Diátaxis Framework for documentation, you might have separate sections for tutorials, how-to guides, explanations, and reference documents:\n\nYour configuration for this site might look something like this:\nsite:\n  navbar:\n    search: true\n    left:\n      - text: \"Home\"\n        file: index.Rmd\n      - sidebar:tutorials\n      - sidebar:howto\n      - sidebar:fundamentals\n      - sidebar:reference\n\n  sidebar:\n    - id: tutorials\n      title: \"Tutorials\"\n      contents: \n        # navigation items\n        \n    - id: howto\n      title: \"How-To\"\n      contents:\n        # navigation items\n        \n    - id: fundamentals\n      title: \"Fundamentals\"\n      contents: :\n        # navigation items\n        \n    - id: reference\n      title: \"Reference\"\n      contents: \n        # navigation items"
  },
  {
    "href": "website-navigation.html#site-search",
    "title": "Website Navigation",
    "section": "Site Search",
    "text": "You can add site search by including search: true in either your site-navbar or site-sidebar configuration. For example:\nsite:\n  sidebar:\n    style: \"docked\"\n    search: true\n    items:\n      - text: \"Basics\"\n        contents:\n          - index.Rmd\n          - basics-jupyter.md\n        # etc"
  },
  {
    "href": "website-navigation.html#github-links",
    "title": "Website Navigation",
    "section": "GitHub Links",
    "text": "You can add various links (e.g. to edit pages, report issues, etc.) to the GitHub repository where your site source code is hosted. To do this, add a repo-url along with one or more actions in repo-actions. For example:\nsite:\n  repo-url: https://github.com/quarto-dev/quarto-demo\n  repo-actions: [edit, issue]\nThe links will be displayed immediately below the page table of contents:\n\nBy default, the main branch will be used for generating links. You can specify an alternate branch using the repo-branch option."
  },
  {
    "href": "jupyter-markdown.html#introduction",
    "title": "Jupyter Markdown",
    "section": "Introduction",
    "text": "To author dynamic Jupyter documents for Quarto, you use Jupyter Markdown, which is a pure markdown representation of a Jupyter Notebook. Markdown notebooks are easier to use with version control nand can be edited in your favorite markdown editor.\nJupyter Markdown is just standard markdown with a jupyter YAML metadata option to specify which kernel to use, and one or more code blocks to be executed:\n\nYou can render Jupyter Markdown using this command:\n$ quarto render notebook.md\nYou can also use Quarto to export conventional Jupyter Notebooks (.ipynb files). See the article on Exporting Notebooks for additional details."
  },
  {
    "href": "jupyter-markdown.html#requirements",
    "title": "Jupyter Markdown",
    "section": "Requirements",
    "text": "Before working with Jupyter Markdown, you should ensure that you have the required packages installed for your particular Jupyter kernel.\n\nPython\nIf you already have Python/Jupyter installed in your environment, then you should have everything required to render Jupyter notebooks with Python kernels.\nIf you are in a fresh environment, install the core Quarto minimal requirements (as shown below) or if you like install the full jupyter package including the notebook, qtconsole, etc.:\n# quarto minimal requirements\n$ pip install jupyter_core nbformat nbclient ipykernel pyyaml\n\n# full jupyter install\n$ pip install jupyter\n\n\nJulia\nIf you are using Julia, please see the IJulia documentation on installing and using the Julia kernel.\nNote that it’s also strongly recommended that you use Revise.jl to optimize away kernel startup time. See the documentation on using Revise within Jupyter for additional details."
  },
  {
    "href": "jupyter-markdown.html#rendering",
    "title": "Jupyter Markdown",
    "section": "Rendering",
    "text": "You can use Quarto to convert Jupyter Markdown to HTML, PDF, Word, or any of the over 40 Pandoc output formats. To render a document, just provide it as an argument to quarto render:\n$ quarto render notebook.md # will render to html\n$ quarto render notebook.md --to pdf\n$ quarto render notebook.md --to docx\nDuring rendering your Jupyter Markdown file will be converted into a notebook file (.ipynb) and then executed using the Jupyter kernel. By default, this file is considered temporary and removed after render. If you wish to keep it, specify the keep-ipynb option:\n---\ntitle: \"My document\"\nkeep-ipynb: true\njupyter: python3\"\n---\nSee the Basic Usage article for details on how to specify Pandoc output format options.\nSee the Jupyter Options article to learn how to set options for:\n\nWhether code is hidden, shown, or folded.\nHow to treat warnings and errors in output.\nSpecifying the size, alignment, and captions for figures.\nDeclaring render-time notebook parameters\nWhether intermediate files (e.g. .md, .tex, and .ipynb) are preserved."
  },
  {
    "href": "jupyter-markdown.html#jupyter-cache",
    "title": "Jupyter Markdown",
    "section": "Jupyter Cache",
    "text": "If cells are time-consuming to render, you can speed things up by using Jupyter Cache. To do this, first install the jupyter-cache package:\n$ pip install jupyter-cache\nThen, add the cache YAML metadata option:\n\nThe cache will be used whenever the content for the notebook’s code cells remains the same.\nYou can do a render without the cache or force re-population of the cache using command line arguments:\n$ quarto render notebook.md --no-cache\n$ quarto render notebook.md --refresh-cache"
  },
  {
    "href": "jupyter-markdown.html#jupytext",
    "title": "Jupyter Markdown",
    "section": "Jupytext",
    "text": "Jupytext enables you to have multiple synchronized representations of a notebook (e.g. .ipynb and .md). To learn more about using Jupytext see the project documentation.\nIf you render a document that has Jupytext synchronization enabled, Quarto will automatically call jupytext —-sync as required. For example:\n$ quarto render notebook.md\n[jupytext] Syncing ipynb,md...Done\n\nExecuting 'notebook.ipynb'\n  Cell 1/2...Done\n  Cell 2/2...Done"
  },
  {
    "href": "jupyter-markdown.html#learning-more",
    "title": "Jupyter Markdown",
    "section": "Learning More",
    "text": "See the Basic Usage article for details on how to specify Pandoc output format options.\nSee the Jupyter Options article to learn how to customize rendering output (figures, visibility of code, etc.) and kernel execution.\nYou can also use Quarto to export conventional Jupyter Notebooks (.ipynb files). See the article on Exporting Notebooks for additional details."
  },
  {
    "href": "equations.html",
    "title": "LaTeX Equations",
    "section": "",
    "text": ""
  },
  {
    "href": "executing-code.html#overview",
    "title": "Executing Code",
    "section": "Overview",
    "text": "Quarto supports embedding computations within markdown. This allows you to create fully reproducible documents and reports—the code required to produce your output is part of the document itself, and is automatically re-run whenever the document is rendered.\nThere are currently two engines supported for running computations:\n\nJupyter, for embedding code from Python, Julia, and many other languages.\nKnitr, for embedding code from R.\n\nExtensive customization of code chunk output is supported, including the ability to hide code and/or output as well as fold code (make it visible only on demand).\n\nSimple Examples\nHere are a couple of simple examples in Python and R to illustrate. In both cases the plot generated by the code will be embedded in the document when it is rendered:\n\nPython\n---\ntitle: \"My Document\"\n---\n\n```{python}\nimport matplotlib.pyplot as plt\nplt.plot([1,2,3,4])\nplt.show()\n```\n\n```{python}\nimport pandas as pd\nd = {'one' : [1., 2., 3., 4.],\n     'two' : [4., 3., 2., 1.]}\ndf = pd.DataFrame(d)\ndf\n```\n\n\nR\n---\ntitle: \"My Document\"\n---\n\n```{r}\nlibrary(ggplot2)\nggplot(airquality, aes(Temp, Ozone)) + \n        geom_point() + \n        geom_smooth(method = \"loess\", se = FALSE)\n```\n\n```{r}\nsummary(airquality)\n```\nNote that these code blocks use braces around the language name (e.g. ```{python}). This is what indicates that the code chunk is executable and should be run by Quarto during render. Code chunks that use no braces (e.g. ```python) are not run.\nYou can produce a wide variety of output types from code chunks, including:\n\nStatic plots (e.g. from matplotlib or ggplot2).\nInteractive plots (e.g. from plotly or leaflet).\nTabular output (e.g. from printing R or Pandas data frames)\nPlain text output (e.g. printing the results of statistical summaries).\n\n\n\n\nSupported Formats\nQuarto will run computations in any markdown document that uses {} delimited language names in it’s code chunks. The engine used for computations is automatically determined based on the language(s) used in the document (see Engine Binding below for details on how to override this). For example, the documents shown above might be rendered with:\n$ quarto render py-example.md\n$ quarto render r-example.md\nQuarto is also highly compatible with existing formats used for computational documents. You can render any Jupyter notebook (.ipynb) or R Markdown document (.Rmd) with Quarto, and use all of the same computational features described here:\n$ quarto render py-example.ipynb\n$ quarto render r-example.Rmd\nNote that R users will likely want to continue using the .Rmd extension for Quarto, as the Quarto format is backwards compatible with .Rmd and editors (e.g. RStudio) will make features like interactive chunk execution available when the .Rmd extension is present.\nJupyter users have a choice of authoring in .ipynb (.e.g. using the JupyterLab or VS Code notebook editor) or authoring in plain text using their favorite text editor. See the article on Authoring Tools for additional details."
  },
  {
    "href": "executing-code.html#output-options",
    "title": "Executing Code",
    "section": "Output Options",
    "text": "There are a wide variety of options available for customizing computational output. All of these options can be specified either globally (in the document front-matter) or per code-block. For example, here’s a modification of the Python example to specify that we don’t want to “echo” the code into the output document:\n---\ntitle: \"My Document\"\nexecute:\n  echo: false\n---\nNote that we can override this option on a per code-block basis. For example:\n```{python}\n#| echo: true\n\nimport matplotlib.pyplot as plt\nplt.plot([1,2,3,4])\nplt.show()\n```\nCode block options are included in a special comment at the top of the block (lines at the top prefaced with #| are considered options).\nOptions available for customizing output include:\n\n\n\n\n\n\n\nOption\nDescription\n\n\n\n\neval\nEvaluate the code chunk (if false, just echos the code into the output).\n\n\necho\nInclude the source code in output\n\n\noutput\nInclude the results of executing the code in the output\n\n\nwarning\nInclude warnings in the output.\n\n\nerror\nInclude errors in the output (note that this implies that errors executing code will not halt processing of the document).\n\n\ninclude\nCatch all for preventing any output (code or results) from being included (e.g. include: false suppresses all output from the code block).\n\n\n\nHere’s our original R example with some of these additional options:\n---\ntitle: \"My Document\"\nexecute:\n  echo: false\n  warning: false\n---\n\n```{r}\n#| echo: true\n\nlibrary(ggplot2)\nggplot(airquality, aes(Temp, Ozone)) + \n        geom_point() + \n        geom_smooth(method = \"loess\", se = FALSE)\n```\n\n```{r}\nsummary(airquality)\n```"
  },
  {
    "href": "executing-code.html#execution-options",
    "title": "Executing Code",
    "section": "Execution Options",
    "text": "While it’s extremely convenient to embed computations within documents, it can present problems if code blocks are long running. There are a couple of built-in ways to mitigate expensive computations.\n\nCaching\nQuarto integrates with the Jupyter Cache and Knitr Cache to to cache time consuming code chunks. Note that to use Jupyter Cache you’ll want to install the jupyter-cache package:\n$ pip install jupyter-cache\nTo enable caching for a document just add the cache option:\nexecute: \n  cache: true\nYou can also use `quarto` command line options to control caching behavior without changing the document’s code. Use options to force the use of caching on all chunks, disable the use of caching on all chunks (even if it’s specified in options), or to force a refresh of the cache even if it has not been invalidated:\n$ quarto render example.md --cache \n$ quarto render example.md --no-cache \n$ quarto render example.md --cache-refresh \nNote that for Jupyter, the cache for a document is invalidated if any of the code blocks change. For Knitr, invalidation occurs on a per-cell basis.\n\n\nDisabling Execution\nIn some cases, you may want to prevent execution entirely. This is especially useful if you author using a standard notebook editor (e.g. JupyterLab) and plan on executing chunks only within the notebook UI. Specify execute: false to skip execution when rendering (you’ll naturally still get the output that was generated within the notebook editor):\nexecute: false\nYou might also set this option if you just want to preview markdown content without re-running computation. In this case you can just add enabled: false to the execute options:\nexecute:\n  enabled: false\n  echo: true\n  warning: false"
  },
  {
    "href": "executing-code.html#figure-options",
    "title": "Executing Code",
    "section": "Figure Options",
    "text": ""
  },
  {
    "href": "executing-code.html#engine-binding",
    "title": "Executing Code",
    "section": "Engine Options",
    "text": "Jupyter Daemon\nEarlier we said that the engine used for computations was determined automatically. You may want to customize this—for example you may want to use the Jupyter R kernelrather than Knitr, or you may want to use Knitr with Python code (via reticulate).\nHere are the basic rules for automatic binding:\n\n\n\n\n\n\n\nFile Type\nEngine Binding\n\n\n\n\n.Rmd             \nUses Knitr engine\n\n\n.ipynb\nUses Jupyter engine\n\n\n.md\nUses Knitr engine if an {r} code block is discovered within the file\nUses Jupyter engine if an executable code block (e.g. {python}) is discovered within the file. The kernel used is determined based on the language of the first executable code block discovered in the file.\n\n\n\nYou can override the engine used via the engine option. For example:\nexecute:\n  engine: jupyter\n  \nexecute:\n  engine: knitr\nYou can also specify that no engine should be used via engine: none.\nThe presence of the knitr or jupyter option will also override the default engine:\nknitr: true\n\njupyter: python3\nVariations with additional engine-specific options also work to override the default engine:\nknitr:\n  opts_knit:\n    verbose: true\n    \njupyter:\n  kernelspec:\n    display_name: Python 3\n    language: python\n    name: python3"
  },
  {
    "href": "epub.html",
    "title": "EPUB",
    "section": "",
    "text": ""
  },
  {
    "href": "exporting-notebooks.html#overview",
    "title": "Exporting Notebooks",
    "section": "Overview",
    "text": "If you have an existing Jupyter Notebook (.ipynb file) that you want to export to one of the formats supported by Pandoc, you can do this using quarto render. For example:\n$ quarto render notebook.ipynb # html by default\n$ quarto render notebook.ipynb --to pdf\n$ quarto render notebook.ipynb --to docx\nBy default, Quarto will not re-execute the code cells in the notebook. If you want to execute code cells during render, specify the --execute flag. For example:\n$ quarto render notebook.ipynb --execute"
  },
  {
    "href": "exporting-notebooks.html#export-options",
    "title": "Exporting Notebooks",
    "section": "Export Options",
    "text": "There are dozens of options that you can use to customize exported output. You can specify these options by adding a raw YAML block at the top of your notebook:\n\nAlternatively, you can keep these options in a separate YAML file and reference this file using the --metadata-file command line argument. For example:\n$ quarto render notebook.ipynb --metadata-file options.yml\nSee the Basic Usage article to learn more about the various metadata options that can be used to customize output."
  },
  {
    "href": "website-basics.html#overview",
    "title": "Creating a Website",
    "section": "Overview",
    "text": "Quarto Websites are a convenient way to publish groups of documents. Document published as part of a website share navigational elements, rendering options, and visual style.\nWebsite navigation can be provided through a global navbar, a sidebar with links, or a combination of both for sites that have multiple levels of content. You can also enable full text search for websites.\nThis site is an example of a Quarto Website (you can see the source code for it here: https://github.com/quarto-dev/quarto-docs)."
  },
  {
    "href": "website-basics.html#getting-started",
    "title": "Creating a Website",
    "section": "Getting Started",
    "text": "To create a new website project, use the Quarto create-project command:\n$ quarto create-project mysite --type site\nThis will create the scaffolding for a simple website in the mysite subdirectory. Here is what the _quarto.yml config file will look like for the site:\nproject:\n  type: site\n\nsite:\n  title: \"mysite\"\n  navbar:\n    type: dark\n    background: primary\n    left:\n      - href: index.md\n        text: Home\n      - about.md\n\nformat:\n  html:\n    theme: cosmo\n    css: styles.css\n    toc: true\nTo build the website into the _site directory:\n$ quarto render mybook\nSee the Quarto Projects article to learn more about working with projects."
  },
  {
    "href": "website-basics.html#workflow",
    "title": "Creating a Website",
    "section": "Workflow",
    "text": "Quarto includes a live-reloading development server that you will likely find convenient to use while working on websites. Start the server with:\n$ quarto serve\nThe browser will automatically refresh when you render a computational input (e.g. Rmd) or save a markdown file that doesn’t require computation.\nChanges to configuration files (e.g. _quarto.yml) as well site resources (e.g. theme or CSS files) will also cause an automatic refresh.\nNote that development server updates do not cause an update to the final site output. Consequently, you should always quarto render your site before deploying it, even if you have already previewed the changes with the development server.\n\nRStudio\nIf you are using Quarto from R, you can also use the quarto package to run the development server:\nlibrary(quarto)\nquarto_serve()\nNote that you should also be sure to disable the standard RStudio preview behavior when using this workflow:\n\nNote that the (No Preview) option is checked to disable the normal preview on render behavior.\nRStudio v1.4 automatically uses Quarto to render Rmd documents whenever it sees a format key in the YAML front matter (as opposed to an output key). For projects, you typically provide the format configuration in _quarto.yml so may not have a format key in individual documents.\nHowever, since RStudio v1.4 is not aware of Quarto projects, you should add an explicit entry in YAML front-matter to ensure that Quarto (rather than the rmarkdown package) is used for rendering:\n---\ntitle: \"My Page\"\nknit: quarto render\n---"
  },
  {
    "href": "website-basics.html#resources",
    "title": "Creating a Website",
    "section": "Resources",
    "text": "Besides input and configuration files, your site likely also includes a variety of resources (e.g. images) that you will want to publish along with your site. Quarto will automatically detect any files that you reference within your site and copy them to the output directory (e.g. _site).\nIf this auto-detection fails for any reason, of if you want to publish a file not explicitly linked to from within your site, you can add a resources entry to your configuration. For example, here we specify that we want to include all Excel spreadsheets within the project directory as part of the website:\nproject:\n  type: site\n  resources: \n    - *.xlsx\nYou can also add a resources metadata value to individual files. For example:\ntitle: \"My Page\"\nresources:\n  - sheet.xlsx\nImages are the most commonly used type of resource file. If you have global images (e.g. a logo) that you want to reference from various pages within your site, you can use an site-absolute path to refer to the images, and it will be automatically converted to a relative path during publishing. For example:\n![](/images/logo.png)"
  },
  {
    "href": "jupyter-options.html#overview",
    "title": "Jupyter Options",
    "section": "Overview",
    "text": "This article describes how to specify options that control a wide variety of rendering behaviors, including:\n\nWhether code is hidden, shown, or folded.\nHow to treat warnings and errors in output.\nSpecifying the size, alignment, and captions for figures.\nDeclaring render-time notebook parameters\nWhether intermediate files (e.g. .md, .tex, and .ipynb) are preserved.\n\nMost options can be specified at the document level or the cell level."
  },
  {
    "href": "jupyter-options.html#cell-output",
    "title": "Jupyter Options",
    "section": "Cell Output",
    "text": "There are a number of tags available that control the display of cells in rendered documents:\n\n\n\nOptions\nDescription\n\n\n\n\nshow-code hide-code\nShow or hide cell code\n\n\nshow-output hide-output\nShow or hide cell output\n\n\nshow-warnings hide-warnings\nShow or hide warnings / stderr\n\n\nhide-cell\nHide cell entirely (all code and output)\n\n\n\nThese can all be set on document or per-cell level. For example, to hide all code and warnings at a document level:\n---\ntitle: \"My document\"\nhide-code: true\nhide-warnings: true\njupyter: python3\"\n---\nTo hide code and warnings for an individual cell:\n```python tags=[\"hide-code\", \"hide-warnings\"]\nimport pandas as pd\nd = {'one' : [1., 2., 3., 4.],\n     'two' : [4., 3., 2., 1.]}\ndf = pd.DataFrame(d)\ndf\n```"
  },
  {
    "href": "jupyter-options.html#code-folding",
    "title": "Jupyter Options",
    "section": "Code Folding",
    "text": "For HTML output, Quarto enables you to specify that code is included in the document but hidden by default using the <details> tag. For example:\n\nTo specify that all cells within a document should use code folding, use the code-fold option:\n---\ntitle: \"My Document\"\nformat:\n  html:\n    code-fold: true\njupyter: python3\n---\nYou can also set code folding on a per-cell basis with the fold attribute:\n```python fold=true\nimport pandas as pd\nd = {'one' : [1., 2., 3., 4.],\n     'two' : [4., 3., 2., 1.]}\ndf = pd.DataFrame(d)\ndf\n```\nUse the code-summary option to provide a custom caption for the <details> tag:\n---\ntitle: \"My Document\"\nformat:\n  html:\n    code-fold: true\n    code-summary: \"Show the code\"\njupyter: python3\n---\nYou can provide summary text per-cell with the summary attribute:\n```python summary=\"Show the code\" \n1 + 1\n```\nIf you want all foldable code regions to be shown by default, use code-fold: show. For example:\n---\ntitle: \"My Document\"\nformat:\n  html:\n    code-fold: show\njupyter: python3\n---\nThis can also be specified on a per-cell basis:\n```python fold=\"show\" \n1 + 1\n```"
  },
  {
    "href": "jupyter-options.html#allowing-errors",
    "title": "Jupyter Options",
    "section": "Allowing Errors",
    "text": "By default, rendering terminates when a runtime error is encountered while executing a cell. In some cases however you want to actually display errors and continue (e.g. if you are writing a tutorial and want to show errors explicitly). Use the allow-errors option to continue execution after errors (and print the error message in the output):\n---\ntitle: \"My Document\"\nallow-errors: true\njupyter: python3\n---\nYou can also use the \"allow-errors\" tag to do this on a per-cell basis:\n```python tags=[\"allow-errors\"]\n1 / 0\n```"
  },
  {
    "href": "jupyter-options.html#figures",
    "title": "Jupyter Options",
    "section": "Figures",
    "text": "Format and Size\nFor each Pandoc output format (e.g. html, pdf, docx, etc.), Quarto defines an ideal figure width and height based on the typical viewport and/or physical size for that format. For example, html output defaults to 7x5 inches whereas docx output uses 5x4 inches. Presentation formats (e.g. pptx or beamer) have much larger default sizes so that figures fit themselves well to slides.\nYou can override these defaults using the fig-width and fig-height options:\n---\ntitle: \"My Document\"\nformat:\n  html: \n    fig-width: 8\n    fig-height: 3\njupyter: python3\n---\nThese defaults sizes, formats, and DPI values are automatically forwarded to selected graphics libraries:\n\nMatplotlib\nPlotly Express\n\nIf you are using another library, you can retrieve these values from the following environment variables:\n\n\n\n\n\n\n\nVariable\nDescription\n\n\n\n\nQUARTO_FIG_WIDTH\nWidth (in inches) for figures.\n\n\nQUARTO_FIG_HEIGHT\nHeight (in inches) for figures\n\n\nQUARTO_FIG_FORMAT\nPreferred output format. Valid values are “png,” “jpeg,” “svg,” and “pdf”\n\n\nQUARTO_FIG_DPI\nDots per inch (DPI) for figures. Note that it’s important to forward this value on to the graphics library so that retina (high DPI) images can be handled correctly for HTML output.\n\n\n\n\n\nFigure Captions\nIf you want your figures to appear with captions below them, use the fig.cap attribute on the code block that produces the figure:\n```python fig.cap=\"Caption\"\nimport matplotlib.pyplot as plt\nplt.plot([1,23,2,4])\nplt.show()\n```\nIf you have a code block that produces multiple figures, you can specify a list of captions:\n```python fig.cap=[\"Caption\", \"Second Caption\"]\nimport matplotlib.pyplot as plt\nplt.plot([1,23,2,4])\nplt.show()\n\nplt.plot([8,65,23,90])\nplt.show()\n```\nFigures with captions are by default center-aligned. You can change this using the fig-align attribute:\n```python fig.cap=\"Caption\" fig.align=\"left\"\nimport matplotlib.pyplot as plt\nplt.plot([1,23,2,4])\nplt.show()\n```"
  },
  {
    "href": "jupyter-options.html#intermediates",
    "title": "Jupyter Options",
    "section": "Intermediates",
    "text": "When you render Jupyter Markdown, there a number of intermediate files created. By default, these files are removed, however you can request that they be preserved using these options:\n\n\n\n\n\n\n\nOption\nDescription\n\n\n\n\nkeep-md                      \nKeep the markdown that contains executed notebook output (this the markdown that is fed to Pandoc for rendering to the final output format).\n\n\nkeep-ipynb\nJupyter Notebook created by rendering the code chunks in the Jupyter Markdown file.\n\n\nkeep-tex\nKeep the intermediate TeX file generated by Pandoc (this is the TeX input that is provided to pdflatex for rendering to PDF)\n\n\n\nSpecify these options at the document level. For example:\n---\ntitle: \"My Document\"\nkeep-ipynb: true\njupyter: python3\n---"
  },
  {
    "href": "jupyter-options.html#execution",
    "title": "Jupyter Options",
    "section": "Execution",
    "text": "You might wish to prevent execution of code cells when rendering (for example, if it’s very expensive and you just want to preview markdown output). You can do this by adding execute: false as a YAML metadata option:\n---\ntitle: \"My Document\"\nexecute: false\njupyter: python3\n---\nAlternatively, you can pass the --no-execute option to the quarto render command:\n$ quarto render notebook.md --no-execute\nA better option for expensive to render documents is to use caching. See the Jupyter Cache documentation for additional details.\n\nParameters\nYou may have a set of parameters that you use to create different variations of a document. For example:\n\nShowing results for a specific geographic location.\nRunning a report that covers a specific time period.\nRunning a single analysis multiple times for different assumptions.\n\nQuarto uses the same syntax for defining parameters as Papermill. To parameterize a notebook, designate a cell with the tag parameters and provide appropriate default values:\n```python tags=[\"parameters\"]\nalpha = 0.1\nratio = 0.1\n```\nTo render using different parameters you can pass them on the command line using the -P flag:\n$ quarto render notebook.md -P alpha:0.2 -P ratio:0.3\nAlternatively you can create a YAML file that defines the parameter values you want to render with, then call quarto render with the --execute-params flag:\n$ quarto render notebook.md --execute-params params.yml\n\n\nKernel Lifetimes\nBy default, quarto render keeps the Jupyter kernel used to render a document alive for 5 minutes in case a subsequent render wants to utilize the kernel. This makes rendering much faster for subsequent runs since no kernel start-up time is required.\nYou can change this default behavior using the kernel-keepalive option. For example:\n---\ntitle: \"My Document\"\nkernel-keepalive: 60\njupyter: python3\n---\nYou can also specify this option at the command line using the --kernel-keepalive flag:\n$ quarto render notebook.md --kernel-keepalive 0\nThe above example specifies 0, which means don’t keep the kernel around at all.\nYou can force a kernel restart using the --kernel-restart flag:\n$ quarto render notebook.md --kernel-restart"
  },
  {
    "href": "basic-usage.html#rendering-documents",
    "title": "Quarto Basics",
    "section": "Rendering Documents",
    "text": "You can use the quarto render command to render HTML, PDF, Word and many other output formats from plain markdown, Rmd documents, Jupyter Markdown (a pure markdown representation of a notebook), or a Jupyter Notebook:\n$ quarto render document.md\n$ quarto render document.Rmd\n$ quarto render jupyter.md\n$ quarto render jupyter.ipynb\nBy default, Quarto renders to HTML, however any of Pandoc’s over 40 output formats are supported. For example:\n$ quarto render document.Rmd --to pdf\n$ quarto render document.ipynb --to docx\nPandoc supports a wide variety of command line options and all of these options are supported by quarto render. For example:\n$ quarto render document.ipynb --to pdf --toc --number-sections"
  },
  {
    "href": "basic-usage.html#yaml-options",
    "title": "Quarto Basics",
    "section": "YAML Options",
    "text": "Note that while it is possible to pass many options via the command line, it’s often much more convenient to provide these options within the document itself as YAML front matter. For example:\n---\ntitle: \"My Document\"\nauthor: \"Jane Doe\"\nformat: pdf\ntoc: true\nnumber-sections: true\n---\nIf you do this then the following command is equivalent to the previous example (but no options are provided on the command line b/c they are already defined in YAML):\n$ quarto render document.md\nOptions may include any of the defined Pandoc metadata variables or defaults. For example, here we take advantage of quite a few more options for PDF generation:\n---\ntitle: \"My Document\"\nauthor: \"Jane Doe\"\nformat: pdf\ntoc: true\nnumber-sections: true\nshift-heading-level-by: 1\ndocumentclass: report\ngeometry:\n  - top=30mm\n  - left=20mm\n  - heightrounded\nlinks-as-notes: true\nhighlight-style: pygments\n---"
  },
  {
    "href": "basic-usage.html#multiple-formats",
    "title": "Quarto Basics",
    "section": "Multiple Formats",
    "text": "The above example includes a simple format: pdf value to set the default format. It’s also possible to provide multiple formats along with YAML options set on a per-format basis. For example, this document defines HTML, PDF, and Word output:\n---\ntitle: \"My Document\"\nauthor: \"Jane Doe\"\ntoc: true\ntoc-depth: 2\nformat:\n  html:\n    max-width: 800px\n    fontsize: 18px\n    html-math-method: katex\n  pdf:\n    documentclass: report\n    margin-left: 30mm\n    margin-right: 30mm\n  docx:\n    number-sections: true\n    reference-docx: mytemplate.docx\n---\nNote that the toc and toc-depth options are shared across all formats, and the options listed below html, pdf, and docx are only applied to their respective formats.\nIf you render this document without a --to argument, it will be rendered as html since that is the first format listed in the file. To render as another format just provide an explicit --to argument:\n$ quarto render document.md # will render to html\n$ quarto render document.md --to pdf\n$ quarto render document.md --to docx\nYou can learn about the available options for each format in the Pandoc documentation on metadata variables and defaults.\nNote that you can share format options across a set of documents using Quarto Projects."
  },
  {
    "href": "basic-usage.html#next-steps",
    "title": "Quarto Basics",
    "section": "Next Steps",
    "text": "See the article on Jupyter and Knitr to learn more about creating computational documents with Quarto.\nAuthoring Tools covers using Jupyter Lab, RStudio, or other text editors to author Quarto documents.\nIf you are creating HTML output, see the articles on HTML Extensions, HTML w/ Bootstrap, and the HTML Theming System.\nAdvanced features of Quarto are covered in these articles:\n\nQuarto Projects covers how to share YAML metadata options across documents and render all of the documents in directory with a single command.\nCreating a Website and Creating a Book describe some special project types.\n\n\n\nCallout Blocks outlines how to emphasize blocks of content (e.g. tips, notes, warning, etc.)\nCross References describes how to create numbered references to figures, tables, equations, sections, listings, etc.\nFigures and Layout documents Quarto’s layout primitives for creating figure panels, side-by-side tables, etc.\nPDFs and LaTeX explains automatic TeX package installation as well as how to install and use TinyTeX."
  },
  {
    "href": "index.html#introduction",
    "title": "Welcome to Quarto",
    "section": "Introduction",
    "text": "Quarto is a scientific and technical markdown publishing system built on Pandoc. In addition to the core capabilities of Pandoc, Quarto includes:\n\nSupport for embedding output from Python, R, and Julia via integration with Jupyter and knitr .\nA variety of extensions to Pandoc markdown useful for technical writing including callouts (admonitions), cross-references, sub-figures, layout panels, hover-able citations and footnotes, and more.\nA project system for rendering groups of documents at once, sharing options across documents, and producing aggregate output like books and websites.\nHTML output based on Bootstrap (including support for Bootswatch themes).\nAutomatic installation of required LaTeX packages when rendering PDF output.\n\nThe overall design of Quarto is influenced heavily by R Markdown, however unlike R Markdown the architecture is language agnostic. In it’s current iteration, Quarto can render plain markdown, Jupyter Notebooks, and Knitr (Rmd) documents.."
  },
  {
    "href": "index.html#installation",
    "title": "Welcome to Quarto",
    "section": "Installation",
    "text": "You can install the Quarto CLI (command-line interface) from here:\nhttps://github.com/quarto-dev/quarto-cli/releases/latest\nYou can verify that Quarto has been installed correctly with:\n$ quarto help\nTo install the development version of the Quarto CLI, git clone this repo then run the configure script for your platform (configure-linux.sh, configure-macos.sh, or configure-window.cmd). For example:\n$ git clone https://github.com/quarto-dev/quarto-cli\n$ cd quarto-cli\n$ ./configure-macos.sh"
  },
  {
    "href": "index.html#getting-started",
    "title": "Welcome to Quarto",
    "section": "Getting Started",
    "text": "See Basic Usage to learn the core mechanics of rendering markdown from the command line as well as how to specify different document formats.\nSee the article on Jupyter and Knitr to learn more about creating computational documents with Quarto.\nAuthoring Tools covers using Jupyter Lab, RStudio, or other text editors to author Quarto documents.\nIf you are creating HTML output, see the articles on HTML Extensions, HTML w/ Bootstrap, and the HTML Theming System.\nAdvanced features of Quarto are covered in these articles:\n\nQuarto Projects covers how to share YAML metadata options across documents and render all of the documents in directory with a single command. Creating a Website and Creating a Book describe some special project types.\n\n\n\nCallout Blocks outlines how to emphasize blocks of content (e.g. tips, notes, warning, etc.)\nCross References describes how to create numbered references to figures, tables, equations, sections, listings, etc.\nFigures and Layout documents Quarto’s layout primitives for creating figure panels, side-by-side tables, etc.\nPDFs and LaTeX explains automatic TeX package installation as well as how to install and use TinyTeX."
  },
  {
    "href": "quarto-projects.html#project-basics",
    "title": "Quarto Projects",
    "section": "Project Basics",
    "text": "Quarto projects are directories that provide:\n\nA way to render all or some of the files in a directory with a single command (e.g. quarto render myproject).\nA way to share YAML configuration across multiple documents.\nThe ability to redirect output artifacts to another directory.\nThe ability to freeze rendered output (e.g. don’t re-execute an .Rmd or .ipynb) either unqualified or tied to the content of the source file (via hash).\n\nIn addition, projects can have special “types” that introduce additional behavior (e.g. websites or books)."
  },
  {
    "href": "quarto-projects.html#creating-projects",
    "title": "Quarto Projects",
    "section": "Creating Projects",
    "text": "Use the quarto create-project command to create a new project. If you have an existing directory of documents that you want to treat as a project just invoke create-project with no arguments from within the directory:\n$ quarto create-project\nTo create a project in a new directory just provide a directory name on the command line:\n$ quarto create-project myproject"
  },
  {
    "href": "quarto-projects.html#shared-metadata",
    "title": "Quarto Projects",
    "section": "Shared Metadata",
    "text": "When you create a project, a _quarto.yml config file is created. Here is an example of what the _quarto.yml file might look like:\nproject:\n  output-dir: _output\n\ntoc: true\nnumber-sections: true\nbibliography: references.bib  \n  \nformat:\n  html:\n    css: styles.css\n    html-math-method: katex\n  pdf:\n    documentclass: report\n    margin-left: 30mm\n    margin-right: 30mm\nAny document rendered within the project directory will automatically inherit the metadata defined at the project level.\nNote that the project file contains both global options that apply to all formats (e.g. toc and bibliograph) as well as format-specific options."
  },
  {
    "href": "quarto-projects.html#rendering-projects",
    "title": "Quarto Projects",
    "section": "Rendering Projects",
    "text": "You can render files within a project either one-by-one or all at once (in either case, shared project metadata will be used).\nTo render all of the documents within a project, just use quarto render within the project directory (or target a specific directory with a command line argument):\n$ quarto render # render current dir\n$ quarto render myproject\nNote that when rendering an entire project, command line arguments you pass to quarto render will be used for each file in the project. For example. this command will render each document in a project as a PDF:\n$ quarto render --to pdf\n$ quarto render myproject --to pdf\nIf you are working with Quarto from R, you can also render a project from the R console using the quarto R package.\nlibrary(quarto)\nquarto_render(\"document.Rmd\")"
  },
  {
    "href": "quarto-projects.html#render-targets",
    "title": "Quarto Projects",
    "section": "Render Targets",
    "text": "By default, all valid Quarto input files (.Rmd, .ipynb, .md) in the project directory will be rendered, save for ones with a file or directory prefix of . (hidden files) or _ (typically used for non top-level files, e.g. ones included in other files).\nIf you don’t want to render all of the target documents in a project, or you wish to control the order of rendering more precisely, you can add a project: render: [files] entry to your project metadata. For example:\nproject:\n  name: myproject\n  render:\n    - section1.md\n    - section2.md\nNote that you can use wildcards when defining the render list. For example:\nproject:\n  name: myproject\n  render:\n    - section*.md"
  },
  {
    "href": "quarto-projects.html#working-dir",
    "title": "Quarto Projects",
    "section": "Working Dir",
    "text": "By default, the working directory for rendering files within a project is the directory of the file itself. If you prefer to use the main project directory instead, you can add the execute-dir option to your config:\nproject:\n  type: site\n  execute-dir: project\nNote that you can always determine the location of the currently executing Quarto project using the QUARTO_PROJECT_DIR environment variable."
  },
  {
    "href": "quarto-projects.html#execution",
    "title": "Quarto Projects",
    "section": "Execution",
    "text": "Rendering a list of input files has the potential to quite time consuming depending on the computations required. There are a number of techniques you can use to minimize the time required to rebuild a site that has expensive computations.\n\nFreeze\nYou can use the freeze option to denote that computational documents should never be re-rendered, or alternatively only be re-rendered when their source file changes:\nexecute:\n  freeze: true  # never re-render\nexecute:\n  freeze: auto  # re-render only when source changes\n\n\nCache\nYou can use the cache option to cache the results of computations (using the knitr cache for Rmd documents, and Jupyter Cache for .ipynb or Jupyter Markdown documents):\nexecute:\n  cache: true\nNote that cache invalidation is triggered by changes in chunk source code (or other cache attributes you’ve defined). You may however need to manually refresh the cache if you know that some other input (or even time) has changed sufficiently to warrant an update. To do this, render either individual files or an entire project using the --cache-refresh option:\n$ quarto render mydoc.Rmd --cache-refresh # single doc\n$ quarto render --cache-refresh           # entire project\n\n\nNo Execute\nFinally, if you are using Jupyter Notebooks as inputs, you may prefer to execute all code within interactive notebook sessions, and never have Quarto execute the code cells:\nexecute:\n  eval: false\nWhen rendering .ipynb files with Quarto, eval: false is the default behavior (it’s assumed that you want to only execute cells in the Notebook UI). To always execute the cells in your .ipynb just do this:\nexecute:\n  eval: true"
  },
  {
    "href": "quarto-projects.html#project-types",
    "title": "Quarto Projects",
    "section": "Project Types",
    "text": "There are a couple of special project types available:\n\nWebsites includes additional navigational elements (e.g. navbar/sidebar/etc.) and copy all output files to a deployment directory (e.g. _site) by default.\nBooks support combineing all of the included documents into a single manuscript (e.g. a PDF or EPUB) as well as creating a book website from the same source documents."
  },
  {
    "href": "pdf-basics.html",
    "title": "PDF Basics",
    "section": "",
    "text": ""
  },
  {
    "href": "presentations.html",
    "title": "Presentations",
    "section": "",
    "text": ""
  },
  {
    "href": "using-jupyter-lab.html",
    "title": "Using Jupyter Lab",
    "section": "",
    "text": ""
  },
  {
    "href": "cross-references.html#overview",
    "title": "Cross References",
    "section": "Overview",
    "text": "Cross-references make it easier for readers to navigate your document by providing numbered references and hyperlinks to various entities like figures and tables. Every cross-referenceable entity requires a label (unique identifier) and caption (description). For example, this is a cross-referenceable figure:\n![Elephant](elephant.png){#fig-elephant}\nThe presence of the caption (Elephant) and label (#fig-elephant) make this figure referenceable. This enables you to use the following syntax to refer to it elsewhere in the document:\nSee @fig-elephant for an illustration.\nHere is what this would look like rendered to HTML:\n\nQuarto enables you to create cross-references to figures, tables, equations, sections, code listings, theorems, proofs, and more. Cross references can also be applied to dynamic output from knitr and Jupyter. The inline reference text (“fig. 1” in the above example) can also be customized (e.g. “figure 1” rather than the abbreviation).\nQuarto’s syntax for cross-references is based on pandoc-crossref (which is in turn based on this discussion: https://github.com/jgm/pandoc/issues/813). In addition, Quarto includes support for referencing raw HTML and LaTeX figures and tables, as well as referencing theorems and proofs."
  },
  {
    "href": "cross-references.html#figures",
    "title": "Cross References",
    "section": "Figures",
    "text": "As described above, this is the markdown used to create a cross-referenceable figure and then refer to it:\n![Elephant](elephant.png){#fig-elephant}\n\nSee @fig-elephant for an illustration.\n\nSubfigures\nYou may want to create a figure composed of multiple subfigures. To do this, enclose the figures in a div (with it’s own label and caption) and give each subfigure it’s own label and caption. You can then refer to either the entire figure in a reference or a single subfigure:\n::: {#fig-elephants layout.ncol=2}\n\n![Surus](surus.png){#fig-surus}\n\n![Hanno](hanno.png){#fig-hanno}\n\nFamous Elephants\n:::\n\nSee @fig-elephants for examples. In particular, @fig-hanno.\nHere is what this looks like when rendered as HTML:\n\nNote that we also used the layout.ncol attribute to specify a two-column layout. See the article on Figures and Layout for more details on laying out panels of figures.\n\n\nJupyter\nFigures produced by Jupyter and knitr can also be cross-referenced.\nTo reference figure output from a Jupyter code cell, add the label attribute to provide an identifier, and the fig.cap attribute to provide a caption. For example:\n```python label=\"#fig-plot\" fig.cap=\"Plot\"\nimport matplotlib.pyplot as plt\nplt.plot([1,23,2,4])\nplt.show()\n```\n\nFor example, see @fig-plot.\n\nYou can also create multiple figures within a Jupyter code cell and reference them as subfigures. To do this use fig.cap for the main caption, and fig.subcap to provide an array of subcaptions. For example:\n```python label=\"#fig-plots\" fig.cap=\"Plots\" fig.subcap=[\"Plot 1\",\"Plot 2\"] layout.ncol=2\nimport matplotlib.pyplot as plt\nplt.plot([1,23,2,4])\nplt.show()\n\nplt.plot([8,65,23,90])\nplt.show()\n```\n\nSee @fig-plots for examples. In particular, @fig-plots-2.\n\nNote that subfigure reference labels are created automatically based on the main chunk label (e.g. @fig-plots-1, @fig-plots-2, etc.).\n\n\nknitr\nTo reference figure output from a knitr code chunk, add a #fig- chunk label along with the fig.cap attribute:\n::: {.cell fig.alt='{}'}\n\n```{.r .cell-code}\nplot(cars)\n```\n\n::: {.cell-output-display}\n![Plot](cross-references_files/figure-html/fig-plot-1.png){#fig-plot width=672}\n:::\n:::\n\nFor example, see @fig-plot.\n\nYou can also create multiple figures within a knitr code chunk and reference them as subfigures. To do this use fig.cap for the main caption, and fig.subcap to provide a vector of subcaptions. For example:\n::: {#fig-plots .cell layout.ncol='2' layout.ncol='2' fig.alt='{}'}\n\n```{.r .cell-code}\nplot(cars)\nplot(pressure)\n```\n\n::: {.cell-output-display}\n![Plot 1](cross-references_files/figure-html/fig-plots-1.png){#fig-plots-1 width=672}\n:::\n\n::: {.cell-output-display}\n![Plot 2](cross-references_files/figure-html/fig-plots-2.png){#fig-plots-2 width=672}\n:::\n\nPlots\n:::\n\nSee @fig-plots for examples. In particular, @fig-plots-2.\n```\n\nNote that subfigure reference labels are created automatically based on the main chunk label (e.g. @fig-plots-1, @fig-plots-2, etc.)."
  },
  {
    "href": "cross-references.html#tables",
    "title": "Cross References",
    "section": "Tables",
    "text": "To create a cross-referenceable table, add a caption to the table then include a #tbl- label in braces at the end of the caption. For example:\n| Col1 | Col2 | Col3 |\n|------|------|------|\n| A    | B    | C    |\n| E    | F    | G    |\n| A    | G    | G    |\n\n: My Caption {#tbl-letters}\n\nSee @tbl-letters.\n\nYou may want to create a composition of several sub-tables. To do this, create a div with a main identifier, then apply sub-identifiers within the caption of contained tables. For example:\n::: {#tbl-panel layout.ncol=2}\n| Col1 | Col2 | Col3 |\n|------|------|------|\n| A    | B    | C    |\n| E    | F    | G    |\n| A    | G    | G    |\n\n: First Table {#tbl-first}\n\n| Col1 | Col2 | Col3 |\n|------|------|------|\n| A    | B    | C    |\n| E    | F    | G    |\n| A    | G    | G    |\n\n: Second Table {#tbl-second}\n\nMain Caption\n:::\n\nSee @tbl-panel for details, especially @tbl-second.\n\nNote that the “Main Caption” for the table is provided as the last block within the containing div.\n\nJupyter and knitr\nYou can also cross-reference tables created from code executed via knitr or Jupyter. To do this, add a tbl.cap attribute and include #tbl- labels within the captions of the sub-tables. For example:\n::: {#tbl-tables .cell layout.ncol='2' tbl.cap='Tables' layout.ncol='2' fig.alt='{}'}\n\n```{.r .cell-code}\nlibrary(knitr)\nkable(head(cars), caption = \"Cars {#tbl-cars}\")\n```\n\n::: {.cell-output-display}\nTable: Cars {#tbl-cars}\n\n| speed| dist|\n|-----:|----:|\n|     4|    2|\n|     4|   10|\n|     7|    4|\n|     7|   22|\n|     8|   16|\n|     9|   10|\n:::\n\n```{.r .cell-code}\nkable(head(pressure), caption = \"Pressure {#tbl-pressure}\")\n```\n\n::: {.cell-output-display}\nTable: Pressure {#tbl-pressure}\n\n| temperature| pressure|\n|-----------:|--------:|\n|           0|   0.0002|\n|          20|   0.0012|\n|          40|   0.0060|\n|          60|   0.0300|\n|          80|   0.0900|\n|         100|   0.2700|\n:::\n\nTables\n:::"
  },
  {
    "href": "cross-references.html#equations",
    "title": "Cross References",
    "section": "Equations",
    "text": "Provide an #eq- label immediately after an equation to make it referenceable. For example:\nBlack-Scholes (@eq-black-scholes) is a mathematical model that seeks to explain the behavior of financial derivatives, most commonly options:\n\n$$\n\\frac{\\partial \\mathrm C}{ \\partial \\mathrm t } + \\frac{1}{2}\\sigma^{2} \\mathrm S^{2}\n\\frac{\\partial^{2} \\mathrm C}{\\partial \\mathrm C^2}\n  + \\mathrm r \\mathrm S \\frac{\\partial \\mathrm C}{\\partial \\mathrm S}\\ =\n  \\mathrm r \\mathrm C \n$$ {#eq-black-scholes}\n\nNote that the equation number is included (via \\qquad) in the right margin of the equation."
  },
  {
    "href": "cross-references.html#sections",
    "title": "Cross References",
    "section": "Sections",
    "text": "To reference a section, add a #sec- identifier to any heading. For example:\n## Introduction {#sec-introduction}\n\nSee @sec-introduction for additional context.\nNote that when using section cross-references, you will also need to enable the number-sections option (so that section numbering is visible to readers). For example:\n---\ntitle: \"My Document\"\nnumber-sections: true\n---"
  },
  {
    "href": "cross-references.html#code-listings",
    "title": "Cross References",
    "section": "Code Listings",
    "text": "To create a referenceable code block, add a #lst- identifier along with a lst.cap attribute. For example:\n```{#lst-customers .sql lst.cap=\"Customers Query\"}\nSELECT * FROM Customers\n```\n\nThen we query the customers database (@lst-customers)."
  },
  {
    "href": "cross-references.html#theorems-and-proofs",
    "title": "Cross References",
    "section": "Theorems and Proofs",
    "text": "Theorems are commonly used in articles and books in mathematics. To include a reference-able theorem, create a div with a #thm: label (or one of other theorem-type labels described below). You also need to specify a theorem name either via a heading or the name attribute. You can include any content you like within the div. For example:\n::: {#thm-line}\n## Line\n\nThe equation of any straight line, called a linear equation, can be written as:\n\n$$\ny = mx + b\n$$\n:::\n\nSee @thm-line.\n\nFor LaTeX output, the amsthm package is used for typesetting theorems. For other formats an appropriate treatment is used (the above is an example of HTML output).\nThere are a number of theorem variations supported, each with their own label prefix:\n\n\n\nLabel Prefix\nPrinted Name\nLaTeX Environment\n\n\n\n\n#thm-\nTheorem\ntheorem\n\n\n#lem-\nLemma\nlemma\n\n\n#cor-\nCorollary\ncorollary\n\n\n#prp-\nProposition\nproposition\n\n\n#cnj-\nConjecture\nconjecture\n\n\n#def-\nDefinition\ndefinition\n\n\n#exm-\nExample\nexample\n\n\n#exr-\nExercise\nexercise\n\n\n\nThe proof, remark, and solution environments generally receive similar typesetting as theorems, however they are not numbered (and therefore cannot be cross-referenced). To create these environments just use them as the class name of a div:\n::: {.solution}\nThe solution.\n:::\nAs with theorems you can optionally include a heading as the first element of the div (or a name attribute) to give the environment a caption for typesetting (this typically appears in parentheses after the environment title).\nFor LaTeX output the amsthm package is used to typeset these environments. For other formats a similar treatment is used, but you can further customizing this using CSS."
  },
  {
    "href": "cross-references.html#references",
    "title": "Cross References",
    "section": "References",
    "text": "The examples above have all used the default syntax for inline references (e.g. @fig-elephant), which results in the use a short abbreviation for each object type (e.g. “fig. 1,” “tbl. 1,” etc.).\nYou can customize the appearance of inline references by either changing the syntax of the inline reference or by setting options. Here are the various ways to compose a cross-reference and their resulting output:\n\n\n\nType\nSyntax\nOutput\n\n\n\n\nDefault\n@fig-elephant\nfig. 1\n\n\nCapitalized\n@fig-elephant\nFig. 1\n\n\nCustom Prefix\n[Figure @fig-elephant]\nFigure 1\n\n\nNo Prefix\n-@fig-elephant\n1\n\n\n\nYou can also group cross references using the following syntax:\nAs illustrated in [@fig-elephant; @fig-panther; @fig-rabbit].\nThere are a number of options that can be used to further customize the treatment of cross-references. See the section below on References Options for additional details."
  },
  {
    "href": "cross-references.html#chapter-numbering",
    "title": "Cross References",
    "section": "Chapter Numbering",
    "text": "You can use the crossref: chapters option to indicate that top-level headings (H1) in your document correspond to chapters, and that cross-references should be sub-numbered by chapter. For example:\n---\ntitle: \"My Document\"\nauthor: \"Jane Doe\"\ncrossref:\n  chapters: true\n---\n\n# Introduction\n\n![Elephant](elephant.png){#fig-elephant}\n\nSee @fig-elephant for an illustration.\n\nNote that the crossref: chapters option does not have any effect of PDF/LaTeX output (since LaTeX implements it’s own cross reference numbering scheme)."
  },
  {
    "href": "cross-references.html#lists",
    "title": "Cross References",
    "section": "Lists",
    "text": "For LaTeX / PDF output, you can use the raw LaTeX commands \\listoffigures, \\listoftables and \\listoflistings to produce listings of all figures, tables, etc. within a document. You can use the lof-title, lot-title, and lol-title crossref options to customize the title of the listing.\nFor example:\n---\ntitle: \"My Document\"\ncrossref:\n  lof-title: \"List of Figures\"\nformat: pdf\n---\n\n\\listoffigures\nNote that the default titles for the lists use the form displayed above (i.e. “List of…<Type>”)."
  },
  {
    "href": "cross-references.html#options",
    "title": "Cross References",
    "section": "Options",
    "text": "There are a wide variety of options available for customizing caption labels and references. These options are all specified within the crossref key of document metadata.\n\nTitles\nYou can specify the title prefix used for captions using *-title options. You can also specify the delimiter used between the prefix and the caption using the title-delim option. For example:\n---\ntitle: \"My Document\"\ncrossref:\n  fig-title: Fig     # (default is \"Figure\")\n  tbl-title: Tbl     # (default is \"Table\")\n  title-delim: —     # (default is \":\")\n---\n\n\nReferences\nYou can specify the prefix used for inline reference type using *-prefix options. You can also specify whether references should be hyper-linked using the ref-hyperlink option. For example:\n---\ntitle: \"My Document\"\ncrossref:\n  fig-prefix: figure   # (default is \"fig.\")\n  tbl-prefix: table    # (default is \"tbl.\")\n  ref-hyperlink: false # (default is true)\n---\n\n\nNumbering\nThere are a variety of numbering schemes available for cross-references, including:\n\narabic (1, 2, 3)\nroman (I, II, III, IV)\nroman i (i, ii, iii, iv)\nalpha x (start from letter ‘x’)\nalpha X (start from letter ‘X’)\n\nYou can specify the number scheme used for all types (other than sub-references) using the labels option. For sub-references (e.g. subfigures), you can specify the number scheme using the subref-labels option. For example:\n---\ntitle: \"My Document\"\ncrossref:\n  labels: alpha a        # (default is arabic)\n  subref-labels: roman i # (default is alpha a)\n---\nIf you would like, you can specify the number scheme for a specific type using the *-labels options. For example:\n---\ntitle: \"My Document\"\ncrossref:\n  fig-labels: alpha a    # (default is arabic)\n  tbl-labels: alpha a    # (default is arabic)\n  subref-labels: roman i # (default is alpha a)\n---\nIf both labels and a type specific label option is provided, the type specific option will override the labels option."
  },
  {
    "href": "formatting.html",
    "title": "Basic Formatting",
    "section": "",
    "text": ""
  },
  {
    "href": "book-authoring.html#book-structure",
    "title": "Book Authoring",
    "section": "Book Structure",
    "text": "The structure of a Quarto book can be as simple as a list of chapters, or can alternatively incorporate multiple parts and/or appendices. Quarto book chapters and sections are automatically numbered (for cross-referencing), however you can also specify that some parts of the book should remain unnumbered.\nThe simple book configuration generated by quarto create-project illustrates the basics:\nbook:\n  title: \"mybook\"\n  author: \"Jane Doe\"\n  date: \"5/9/2021\"\n  chapters:\n    - index.md\n    - intro.md\n    - summary.md\n    - references.md\n\nThe index file is required and includes preface, acknowledgements, etc. Content in the index file is unnumbered.\nThe remainder of chapters includes one or more book chapters.\nThe references.md file will include the generated bibliography (see References below for details).\n\n\nFormat Options\nIf you want to specify rendering options (including format-specific options), you do it within the _quarto.yml project file rather than within the individual markdown documents. For example:\nhighlight-style: pygments\nbibliography: references.bib\ncsl: citestyle.csl\n\nformat:\n  html:\n    theme: cosmo\n    code-copy: true\nThis is because when rendering a book all of the chapters are combined together into a single document (with a single set of format options).\n\n\nChapter Titles\nSince rendering options are provided in _quarto.yml, you’ll typically see a simple level-one header at the top of chapters. For example:\n# Introduction\nAs compared to typical Quarto documents where you’d see something like this:\n---\ntitle: \"Introduction\"\n---\n\n\n\n\n\n\nNote that you will see the following YAML front matter in files generated by quarto create-project:\n---\nknit: quarto render\n---\nThis YAML metadata is provided per-file in order to instruct RStudio to use Quarto (as opposed to the rmarkdown package) to render the document. This metadata won’t be required once RStudio can correctly recognize Quarto documents/projects.\n\n\n\n\n\nChapter Numbers\nAll chapters are numbered by default. If you want a chapter to be unnumbered simply add the .unnumbered class to it’s main header. For example:\n# Resources {.unnumbered}\nYou can mix together numbered and unnumbered chapters. Note however that while you can link to unnumbered chapters, you can’t cross reference figures, tables, etc. within them. Unnumbered chapters are therefore mostly useful for prefatory content or references at the end of your book.\n\n\nSection Numbers\nYou can set the numbering depth via the number-depth option. For example, to only number sections immediately below the chapter level, use this:\nnumber-depth: 1\nNote that toc-depth is independent of number-depth (i.e. you can have unnumbered entries in the TOC if they are masked out from numbering by number-depth).\n\n\nCover Images\nYou can provide a cover image for EPUB and/or HTML formats using the cover-image option. For example:\nbook:\n  cover-image: cover.png\nYou can also do this on a per-format basis (if for example you want to provide a higher resolution image for EPUB and a lower resolution image for HTML to reduce download time). For example:\nformat:\n   html: \n     cover-image: cover.png\n   epub:\n     cover-image: cover-highres.png\n\n\nReferences\nYou should include a div with the id #refs at the location in your book where you’d like the bibliography to be generated. For example the references.md file generated by quarto create-project includes this:\n# References {.unnumbered}\n\n::: {#refs}\n:::\nNote that you can change the chapter title to whatever your like, remove .unnumbered to have it be numbered like other chapters, and add other content before or after the bibliography as necessary.\n\n\nParts & Appendices\nYou can divide your book into parts using part within the book chapters. For example:\nchapters:\n  - index.md\n  - preface.md\n  - part: dice.md\n    chapters: \n      - basics.md\n      - packages.md\n  - part: cards.md\n    chapters:\n      - objects.md\n      - notation.md\n      - modifying.md\n      - environments.md\nNote that the markdown files dice.md and cards.md contain the part title (as a level one header) as well as some introductory content for the part. If you just need a part title then you can alternatively use this syntax:\n- part: \"Dice\"\n  chapters: \n    - basics.md\n    - packages.md\nYou can include appendices by adding an appendices key to your book config. For example:\nbook:\n  title: \"mybook\"\n  author: \"Jane Doe\"\n  date: \"5/9/2021\"\n  chapters:\n    - index.md\n    - intro.md\n    - summary.md\n    - references.md\n  appendices:\n    - tools.md\n    - resources.md\n  \nParts and appendices show up like this in HTML output:\n\nIn LaTeX output, the \\part command is used for parts. In EPUB and MS Word output parts are ignored entirely.\nAppendices are numbering using uppercase alpha, and have a prefix inserted into their title to indicate they are an appendix (e.g. “Appendix A — Additional Resources”). You can customize the prefix and delimiter using the following options:\ncrossref:\n  appendix-title: \"App.\"\n  appendix-delim: \":\"\nWhich would result in the above example being out out as: “App. A: Additional Resources.”"
  },
  {
    "href": "book-authoring.html#reader-tools",
    "title": "Book Authoring",
    "section": "Reader Tools",
    "text": "Sidebar Tools\nBooks automatically include a navigational sidebar that can optionally include tools for searching book contents, sharing links to the book, etc. Here is an example _quarto.yml file that enables these options:\nbook:\n  title: \"Hands-On Programming with R\"\n  author: \"Garrett Grolemund\"\n  search: true\n  repo-url: https://github.com/jjallaire/hopr/\n  repo-actions: [edit]\n  downloads: [pdf, epub]\n  sharing: [twitter, facebook]\n  \ncomments:\n  hypothesis: true\nNote the various tools that now appear:\n\n\nThe search box enables full text search of the entire book\nThe buttons immediately below the book title in the sidebar provide a link to the GitHub repo for the book, downloads for PDF and ePub versions of the book, and links for sharing the book on Twitter and Facebook.\nImmediately below the table of contents on the right there is an “Edit this page” link that takes the reader to the edit interface on GitHub for the current chapter. Note that in this example we specify repo-actions: [edit]. You can optionally also add issue and source actions (e.g. repo-actions: [edit, issue, source]).\nThe Hypothesis commenting bar appears on the far right of the page. Note that commenting is a feature available for all Quarto HTML output so appears in it’s own YAML key.\n\n\nSidebar Options\nNote that books utilize the standard sidebar component from Quarto Websites. This means that you can use any of the available sidebar options within your book configuration. For example, here we specify a docked sidebar with a light background:\nbook:\n  title: \"Hands-On Programming with R\"\n  author: \"Garrett Grolemund\"\n  sidebar:\n    style: docked\n    background: light\n\n\n\nFooter Content\nYou can also use the attribution and page-navigation options to customize book chapter footer:\n\n\n\n\n\n\n\nOption\nDescription\n\n\n\n\nattribution\nAttribution text (e.g. copyright and/or creative commons license) to display at the bottom of book chapters.\n\n\npage-navigation\nProvide navigation to previous and next book chapters (defaults to true)."
  },
  {
    "href": "book-authoring.html#cross-references",
    "title": "Book Authoring",
    "section": "Cross References",
    "text": "One important difference between creating a website and a book is that in addition to their web output, books are also rendered as a single contiguous document (e.g a PDF). Books also may or may not be read digitally (which means that internal hyperlinks may or may not be available).\nTo create books that are consumable in all of these mediums, special care should be taken when creating links to other chapters or sections within chapters (note though that if your book targets only HTML output you can feel free to use conventional hyperlinks).\nNote that if you aren’t already familiar with Quarto Cross References you may want to do so before reading on.\n\nChapters and Sections\nTo make a chapter or section reference-able, you should add a #sec id to it’s main heading. For example:\n# Introduction {#sec:introduction}\nYou can then refer to the chapter or section in one of two ways. To create a normal hyperlink, just use the #sec id:\nSee the [Introduction](#sec:introduction)\nHowever, if you expect that your book will be read in print, just providing the chapter name isn’t all that helpful. Here you’ll want to make a numeric reference (e.g. “see Chapter 4” or “see sec. 4.3”). To refer to a section, just include a cross-reference to it:\nSee @sec:geospatial-analysis for additional discussion.\nTo refer to a chapter or appendix you should spell out “Chapter” or “Appendix” and use the number-only form of cross reference:\nSee [Chapter -@sec:visualization] for more details on visualizing model diagnostics.\n\n\nChapter Numbering\nIn books, figures, tables and other cross-reference targets automatically include a chapter number. For example, the following markdown located in Chapter 3 of your book:\nAs illustrated in @fig:geo-comparison, the western states have a much higher incidence of forest fires.\nMight be rendered as:\n\nAs illustrated in fig. 3.2, the western states have a much higher incidence of forest fires.\n\nNote that while books do support unnumbered chapters, you naturally cannot create cross-references to content in chapters without numbers.\n\n\nSection Numbers\nBy default, all headings in your document create a numbered section. You customize numbering depth using the number-depth option. For example, to only number sections immediately below the chapter level, use this:\nnumber-depth: 1\nNote that toc-depth is independent of number-depth (i.e. you can have unnumbered entries in the TOC if they are masked out from numbering by number-depth)."
  },
  {
    "href": "book-authoring.html#code-execution",
    "title": "Book Authoring",
    "section": "Code Execution",
    "text": "As with standalone Quarto documents, book chapters can be either plain markdown or use computational markdown (via knitr or Jupyter). However, if you have expensive computations in one or more of your chapters this can make the time required to render the entire book unacceptably long. Quarto has a few different tools you can use to overcome this problem.\n\nIncremental Render\nWhen developing a book you are typically rendering only a single chapter to preview what it will look like. Quarto renders chapters incrementally, so for example if you are working on a PDF book and you render chapter 5, you’ll still get a preview of the entire book but with only the chapter 5 changes (the other chapters automatically use previously rendered versions).\n\n\nFreezing\nYou can use the freeze option to denote that computational documents should never be re-rendered, or alternatively only be re-rendered when their source file changes:\nfreeze: true  # never re-render\nfreeze: auto  # re-render only when source changes\nNote that you’ll still want to take care to fully re-render your book when things outside of source code change (e.g. input data). You can remove previously frozen output by deleting the _freeze folder at the root of your book project.\n\n\nCaching\nYou can use the cache option to cache the results of computations (using the knitr cache for Rmd documents, and Jupyter Cache for .ipynb or Jupyter Markdown documents):\ncache: true\nNote that cache invalidation is triggered by changes in chunk source code (or other cache attributes you’ve defined). You may however need to manually refresh the cache if you know that some other input (or even time) has changed sufficiently to warrant an update. To do this, render either individual files or an entire project using the --cache-refresh option:\n$ quarto render mydoc.Rmd --cache-refresh # single doc\n$ quarto render --cache-refresh           # entire project\n\n\nNo Execute\nFinally, if you are using Jupyter Notebooks as inputs, you may prefer to execute all code within interactive notebook sessions, and never have Quarto execute the code cells:\nexecute: false\nYou can specify this option either globally or per-notebook."
  },
  {
    "href": "book-authoring.html#book-output",
    "title": "Book Authoring",
    "section": "Book Output",
    "text": "Location\nBy default, book output is written to the _book directory of your project. You can change this via the output-dir project option. For example:\nproject:\n  type: book\n  output-dir: docs\nSingle file outputs like PDF, EPUB, etc. are also written to the output-dir. Their file name is derived from the book title. You can change this via the output-file option:\nbook:\n  title: \"My Book\"\n  output-file: \"my-book\"\nNote that the output-file should not have a file extension (that will be provided automatically as appropriate for each format).\n\n\nLaTeX Output\nIn some cases you’ll want to do customization of the LaTeX output before creating the final printed manuscript (e.g. to affect how text flows between pages or within and around figures). The best way to approach this is to develop your book all the way to completion, then render with the keep-tex option:\nformat:\n  pdf:\n    keep-tex: true\nThe complete LaTeX source code of your book will be output into the main book source directory (e.g. to “my-book.tex”). This LaTeX can be compiled without Quarto, so is suitable for submitting to an external publisher.\nAt this point you should probably make a copy of the book directory to perform your final LaTeX modifications within (since the modifications you make to LaTeX will not be preserved in your markdown source, and will therefore be overwritten the next time you render)."
  },
  {
    "href": "book-authoring.html#custom-styles",
    "title": "Book Authoring",
    "section": "Custom Styles",
    "text": "While the default book output is reasonably attractive for all formats, you may want to provide additional customization.\n\nHTML\nHTML output can be customized either by adding (or enhancing) a custom theme, or by providing an ordinary CSS file. Use the theme option to specify a theme:\nformat:\n  html:\n    theme: cosmo\nTo further customize a theme add a custom theme file:\nformat:\n  html:\n    theme: [cosmo, theme.scss]\nYou can learn more about creating theme files in the documentation on HTML Themes.\nYou can also just use plain CSS. For example:\nformat:\n  html:\n    css: styles.css\n\n\nEPUB\nYou can also use CSS to customize EPUB output:\nformat:\n  epub:\n    css: epub-styles.css\n    epub-cover-image: epub-cover.png\nNote that we also specify a cover image. To learn more about other EPUB options, see the Pandoc documentation on EPUBs.\n\n\nPDF / LaTeX\nYou can include additional LaTeX directives in the preamble of your book using the include-in-header option. You can also add documentclass and other options (see the Pandoc documentation on LaTeX options for additional details). For example:\nformat:\n  pdf: \n    documentclass: book\n    include-in-header: preamble.tex\n    fontfamily: libertinus\nNote that Quarto books use documentclass: report by default. You can switch to book as demonstrated above. You can find a summary of the differences between book and report here: https://tex.stackexchange.com/questions/36988\n\n\nMS Word\nYou can customize MS Word output by creating a new reference doc, and then applying it to your book as follows:\nformat:\n  docx:\n    reference-doc: custom-reference.docx\nTo create a new reference doc based on the Pandoc default, execute the following command:\n$ pandoc -o custom-reference.docx --print-default-data-file reference.docx\nThen, open custom-reference.docx in MS Word and modify styles as you wish:\n\n\n\nYou can open the Styles pane from the HOME tab in the MS Word toolbar.\n\n\nWhen you move the cursor to a specific element in the document, an item in the styles list will be highlighted. If you want to modify the style of any type of element, you can click the drop-down menu on the highlighted item, and you will see a dialog box like this:\n\nAfter you finish modifying the styles, you can save the document and use it as the template for future Word documents."
  },
  {
    "href": "figures-and-layout.html#pandoc-figures",
    "title": "Figures and Layout",
    "section": "Pandoc Figures",
    "text": "![Elephant](elephant.png)\nThis results in the following treatment for various output types:\n\n\n\nHTML\nPDF\nWord\n\n\n\n\n\n\n\n\n\n\nNote that for LaTeX / PDF output figures are automatically numbered (you can arrange for figures to be numbered in other formats using Cross References)."
  },
  {
    "href": "figures-and-layout.html#linked-figures",
    "title": "Figures and Layout",
    "section": "Linked Figures",
    "text": "When rendering with Quarto, you can enclose a figure within a link and it will still be treated within output as a captioned figure. For example:\n[![Elephant](elephant.png)](https://en.wikipedia.org/wiki/Elephant)"
  },
  {
    "href": "figures-and-layout.html#figure-alignment",
    "title": "Figures and Layout",
    "section": "Figure Alignment",
    "text": "Figures and their captions are center aligned by default. Add the fig.align attribute to the image to use a different alignment. For example:\n![Elephant](elephant.png){fig.align=\"left\"}"
  },
  {
    "href": "figures-and-layout.html#latex-environments",
    "title": "Figures and Layout",
    "section": "LaTeX Environments",
    "text": "There are a number of LaTeX packages that provide custom figure environments. For example, the mdframed package includes an mdframed environment used to enclose figures in a special border style. By default, Quarto uses the standard figure environment, but you can use the fig.env attribute to specify a custom one. For example:\n---\ntitle: \"Sidenotes\"\nformat:\n  pdf:\n    header-includes: |\n      \\usepackage{sidenotes}\n---\n\n![Elephant](elephant.png){fig.env=\"marginfigure\"}"
  },
  {
    "href": "figures-and-layout.html#figure-divs",
    "title": "Figures and Layout",
    "section": "Figure Divs",
    "text": "You can treat any markdown content you want as a figure by enclosing it in Pandoc div block with an identifier prefaced with #fig:. For example, here we create a figure that includes an embedded iframe:\n::: {#fig:elephant}\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/SNggmeilXDQ\"></iframe>\n\nElephant\n:::\nNote that the last paragraph in the div block is used as the figure caption."
  },
  {
    "href": "figures-and-layout.html#subfigures",
    "title": "Figures and Layout",
    "section": "Subfigures",
    "text": "If you have several figures that appear as a group, you can create a figure div to enclose them. For example:\n::: {#fig:elephants layout.ncol=2}\n\n![Surus](surus.png){#fig:surus}\n\n![Hanno](hanno.png){#fig:hanno}\n\nFamous Elephants\n:::\nAgain, the last paragraph provides the main caption, and the individual figures carry the sub-captions. Here is what this looks like when rendered as HTML:\n\nNote that we also used a layout.ncol attribute to specify a two-column layout. The next section delves more into customizing figure layouts."
  },
  {
    "href": "figures-and-layout.html#figure-panels",
    "title": "Figures and Layout",
    "section": "Figure Panels",
    "text": "Above we demonstrate laying out two side-by-side figures with subcaptions and a main caption. You may or may not want the caption / subcaption treatment, and you might also want to use multiple rows of figures. All of these variations are possible.\nTo layout two figures with their own standalone captions (and no main caption), just eliminate the #fig identifiers and main caption at the bottom:\n::: {layout.ncol=2}\n![Surus](surus.png)\n\n![Hanno](hanno.png)\n:::\n\nYou can also eliminate the captions entirely:\n::: {layout.ncol=2}\n![](surus.png)\n\n![](hanno.png)\n:::\n\nMultiple Rows\nIf you have more than 2 images, you might want to lay them out across multiple rows. You can do this using the layout.nrow attribute. For example:\n::: {layout.nrow=2}\n![Surus](surus.png)\n\n![Hanno](hanno.png)\n\n![Abdul Abbas](abdul-abbas.png)\n\n![Lin Wang](lin-wang.png)\n:::\n\nMore complex figure arrangements (e.g. rows with varying column layouts) are possible. See the Complex Layouts section below for more details."
  },
  {
    "href": "figures-and-layout.html#jupyter-and-knitr-figures",
    "title": "Figures and Layout",
    "section": "Jupyter and knitr Figures",
    "text": "Note that figure layout attributes also work for figures produced by knitr or Jupyter. For example, to show two plots emitted from a Jupyter code cell side-by-side you would do the following:\n```python layout.ncol=2\nimport matplotlib.pyplot as plt\nplt.plot([1,23,2,4])\nplt.show()\n\nplt.plot([8,65,23,90])\nplt.show()\n```\n\nTo show two plots emitted from a knitr code chunk side-by-side:\n::: {.cell layout.ncol='2' layout.ncol='2' fig.alt='{}'}\n\n```{.r .cell-code}\nplot(cars)\n```\n\n::: {.cell-output-display}\n![](figures-and-layout_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n\n```{.r .cell-code}\nplot(pressure)\n```\n\n::: {.cell-output-display}\n![](figures-and-layout_files/figure-html/unnamed-chunk-2-2.png){width=672}\n:::\n:::"
  },
  {
    "href": "figures-and-layout.html#table-panels",
    "title": "Figures and Layout",
    "section": "Table Panels",
    "text": "You can also use a div with layout attributes to display tables side-by-side. For example:\n::: {layout.ncol=2}\n| Col1 | Col2 | Col3 |\n|------|------|------|\n| A    | B    | C    |\n| E    | F    | G    |\n| A    | G    | G    |\n\n: First Table\n\n| Col1 | Col2 | Col3 |\n|------|------|------|\n| A    | B    | C    |\n| E    | F    | G    |\n| A    | G    | G    |\n\n: Second Table\n:::\n\nAs with figures, you can also present tables using numbered subcaptions by adding a main caption and #tbl: identifiers:\n::: {#tbl:panel layout.ncol=2}\n| Col1 | Col2 | Col3 |\n|------|------|------|\n| A    | B    | C    |\n| E    | F    | G    |\n| A    | G    | G    |\n\n: First Table {#tbl:first}\n\n| Col1 | Col2 | Col3 |\n|------|------|------|\n| A    | B    | C    |\n| E    | F    | G    |\n| A    | G    | G    |\n\n: Second Table {#tbl:second}\n\nMain Caption\n:::\n\nSee the article on Cross References for additional details on table captions, subcaptions, and numbering."
  },
  {
    "href": "figures-and-layout.html#jupyter-and-knitr-tables",
    "title": "Figures and Layout",
    "section": "Jupyter and knitr Tables",
    "text": "You can also use layout attributes for tables produced by knitr or Jupyter. For example, this Rmd code chunk creates side-by-side tables:\n::: {.cell layout.ncol='2' layout.ncol='2' fig.alt='{}'}\n\n```{.r .cell-code}\nlibrary(knitr)\nkable(head(cars), caption = \"Cars\")\n```\n\n::: {.cell-output-display}\nTable: Cars\n\n| speed| dist|\n|-----:|----:|\n|     4|    2|\n|     4|   10|\n|     7|    4|\n|     7|   22|\n|     8|   16|\n|     9|   10|\n:::\n\n```{.r .cell-code}\nkable(head(pressure), caption = \"Pressure\")\n```\n\n::: {.cell-output-display}\nTable: Pressure\n\n| temperature| pressure|\n|-----------:|--------:|\n|           0|   0.0002|\n|          20|   0.0012|\n|          40|   0.0060|\n|          60|   0.0300|\n|          80|   0.0900|\n|         100|   0.2700|\n:::\n:::"
  },
  {
    "href": "figures-and-layout.html#complex-layouts",
    "title": "Figures and Layout",
    "section": "Complex Layouts",
    "text": "The examples above used the layout.ncol or layout.nrow attributes to create straightforward layouts where all columns are of equal sizes. The layout attribute enables the creation of much more complex layouts.\nFor example, this defines a layout with two equally sized figures in the first row, then another image that spans the entire second row:\n::: {layout=\"[[1,1], [1]]\"}\n![Surus](surus.png)\n\n![Hanno](hanno.png)\n\n![Lin Wang](lin-wang.png)\n:::\n\nThe layout attribute is a 2-dimensional array where the first dimension defines rows and the second columns. In this case \"layout=\"[[1,1], [1]]\" translates to: create two rows, the first of which has two columns of equal size and the second of which has a single column.\nNote that the numbers in a row are arbitrary and don’t need to add up to a particular total. You can therefore use whatever scheme is most natural. For example, here we define columns that occupy varying percentage widths of the row:\n::: {layout=\"[[70,30], [100]]\"}\n![Surus](surus.png)\n\n![Hanno](hanno.png)\n\n![Lin Wang](lin-wang.png)\n:::\nYou can also use negative values to create space between elements. For example:\n::: {layout=\"[[40,-20,40], [100]]\"}\n![Surus](surus.png)\n\n![Hanno](hanno.png)\n\n![Lin Wang](lin-wang.png)\n:::\n\n\nVertical Alignment\nIf you have a layout with a row of images of differing heights, you can control their vertical alignment using the layout.valign attribute. A simple example:\n::: {layout=\"[25,-2,10]\" layout.valign=\"bottom\"}\n![Surus](surus.png)\n\n![Lin Wang](lin-wang.png)\n:::\n\nNote that vertical alignment isn’t limited to images, you can also vertically align any other elements that are included in a panel."
  },
  {
    "href": "figures-and-layout.html#jupyter-and-knitr-layout",
    "title": "Figures and Layout",
    "section": "Jupyter and knitr Layout",
    "text": "The layout works the same way for figures or tables produced by knitr or Jupyter. For example, here’s an Rmd code chunk that produces 3 plots and defines a custom layout for them:\n::: {.cell layout='[[45,-10,45],[100]]' layout='[[45,-10,45],100]' fig.alt='{}'}\n\n```{.r .cell-code}\nplot(cars)\n```\n\n::: {.cell-output-display}\n![](figures-and-layout_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n\n```{.r .cell-code}\nplot(pressure)\n```\n\n::: {.cell-output-display}\n![](figures-and-layout_files/figure-html/unnamed-chunk-6-2.png){width=672}\n:::\n\n```{.r .cell-code}\nplot(mtcars)\n```\n\n::: {.cell-output-display}\n![](figures-and-layout_files/figure-html/unnamed-chunk-6-3.png){width=672}\n:::\n:::\n\nNote that for Rmd code chunks, you use a list of numeric vectors (each of which represents a row). For Jupyter Markdown however you use the same array of arrays syntax (e.g layout=\"[[40,-20,40], [100]]\") as is used for plain markdown."
  },
  {
    "href": "figures-and-layout.html#block-layout",
    "title": "Figures and Layout",
    "section": "Block Layout",
    "text": "While the examples above illustrate laying out figures and tables, it’s important to note that layout attributes can be used to layout any sort of block content. For example, here we layout 2 lists side-by-side:\n::: {layout.ncol=2}\n### List One\n\n- Item A\n- Item B\n- Item C\n\n### List Two\n\n- Item X\n- Item Y\n- Item Z\n:::\nNote that headings are automatically combined with the block that follows them, so this markdown has a total of 2 columns to lay out. Here’s an example of a paragraph next to a bullet list (without headings):\n::: {layout.ncol=2}\n- Item X\n- Item Y\n- Item Z\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur gravida eu erat et fring.\nMorbi congue augue vel eros ullamcorper, eget convallis tortor sagittis. Fusce sodales viverra\nmauris a fringilla. Donec feugiat, justo eu blandit placerat, enim dui volutpat turpis, eu\ndictum lectus urna eu urna. Mauris sed massa ornare, interdum ipsum a, semper massa. \n:::"
  }
]