---
title: "Quarto Dashboards"
code-annotations: select
format:
  html:
    include-in-header: 
      - '../download/_download.html'
    include-after-body: 
      text: |
        <script type="text/javascript">
        window['quarto-download-release'] = true;
        window['quarto-download-prerelease'] = true;
        window['quarto-download-nonews'] = true;
        window["quarto-prerelease-mode"] = '{{< meta prerelease-mode >}}';
        </script>   
---

{{< include /docs/prerelease/1.4/_pre-release-feature.qmd >}}

## Overview

Quarto Dashboards make it easy to create interactive dashboards using Python, R, Julia, and Observable:

-   Publish a group of related data visualizations as a dashboard. Dashboards can be deployed as static web pages (no special server required). 

-   Support for a wide variety of components including [Plotly](https://plotly.com/python/),Â [Leaflet](https://ipyleaflet.readthedocs.io/en/latest/), [Jupyter Widgets](/docs/interactive/widgets/jupyter.qmd), [htmlwidgets](https://www.htmlwidgets.org/); static graphics (Matplotlib, Seaborn, ggplot2, etc.); tabular data; value boxes; and text annotations.

-   Flexible and easy to specify row and column-based [Layouts](layouts.qmd). Components are intelligently re-sized to fill the browser and adapted for display on mobile devices.

-   Author using any notebook editor ([JupyterLab](/docs/tools/jupyter-lab.qmd), etc.) or in plain text markdown with any text editor ([VS Code](/docs/tools/vscode.qmd), [RStudio](/docs/tools/rstudio.qmd), [Neovim](/docs/tools/neovim.qmd), etc.)

-   Optionally integrate dashboards with a backend server ([Py Shiny](/docs/dashboards/interactivity/shiny-python.qmd) or [R Shiny](/docs/dashboards/interactivity/shiny-r.qmd)) for interactivity.

Below we'll walk through a simple example to illustrate the basics. Then, we'll provide detailed instructions on how to get started with building your own dashboards.

## Walkthrough

This dashboard uses interactive Plotly visualizations to explore various development indicators in the [Gapminder](http://www.gapminder.org/data/) dataset:

![](images/gapminder.png){.border .lightbox}

Dashboards consist of several components:

1)  **Navigation** --- The title, author, and links to sub-pages (if more than one page is defined).

2)  **Rows, Columns, and Tabsets** --- This example has two rows, the second of which includes two columns). Rows and columns are defined using markdown headings (with optional attributes to control height, width, etc.). Tabsets can be used to further divide content within a row or column.

3)  **Cards** --- Cards are containers for data, visualizations, and free from content. The content of cards generally maps to computational *cells* in your source document.

Dashboards can be created either using Jupyter notebooks (`.ipynb`) or using plain text markdown (`.qmd`). Here is the code for the notebook version of the above example:

![](images/gapminder-jupyter.png){.border .lightbox}

Here is the plain text `.qmd` version of the dashboard (click on the numbers on the far right for additional explanation of syntax and mechanics):

```` python
--- 
title: "Development Indicators by Continent" # <1>
author: "Gapminder Analytics Group" # <1>
format: dashboard # <1>
--- 

```{{python}}
import plotly.express as px
df = px.data.gapminder()
```

## Row {height=60%} # <2>

```{{python}}  # <3>
#| title: GDP and Life Expectancy 
px.scatter(  
  df, x="gdpPercap", y="lifeExp", 
  animation_frame="year", animation_group="country", 
  size="pop", color="continent", hover_name="country",
  facet_col="continent", log_x=True, size_max=45, 
  range_x=[100,100000], range_y=[25,90] 
)  
``` # <3>

## Row {height=40%}

```{{python}} # <4>
#| title: Population
px.area(
  df, x="year", y="pop", 
  color="continent", line_group="country"
)
```

```{{python}}
#| title: Life Expectancy
px.line(
  df, x="year", y="lifeExp", 
  color="continent", line_group="country"
)
``` # <4>
````

1.  The document options define the `title` and `author` for the navigation bar as well as specifying the use of the `dashboard` format.
2.  Rows and columns are defined using headers. In this example we define two rows and specify their relative sizes using the `height` option.
3.  Computational cells become cards that live within rows or columns. Cards can have an optional title (which here we specify using the `title` option).
4.  The second row includes two computational cells, which are automatically spit into two side by side cards.

## Getting Started

### Step 1: Install Quarto Pre-Release

Dashboards are a feature in the upcoming 1.4 release of Quarto and are still under active development. Before you get started, make sure you install the **latest pre-release** version of Quarto.

{{< include ../download/_download-pre.md >}}

### Step 2: Learn the Basics

Next, read the article on [Using Dashboards](overview.qmd), which provides broad overview of the core concepts and capabilities of dashboards.

::: {.callout-note}
If you are completely new to Quarto, you may also want to familiarze yourself with the Qurato tools available for your favorite environment. See the tutorials on using Quarto with [VS Code](/docs/get-started/hello/vscode.qmd), [JupyterLab](/docs/get-started/hello/jupyter.qmd), [RStudio](/docs/get-started/hello/rstudio.qmd), [Neovim](/docs/get-started/hello/neovim.qmd), or [other text editors](/docs/get-started/hello/text-editor.qmd) for more details.
:::

### Step 3: Explore Further

Once you've mastered the basics here are some additonal topics you might want to explore further:

- Creating dashboards with [multiple pages](components.qmd) and [advanced layouts](layouts.qmd).

- Customizing the look and feel of dashboards with [themes](theming.qmd).

- Using visualizations generated from [Python](/docs/dashboards/computations/python.qmd), [R](/docs/dashboards/computations/r.qmd), [Julia](/docs/dashboards/computations/julia.qmd), and [Observable](/docs/dashboards/interactivity/observable.qmd).

- Integrating dashboards with a backend [Shiny Server](/docs/dashboards/interactivity/shiny-python.qmd) for interactivity.


