---
title: "Dashboard Components"
lightbox: auto
---

## Overview

Dashboards are compositions of various components used to present data and provide navigation. Below we'll describe all of the available components in depth. 

## Navigation

All dashboards include a top-level navigation bar that provide a title and (optionally) a logo and author. Dashboards with multiple pages also contain a link to each page on the navigation bar:

![](images/navigation-toolbar.png)

You can specify the `title`, `author`, and `logo` using their respective document options:

```yaml
---
title: "Palmer Penguins"
author: "Cobblepot Analytics"
logo: penguins.png
---
```

## Layout

Within a page, dashboard components are laid out using alternating sets of rows and columns. Rows and columns are in turn defined by markdown headings and computational cells. For example, here's a simple layout with two rows, where the second row is split into two columns:


::: {.chart-example .grid}

::: {.g-col-5}

````{.python .pymd}
---
title: "Palmer Penguins"
author: "Cobblepot Analytics"
format: dashboard
---
    
## Row {height=70%}

```{{python}}
```

## Row {height=30%}

```{{python}}
```

```{{python}}
```
````

:::

::: {.g-col-7}

![](images/chart-focal-top.png)

:::

:::

Here, level 2 markdown headings (e.g. `## Row {height=70%}`) define the contents of rows as well as their relative height. The ```` ```{python} ```` code cells in turn automatically create cards that are laid out in columns within the row.

### Orientation

By default, dashboard pages are laid out first by row, then by column. However, you can change this by specifying the `orientation: columns` document option:


::: {.chart-example .grid}

::: {.g-col-5}

````{.python .pymd}
---
title: "Diamonds Explorer"
format: 
  dashboard:
    orientation: columns
---
    
## Column {width=60%}

```{{python}}
```

## Column {width=40%}

```{{python}}
```

```{{python}}
```
````

:::

::: {.g-col-7}

![](images/chart-focal-left.png)

:::

:::


### Fill vs. Scrolling

By default, dashboard content fills all available space in the page. You can alternatively specify the `scrolling: true` option to layout content using its natural height and scroll to accomodate page overflow. For example:

::: {.chart-example .grid}

::: {.g-col-5}

````{.python .pymd}
---
title: "Scrolling"
format: 
  dashboard:
    scrolling: true 
---
    
```{{python}}
```

```{{python}}
```

```{{python}}
```


````

:::

::: {.g-col-7}

![](images/chart-stack-scrolling.png)

:::

:::

Because of its ability to scroll this layout could easily accommodate many more charts. While this is useful, you might also consider [Pages](#pages) and [Tabsets](#tabsets) (described in the next two sections) as alternate ways to present content within layouts that fill their page.

The article on [Dashboard Layouts](layouts.qmd) provides extensive additional example layouts which you can use as a basis for your own dashboards.


## Pages

The layout examples above demonstrated only single-page dashboards. To introduce multiple pages, use level 1 headings above the level 2 headings used to define rows and columns. For example, here is a dashboard that splits content across two pages:

````{.python .pymd}
---
title: "Palmer Penguins"
format: dashboard
---
    
# Bills 

```{{python}}
```

# Flippers {orientation="columns"}

## Column

```{{python}}
```

```{{python}}
```

## Column 

```{{python}}
```
````


Note that we can set a per-page orientation by adding an `orientation` attribute to the page haeding (here `orientation="columns"` for the second page).  


## Tabsets

Use tabsets to include multiple views of data or to include content of secondary importance without having it crown the main display. Tabsets are created by adding the `.tabset` class to a row or column. For example, this layout displays the bottom row as a set of two tabs. 

::: {.chart-example .grid}

::: {.g-col-5}

````{.python .pymd}
---
title: "Palmer Penguins"
format: dashboard
---
    
## Row

```{{python}}
```

## Row {.tabset}

```{{python}}
#| title: Chart 2
```

```{{python}}
#| title: Chart 3
```
````

:::

::: {.g-col-7}

![](images/chart-tabset-row.png)

:::

:::

You can include tabsets at arbitrarirly deep levels. Here we include a tabset within a column of a top level row. Each cell within the tabset column becomes a tab.

::: {.chart-example .grid}

::: {.g-col-5}

````{.python .pymd}
---
title: "Palmer Penguins"
format: dashboard
---
    
## Row {height=70%}

```{{python}}
```

## Row {height=30%}

### Column {.tabset}

```{{python}}
#| title: Chart 2
```

```{{python}}
#| title: Chart 3
```

### Column

```{{python}}
```

````

:::

::: {.g-col-7}

![](images/chart-tabset-card.png)

:::

:::

Note that we need to provide navigational titles for our tabs. We do that here by adding a `title` option to the cell used to produce each tab.


## Cards

Cards are the fundamental unit of display within dashboards. Cards are created automatically for cells and markdown content that are within rows and columns. So for example, each of the Python cells here become cards:

````{.python .pymd}
## Column {width=40%}

```{{python}}
```

```{{python}}
```
````

Markdown content that exists outside of cells is also automatically collected up into a card:

````{.python .pymd}
## Column {width=40%}

```{{python}}
```

![](image.png)
This text and the image above will become a card

```{{python}}
```
````

### Display Options

By default, cards are displayed with no title and a small bit of padding around the edges. Here is a card that displays a [Leaflet](https://ipyleaflet.readthedocs.io) map:

![](images/leaflet-card.png)

You can add a title to a card by including the `title` cell option. You can also customize the padding using the `padding` option. For example, here we add a title and remove the padding entirely:

````{.python .pymd}
```{{python}}
#| title: "World Map"
#| padding: 0px
from ipyleaflet import Map, basemaps, basemap_to_tiles
Map(basemap=basemap_to_tiles(basemaps.OpenStreetMap.Mapnik),
    center=(48.204793, 350.121558), zoom=2)
```
````

![](images/leaflet-card-title-padding.png)

In the section below on [Cell Output](#cell-output) there are additional details on how cells and their content are mapped to cards (e.g. excluding cells, cells with multiple outputs, etc.).


## Sidebars

Sidebars are a great place to group inputs for Shiny interactive dashboards. To include a sidebar you add the `.sidebar` class to a top level column heading:

::: {.chart-example .grid}

::: {.g-col-5}

````{.python .pymd}
---
title: "Sidebar"
format: 
  dashboard:
    orientation: columns
---
    
## Column {.sidebar}

```{{python}}
```

## Column 

```{{python}}
```

```{{python}}
```
````

:::


::: {.g-col-7}

![](images/chart-input-sidebar.png)

:::

:::


## Value Boxes

Value boxes are a great way to prominently display simple values within a dashboard. For example, here is a dashboard row with three value boxes:

![](images/value-boxes.png)

Here is the code you might use to create these value boxes. Note that we use a mix of Python and R cells in this example to illustrate the syntax for each language. Note also that we assume the variables `articles`, `comments`, and `spam` are computed previously within the document.

````{.python .pymd}
## Row 

```{{python}}
#| component: valuebox
#| title: "Articles per day"
#| icon: pencil
#| color: blue
articles
```

```{{python}}
#| component: valuebox
#| title: "Comments per day"
dict(
  icon = "pencil",
  color = "blue",
  value = comments
)
```

```{{r}}
#| component: valuebox
#| title: "Spam per day"
list(
  icon = "trash",
  color = "orange",
  value = spam
)
```
````

You can choose between specifying value box options within YAML or within a `dict()` or `list()` (for Python and R, respectively) printed by the cell. The latter syntax is handy when you want the `icon` or `color` to be dynamic based on the value.

The `icon` used in value boxes can be any of the 2,000 available [bootstrap icons](https://icons.getbootstrap.com).

### Markdown Syntax

You can also create value boxes using plain markdown (in which case you'll typically include the value via an inline expression). For example:


````{.python .pymd}
## Row

::: {.valuebox icon="pencil" color="blue"}
Articles per day

`{python} articles`
:::
````


## Plots

Plots are by far the most common content type displayed in dashboards. Both interactive JavaScript-based plots (e.g. [Plotly](https://plotly.com/graphing-libraries/)) and standard raster based plots (e.g. [Matplotlib](https://matplotlib.org) or [ggplot2](https://ggplot2.tidyverse.org) are supported.

Below we provide some language specific tips and techniques for including plots within dashboards.

::: {.panel-tabset group="language"}

## Python

{{< include _plots-interactive.md >}}

### plotly

[Plotly](https://plotly.com/python/) is a popular Python package for JavaScript based plots, and works very well in dashboard layouts. Plotly is also noteworthy because it includes many interactive features while still not requiring a server. For example, this plot supports an animated display of values changing over time:

````{.python .pymd}
```{{python}}
import plotly.express as px
df = px.data.gapminder()
px.scatter(
  df, x="gdpPercap", y="lifeExp", 
  animation_frame="year", animation_group="country",
  size="pop", color="continent", hover_name="country", 
  facet_col="continent", log_x=True, size_max=45, 
  range_x=[100,100000], range_y=[25,90]
)
```
````

![](images/plotly-interactive.png)

### matplotlib

{{< include _plots-raster.md >}}

If you are using [Matplotlib](https://matplotlib.org) (or libraries built on it like [Seaborn](https://seaborn.pydata.org)) then you can do this via the `figure.figsize` global option (or alternatively per-figure if that's more convenient):

````python
```{{python}}
import matplotlib.pyplot as plt
plt.rcParams['figure.figsize'] = (12, 3)
```
````

In the case that your plots are laid out at a wider aspct ratio, setting this option can make a huge difference in terms of using available space. For example, the top plot in the stack below uses the default figure size of 8 x 5 and the bottom one uses the 12 x 3 ratio specified above:

![](images/matplotlib-size.png)

Note that the need to explicitly size plots is confined to traditonal gplotting libraries---if you use Plotly or another JavaScript based plotting system plots will automatically resize to fill their container.

## R

(Under Construction)

:::


## Tables

You can include data tables within dashboards in one of two ways:

- As a simple tabular display.
- As an interactive widget that includes sorting, filtering, and pagination.

Simple markdown tables in dashboards automatically fill their container (scrolling horizontally and vertically as required). Tables produced by computations are well supported, but the details vary by environment. 

Below we provide some language specific tips and techniques for including tables within dashboards.

::: {.panel-tabset group="language"}

## Python

There are many Python packages available for producing tabular output. We'll cover two of the more populare libraries (**tabulate** and **itables**) below.

### tabulate

The Python [tabulate](https://github.com/astanin/python-tabulate) package supports creating markdown tables from Pandas data frames, NumPy arrays, and many other data types. You can generate a markdown table from any Pandas data frame via the `to_markdown()` method (being sure to wrap it as `Markdown` output using IPython):

````python
```{{python}}
import pandas as pd
from IPython.display import Markdown

penguins = pd.read_csv("penguins.csv")\

Markdown(penguins.to_markdown(index=False))
```
````

Note that the `index = False` parameter supresses the display of the row index. Here is a card containing output from `tabulate`:

![](images/tabulate.png)


You can also import `tabulate` directly and pass in the object to print directly:

````python
```{{python}}
from tabulate import tabulate
Markdown(
  tabulate(penguins, showindex=False, 
           headers=penguins.columns)
)
```
````

### itables

The Python [itables](https://mwouts.github.io/itables/quick_start.html) package supports creating interactive data tables from Pandas and Polars DataFrames that you can sort, paginate, scroll, or filter.

Use the `show()` method from `itables` to display an interactive table (note that we also specify the `flow` class for the cell so that the table determines its own height rather than having it allocated by the layout system):

````python
```{{python}}
#| classes: flow
from itables import show
show(penguins)
```
````

![](images/itables-flow.png)

If you prefer scrolling to paginated tables, use the `scrollY` and `paging` options as follows:

````python
```{{python}}
from itables import show
show(penguins, scrollY=True,  paging=False)
```
````

![](images/itables-scrolling.png)

## R

(Under Construction)

:::




## Text Content

While you often fill dashboard cards with plots and tables, you can also include arbitrary markdown content anywhere within a dashboard. For example, here is a dashboard where the bottom row is plain markdown:

![](images/markdown-row.png){.border}

We included this content in our dashboard by placing it in its own row below the top row:

````{.python .pymd}
## Row

```{{python}}
#| title: Population
px.area(df, x="year", y="pop", color="continent", 
        line_group="country")
```

```{{python}}
#| title: Life Expectancy
px.line(df, x="year", y="lifeExp", color="continent", 
        line_group="country")
```

## Row

Gapminder combines data from multiple sources into
unique coherent time-series that can’t be found
elsewhere. Learn more about the Gampminder dataset at
 <https://www.gapminder.org/data/>.
 
````

You can also stack text content within a column. For example:

![](images/text-content-column.png){.border}

To do this just include the content alongside the other cells in the column:

````{.python .pymd}
## Column

```{{python}}
#| title: Population
px.area(df, x="year", y="pop", color="continent", 
        line_group="country")
```

```{{python}}
#| title: Life Expectancy
px.line(df, x="year", y="lifeExp", color="continent", 
        line_group="country")
```

Gapminder combines data from multiple sources into
unique coherent time-series that can’t be found
elsewhere. Learn more about the Gampminder dataset at
<https://www.gapminder.org/data/>.
````

## Cell Output

The output of each computational cell within your notebook or source document will be contained witihn a [Card](#cards). Below we describe some special rules observed when creating cards.

### Excluded Cells

Cells that produce no output do not become cards (for example, cells used to import packages, load and filter data, etc. In some cases a cell might produce unexpected output that you want to exclude. To do this add the `output: false` option to the cell:

````{.python .pymd}
```{{python}}
#| output: false
# (code that produces unexpected output)
```
````

### Expressions

By default, all output from top level expressions is displayed within dashboards. This means that multiple plots can easily be generated from a cell. For example:

````{.python .pymd}
```{{python}}
#| title: "Tipping Behavior"
px.box(df, x="sex", y="total_bill", color="smoker")
px.violin(df, x="sex", y="total_bill", color="smoker")
```
````

This behavior correponds to the `"all"` setting for [Jupyter shell interactivity](https://ipython.readthedocs.io/en/stable/config/options/terminal.html#configtrait-InteractiveShell.ast_node_interactivity). You can customize this behavior within Quarto using the `ipynb-shell-interactivity` option. 

### Card Layout

If a cell produces multiple outputs you can use cell layout options to organize their display. For example, here we modify the example of to display plots side-by-side using the `layout-ncol` option:

````{.python .pymd}
```{{python}}
#| title: "Tipping Behavior"
#| layout-ncol: 2
px.box(df, x="sex", y="total_bill", color="smoker")
px.violin(df, x="sex", y="total_bill", color="smoker")
```
````

![](images/card-layout-ncol.png)

See the article on [Figures](/docs/authoring/figures.qmd#complex-layouts) for additional documentation on custom layouts.

