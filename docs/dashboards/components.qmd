---
title: "Dashboard Components"
lightbox: auto
---

## Overview

Dashboards are compositions of various components used to present data and provide navigation. Below we'll describe all of the available components in depth. 

See the [Dashboard Tutorial](tutorial.qmd) for a higher level review of how all of these components work together.

## Navigation

All dashboards include a top-level navigation bar that provide a title and (optionally) a logo and author. Dashboards with multiple pages also contain a link to each page on the navigation bar:

![](images/navigation-toolbar.png)

You can specify the `title`, `author`, and `logo` using their respective document options:

```yaml
---
title: "Palmer Penguins"
author: "Cobblepot Analytics"
logo: penguins.png
---
```

## Layout

Within a page, dashboard components are laid out using alternating sets of rows and columns. Rows and columns are in turn defined by markdown headings and computational cells. For example, here's a simple layout with two rows, where the second row is split into two columns:


::: {.chart-example .grid}

::: {.g-col-5}

````{.python .pymd}
---
title: "Palmer Penguins"
author: "Cobblepot Analytics"
format: dashboard
---
    
## Row {height=70%}

```{{python}}
```

## Row {height=30%}

```{{python}}
```

```{{python}}
```
````

:::

::: {.g-col-7}

![](images/chart-focal-top.png)

:::

:::

Here, level 2 markdown headings (e.g. `## Row {height=70%}`) define the contents of rows as well as their relative height. The ```` ```{python} ```` code cells in turn automatically create cards that are laid out in columns within the row.

### Orientation

By default, dashboard pages are laid out first by row, then by column. However, you can change this by specifying the `orientation: columns` document option:


::: {.chart-example .grid}

::: {.g-col-5}

````{.python .pymd}
---
title: "Diamonds Explorer"
format: 
  dashboard:
    orientation: columns
---
    
## Column {width=60%}

```{{python}}
```

## Column {width=40%}

```{{python}}
```

```{{python}}
```
````

:::

::: {.g-col-7}

![](images/chart-focal-left.png)

:::

:::


### Fill vs. Scrolling

By default, dashboard content fills all available space in the page. You can alternatively specify the `scrolling: true` option to layout content using its natural height and scroll to accomodate page overflow. For example:

::: {.chart-example .grid}

::: {.g-col-5}

````{.python .pymd}
---
title: "Scrolling"
format: 
  dashboard:
    scrolling: true 
---
    
```{{python}}
```

```{{python}}
```

```{{python}}
```


````

:::

::: {.g-col-7}

![](images/chart-stack-scrolling.png)

:::

:::

Because of its ability to scroll this layout could easily accommodate many more charts. While this is useful, you might also consider [Pages](#pages) and [Tabsets](#tabsets) (described in the next two sections) as alternate ways to present content within layouts that fill their page.

The article on [Dashboard Layouts](layouts.qmd) provides extensive additional example layouts which you can use as a basis for your own dashboards.


## Pages

The layout examples above demonstrated only single-page dashboards. To introduce multiple pages, use level 1 headings above the level 2 headings used to define rows and columns. For example, here is a dashboard that splits content across two pages:

````{.python .pymd}
---
title: "Palmer Penguins"
format: dashboard
---
    
# Bills 

```{{python}}
```

# Flippers {orientation="columns"}

## Column

```{{python}}
```

```{{python}}
```

## Column 

```{{python}}
```
````


Note that we can set a per-page orientation by adding an `orientation` attribute to the page haeding (here `orientation="columns"` for the second page).  


## Tabsets

Use tabsets to include multiple views of data or to include content of secondary importance without having it crown the main display. Tabsets are created by adding the `.tabset` class to a row or column. For example, this layout displays the bottom row as a set of two tabs. 

::: {.chart-example .grid}

::: {.g-col-5}

````{.python .pymd}
---
title: "Palmer Penguins"
format: dashboard
---
    
## Row

```{{python}}
```

## Row {.tabset}

```{{python}}
#| title: Chart 2
```

```{{python}}
#| title: Chart 3
```
````

:::

::: {.g-col-7}

![](images/chart-tabset-row.png)

:::

:::

You can include tabsets at arbitrarirly deep levels. Here we include a tabset within a column of a top level row. Each cell within the tabset column becomes a tab.

::: {.chart-example .grid}

::: {.g-col-5}

````{.python .pymd}
---
title: "Palmer Penguins"
format: dashboard
---
    
## Row {height=70%}

```{{python}}
```

## Row {height=30%}

### Column {.tabset}

```{{python}}
#| title: Chart 2
```

```{{python}}
#| title: Chart 3
```

### Column

```{{python}}
```

````

:::

::: {.g-col-7}

![](images/chart-tabset-card.png)

:::

:::

Note that we need to provide navigational titles for our tabs. We do that here by adding a `title` option to the cell used to produce each tab.


## Cards

Cards are the fundamental unit of display within dashboards. Cards are created automatically for cells and markdown content that are within rows and columns. So for example, each of the Python cells here become cards:

````{.python .pymd}
## Column {width=40%}

```{{python}}
```

```{{python}}
```
````

Markdown content that exists outside of cells is also automatically collected up into a card:

````{.python .pymd}
## Column {width=40%}

```{{python}}
```

![](image.png)
This text and the image above will become a card

```{{python}}
```
````

### Display Options

By default, cards are displayed with no title and a small bit of padding around the edges. Here is a card that displays a [Leaflet](https://ipyleaflet.readthedocs.io) map:

![](images/leaflet-card.png)

You can add a title to a card by including the `title` cell option. You can also customize the padding using the `padding` option. For example, here we add a title and remove the padding entirely:

````{.python .pymd}
```{{python}}
#| title: "World Map"
#| padding: 0px
from ipyleaflet import Map, basemaps, basemap_to_tiles
Map(basemap=basemap_to_tiles(basemaps.OpenStreetMap.Mapnik),
    center=(48.204793, 350.121558), zoom=2)
```
````

![](images/leaflet-card-title-padding.png)

### Internal Layout

Typically a cell used to create a card will produce a single plot or table. If however a cell produces multiple outputs you can use cell layout options to organize their display. For example, this card includes two plots and the `layout-ncol` option is used to display them side-by-side:

````{.python .pymd}
```{{python}}
#| title: "Tipping Behavior"
#| layout-ncol: 2
px.box(df, x="sex", y="total_bill", color="smoker")
px.violin(df, x="sex", y="total_bill", color="smoker")
```
````

![](images/card-layout-ncol.png)

See the article on [Figures](/docs/authoring/figures.qmd#complex-layouts) for additional documentation on custom layouts.

## Value Boxes

Value boxes are a great way to prominently display simple values within a dashboard. For example, here is a dashboard row with three value boxes:

![](images/value-boxes.png)

Here is the code you might use to create these value boxes. Note that we use a mix of Python and R cells in this example to illustrate the syntax for each language. Note also that we assume the variables `articles`, `comments`, and `spam` are computed previously within the document.

````{.python .pymd}
## Row 

```{{python}}
#| component: valuebox
#| title: "Articles per day"
#| icon: pencil
#| color: blue
articles
```

```{{python}}
#| component: valuebox
#| title: "Comments per day"
dict(
  icon = "pencil",
  color = "blue",
  value = comments
)
```

```{{r}}
#| component: valuebox
#| title: "Spam per day"
list(
  icon = "trash",
  color = "orange",
  value = spam
)
```
````

You can choose between specifying value box options within YAML or within a `dict()` or `list()` (for Python and R, respectively) printed by the cell. The latter syntax is handy when you want the `icon` or `color` to be dynamic based on the value.

The `icon` used in value boxes can be any of the 2,000 available [bootstrap icons](https://icons.getbootstrap.com).

### Markdown Syntax

You can also create value boxes using plain markdown (in which case you'll typically include the value via an inline expression). For example:


````{.python .pymd}
## Row

::: {.valuebox icon="pencil" color="blue"}
Articles per day

`{python} articles`
:::
````

## Plots

Plots are by far the most common content type displayed in dashboards. Both interactive JavaScript-based plots (e.g. [Plotly](https://plotly.com/graphing-libraries/)) and standard raster based plots (e.g. [Matplotlib](https://matplotlib.org) or [ggplot2](https://ggplot2.tidyverse.org) are supported.

{{< include _plots-interactive.md >}}

{{< include _plots-raster.md >}}

See these articles for language-speicfic techniques on using both JavaScript and traditional plots in dashboards:

- [Plots in Python](computations/python.qmd#plots)
- [Plots in R](computations/r.qmd#plots) 

## Tables

You can include data tables within dashboards in one of two ways:

- As a simple tabular display.
- As an interactive widget that includes sorting, filtering, and pagination.

Simple markdown tables in dashboards automatically fill their container (scrolling horizontally and vertically as required). Tables produced by computations are well supported, but the details vary by environment. See these articles for language-speicfic techniques on presenting and customizing tables:

- [Tables in Python](computations/python.qmd#tables)
- [Tables in R](computations/r.qmd#tables) 

## Text Content

While you often fill dashboard cards with plots and tables, you can also include arbitrary markdown content anywhere within a dashboard. For example, here is a dashboard where the bottom row is plain markdown:

![](images/markdown-row.png){.border}

We included this content in our dashboard by placing it in its own row below the top row:

````{.python .pymd}
## Row

```{{python}}
#| title: Population
px.area(df, x="year", y="pop", color="continent", 
        line_group="country")
```

```{{python}}
#| title: Life Expectancy
px.line(df, x="year", y="lifeExp", color="continent", 
        line_group="country")
```

## Row

Gapminder combines data from multiple sources into
unique coherent time-series that can’t be found
elsewhere. Learn more about the Gampminder dataset at
 <https://www.gapminder.org/data/>.
 
````

You can also stack text content within a column. For example:

![](images/text-content-column.png){.border}

To do this just include the content alongside the other cells in the column:

````{.python .pymd}
## Column

```{{python}}
#| title: Population
px.area(df, x="year", y="pop", color="continent", 
        line_group="country")
```

```{{python}}
#| title: Life Expectancy
px.line(df, x="year", y="lifeExp", color="continent", 
        line_group="country")
```

Gapminder combines data from multiple sources into
unique coherent time-series that can’t be found
elsewhere. Learn more about the Gampminder dataset at
<https://www.gapminder.org/data/>.
````


## Sidebars

Sidebars are a great place to group inputs for Shiny interactive dashboards. To include a sidebar you add the `.sidebar` class to a top level column heading:

::: {.chart-example .grid}

::: {.g-col-5}

````{.python .pymd}
---
title: "Sidebar"
format: 
  dashboard:
    orientation: columns
---
    
## Column {.sidebar}

```{{python}}
```

## Column 

```{{python}}
```

```{{python}}
```
````

:::


::: {.g-col-7}

![](images/chart-input-sidebar.png)

:::

:::

<!--- TODO: Sidebar width and expando behavior --->


<!--- TODO: Input Panels --->


