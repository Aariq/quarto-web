---
title: "Dashboard Layouts"
---

## Overview

This page includes a variety of sample layouts which you can use as a starting point for your own dashboards.

When creating a layout, it's important to decide up front whether you want your charts to fill the web page vertically (changing in height as the browser changes) or if you want the charts to maintain their original height (with the page scrolling as necessary to display all of the charts).

Filling the page is generally a good choice when you have only one or two charts vertically stacked. Alternatively you can use `scrolling: true` to specify a scrolling layout, which is generally a better choice for three or more charts vertically stacked.

## Chart Stack

This layout is a simple stack of two charts. This dashboard fills the page and allocates height evenly across the two charts.

::: {.chart-example .grid}
::: g-col-6
```` {.python .pymd}
---
title: "Stack"
format: dashboard  
---
    
```{{python}}

```

```{{python}}

```







````
:::

::: g-col-6
![](images/chart-stack-fill.png)
:::
:::

## Chart Stack (Height)

Here we use the `height` option to allocate more space to the top chart. Note that we don't specify a height on the bottom chart as it will be automatically computed to fill the remaining space.

::: {.chart-example .grid}
::: g-col-6
```` {.python .pymd}
---
title: "Stack w/ Height"
format: dashboard
---
    
```{{python}}
#| height: 70%

```

```{{python}}

```




````
:::

::: g-col-6
![](images/chart-stack-height.png)
:::
:::

## Chart Stack (Scrolling)

This layout is a simple stack of three charts. To provide enough room to display all the charts a scrolling layout is used (`scrolling: true`). Note that because of its ability to scroll this layout could easily accommodate many more charts

::: {.chart-example .grid}
::: g-col-6
```` {.python .pymd}
---
title: "Stack (Scrolling)"
format: 
  dashboard:
    scrolling: true 
---
    
```{{python}}
```

```{{python}}
```

```{{python}}
```

````
:::

::: g-col-6
![](images/chart-stack-scrolling.png)
:::
:::

## Focal Chart (Top)

This layout fills the page completely and gives prominence to a single chart at the top (with two secondary charts included below). To achieve this layout it specifies `height` attributes on each row to establish their relative sizes.

::: {.chart-example .grid}
::: g-col-6
```` {.python .pymd}
---
title: "Focal (Top)"
format: dashboard
---
    
## Row {height=70%}

```{{python}}
```

## Row {height=30%}

```{{python}}
```

```{{python}}
```
````
:::

::: g-col-6
![](images/chart-focal-top.png)
:::
:::

## Focal Chart (Left)

This layout fills the page completely and gives prominence to a single chart on the left (with two secondary charts included to the right). To achieve this layout we use `orientation: columns` (so that top level headings map to columns rather than rows). Additionally, we specify `width` attributes on each column to establish their relative sizes.

::: {.chart-example .grid}
::: g-col-6
```` {.python .pymd}
---
title: "Focal (Top)"
format: 
  dashboard:
    orientation: columns
---
    
## Column {width=60%}

```{{python}}
```

## Column {width=40%}

```{{python}}
```

```{{python}}
```
````
:::

::: g-col-6
![](images/chart-focal-left.png)
:::
:::

## Chart Grid (2x2)

This layout is a 2x2 grid of charts. This layout uses the default filling behavior however depending on the ideal display size for the charts it might be preferable to allow the page to scroll (`scrolling: true`).

::: {.chart-example .grid}
::: g-col-6
```` {.python .pymd}
---
title: "Grid (2x2)"
format: dashboard
---
    
## Row 

```{{python}}
```

```{{python}}
```

## Row

```{{python}}
```

```{{python}}
```
````
:::

::: g-col-6
![](images/chart-grid.png)
:::
:::

## Tabset (Column)

This layout displays the right column as a set of two tabs. Tabs are especially useful when you have a large number of components to display and prefer not to require the user to scroll to access everything. Note that we specify a `title` option in each of the cells that produce a tab.

::: {.chart-example .grid}
::: g-col-6
```` {.python .pymd}
---
title: "Tabset (Column)"
format: 
  dashboard:
    orientation: columns
---
    
## Column

```{{python}}
```

## Column {.tabset}

```{{python}}
#| title: Chart 2
```

```{{python}}
#| title: Chart 3
```
````
:::

::: g-col-6
![](images/chart-tabset-column.png)
:::
:::

## Tabset (Row)

This layout displays the bottom row as a set of two tabs.

::: {.chart-example .grid}
::: g-col-6
```` {.python .pymd}
---
title: "Tabset (Row)"
format: dashboard
---
    
## Row

```{{python}}
```

## Row {.tabset}

```{{python}}
#| title: Chart 2
```

```{{python}}
#| title: Chart 3
```
````
:::

::: g-col-6
![](images/chart-tabset-row.png)
:::
:::

## Tabset (Nested)

You can include tabsets are arbitrarily deep levels. Here we include a tabset within a column of a top level row.

::: {.chart-example .grid}
::: g-col-6
```` {.python .pymd}
---
title: "Tabset (Card)"
format: dashboard
---
    
## Row {height=70%}

```{{python}}
```

## Row {height=30%}

### Column {.tabset}

```{{python}}
#| title: Chart 2
```

```{{python}}
#| title: Chart 3
```

### Column

```{{python}}
```
````
:::

::: g-col-6
![](images/chart-tabset-card.png)
:::
:::

## Input Sidebar

This layout demonstrates how to add a sidebar to a dashboard page (Shiny or ObservableJS based dashboards will often present user input controls in a sidebar). To include a sidebar you add the `.sidebar` class to a top level column heading:

::: {.chart-example .grid}
::: g-col-6
```` {.python .pymd}
---
title: "Sidebar"
format: 
  dashboard:
    orientation: columns
---
    
## Column {.sidebar}

```{{python}}
```

## Column 

```{{python}}
```

```{{python}}
```
````
:::

::: g-col-6
![](images/chart-input-sidebar.png)
:::
:::