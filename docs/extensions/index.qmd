---
title: Quarto Extensions (Beta)
draft: true
---

::: callout-note
Quarto extensions are currently in Beta in the current releases of Quarto. We expect that they work well, but because they are still evolving it is possible that breaking changes could be made.
:::

Quarto includes an extension system which allows users to add new functionality and capabilities to Quarto without changing the core of Quarto itself. The Quarto command line tool itself is a very configurable system, with support for Metadata configuration, templating, shortcodes, filters, and more. Each of these is a powerful way to modify or extend the behavior of Quarto. Quarto extensions allow you to bundle a set of these customizations and make it easy to install and use the functionality.

::: callout-tip
## REMOVE WHEN FINAL

In addition to this overview, you can also view:

-   [Creating an Extension](create-extensions.qmd)

-   [Templates and Partials](partials.qmd)

-   [LUA Functions](lua.qmd)

-   [Authors and Affiliations](authors.qmd)
:::

## Types of Extensions

|           |                                                                                                                                                                                                                      |
|-------------|-----------------------------------------------------------|
| Shortcode | Shortcode extensions provide one or more shortcodes that can be used when the extension is installed.                                                                                                                |
| Filter    | Filter extensions provide one or more filters that can be used when the extension can be used.                                                                                                                       |
| Format    | Format extensions provide additional formats that can be used when rendering documents. Format extensions can include not only metadata, but also filters, shortcodes, or supporting files referenced by the format. |

## Installing Extensions

::: callout-warning
Quarto extensions may execute code when documents are rendered. If you do not trust the authors of an extension, we recommend that you do not install or use the extension.
:::

You can install an extension using the `quarto install extension` command. For example, the command:

`quarto install extension quarto-ext/fontawesome`

will install the `fontawesome` extension from the `quarto-ext` organization.

### Installing From Github

The most common way to get extensions is to install them from the Github repository that hosts them. To install an extension from Github, just use the command

`quarto install extension <gh-organization>/<gh-repo>`

For example, the repository at <https://github.com/quarto-ext/latex-environment> provides a simple way to emit LaTeX environments when making PDFs. To install this extension, you would use the command

`quarto install extension quarto-ext/latex-environment`

### Installing From a URL

Quarto extensions can also be installed directly from a URL. For example, the command:

`quarto install extension https://www.quarto-sample.com/extension.zip`

Would install the extension at the url you provided. This isn't typically necessary, but might be useful if the extension is not being hosted on Github.

### Installation Location

By default, extensions are installed for the directory in which you run the `install extension` command. This will make the extensions available to any documents that are directly within that folder (but not subfolders)

If you run the `install extension` command directly from within a project directory, the extensions will be installed in the project root and will be available to any document within that project directory. If you run the `install extension` command from a project subfolder, you will be asked whether to install extensions for the whole project or just for this folder. If you install an extensions for a subfolder, documents within that folder will only use extensions available in the subfolder and will not use project extensions.

Extension that are installed will be placed in an `_extensions` directory. That directory and its contents should be checked into source control if you are using source control.

::: callout-note
Quarto extensions are always copied into the project or directory that you install them into (and not kept in a global location). This is done so that your project or document will always have access to the specific extensions that you used to render them, making the output more consistently reproducible.
:::

## Updating Extensions

Use the command `quarto update extension` to update an extension. For example:

`quarto update extension quarto-ext/fontawesome`

Will update the `fontawesome` extension to the latest version.

## Removing Extensions

Use the command `quarto remove extension` to remove an extension from a project or directory. For example, you can remove `fontwawesome` support using the following:

`quarto remove extension quarto-ext/fontawesome`

If you run the command with no `extension-id`, you will be presented with a list of extensions that are installed and you may select which extensions to remove.

## Extension Identifiers

Extension identifiers are string that can be used to identify an extension. They are compoesed of an organization name and an extension name in the form:

`<organiziation-name>/<extension-name>`

When referencing an extension, you can use only the name of the extension (e.g. `fontawesome`) or if necessary to disambiguate the extension from others, you may also use the full name of the extension `quarto-ext/fontawesome.`

## Using Extensions

### Shortcode Extensions

Shortcodes provided by extensions are automatically loaded and made available when rendering documents.

To use a shortcode extension, first install the extension using `quarto install extension`. Once installed, simply use any shortcodes provided by the extension. For example, to use the `fontawesome` extension, install the extension using:

`quarto install extension quarto-ext/fontawesome`

Then render a document such as:

``` markdown
---
title: My Awesome Document
---

## Section

This is a document using Font Awesome {{{< fa smile >}}}.
```

### Filter Extensions

Filters provided by extensions need to be included in the list of filters used to render a document.

To use a filter extension, first install the extension using `quarto install extension`. Once installed, simply reference the extension name in the list of filters in your document or project. For example, to use the `latex-environments` extension, install the extension using:

`quarto install extension quarto-ext/latex-environments`

Then render a document such as:

``` markdown
---
title: My Environments Document
format:
  pdf: default
filters:
  - latex-environments
  -- also could use
  -- quarto-ext/latex-environments
environments: [program]
---

:::{.program}
The contents of this div will be output in a `program`
latex environment, but will appear in HTML (and any other output 
format as a simple div with the class `program`)
:::
```

### Format Extensions

Formats provided by extensions can be used as a format key in document or project metadata or as a target of the `--to` argument when rendering (or both). Since format extensions *extend* the existing formats provided by Quarto, they are targeted using both the extension name and the output format name (separated by a '-'):

`quarto render mydocument.qmd â€”to <extension-name>-pdf`

or

``` yaml
---
title: My Document
format: 
  <extension-name>-pdf:
    cite-method: natbib
---
```

To use a filter extension, first install the extension using `quarto install extension`. Once installed, use the format as a render target. For example, to use the format for rendering the `Journal of Statistical Software`, install the extension using:

`quarto install extension quarto-journals/jss`

then render a document such as:

``` markdown
---
title: My JSS Document
format:
  pdf: default
  jss-pdf:
    keep-tex: true  
  -- also valid
  -- quarto-ext/jss-pdf
author:
  - Norah Jones
---

## Welcome to My Document!
```

Format extensions can target multiple output formats, which can be targeted independently. For example:

``` markdown
---
title: My JSS Document
format:
  pdf: default
  jss-pdf:
    keep-tex: true  
  jss-html:
    highlight-style: solarized
author:
  - Norah Jones
---

## Welcome to My Document!
```
