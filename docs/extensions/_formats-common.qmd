## Distributing Formats

You can distribute format extensions in one of two ways:

1.  As a template that includes both the format in the `_extensions` directory and the `template.qmd` (which is automatically renamed to match the name of the enclosing directory).

2.  As a plain format with no template scaffolding (this is useful for adding the format to an existing document or project).

If you have a GitHub repository containing the files enumerated above in the `{{< meta example-format >}}` example, users could install your extension and associated template as follows (where `{{< meta example-org >}}` is the GitHub organization hosting the repo):

``` bash
quarto use template {{< meta example-org >}}/{{< meta example-format >}}
```

This is often the preferred way to get started with a format as it provides the user with a working document right out of the box. It's also possible to install *only* the format if you working with an existing project:

``` bash
quarto install extension {{< meta example-org >}}/{{< meta example-format >}}
```

Note that it is possible to bundle and distribute extensions as simple gzip archives (as opposed to using a GitHub repository as described above). See the article on [Distributing Extensions](../extensions/distributing.qmd) for additional details.

## Format Templates

Above we described including a `template.qmd` alongside your extension and then installing the template and format together with:

``` bash
quarto use template <gh-organization>/<extension>
```

The `template.qmd` should demonstrate the functionality of the format and serve as a sound starting point for the user. When the extension template is copied into the target directory, the `template.qmd` will automatically be renamed to match the name that the user provided for the directory.

You can also include other files alongside `template.qmd` and they will be copied as well. Note that by default, Quarto will exclude common Github repository files when copying an extension template. This includes any file name or directory starting with a `.` (e.g. `.gitignore`), `README.md`, `LICENSE`, etc.. If you'd like, you can place a `.quartoignore` file in the root of your repository with each line of the file being a glob describing file(s) to ignore (using syntax like a `.gitignore` file).

## Common Metadata

If you have metadata that is common to any output format when your format extension is targeted, you can place that metadata under the `common` key. For example:

``` yaml
contributes:
  format:
    common:
      filters:
        - filter.lua
      shortcodes:
        - quarto-ext/fancy-text
    html:
      # html-speicific
    pdf:
      # pdf-specifc
```

## Format Resources

You can easily include other files and resources within a format extension by placing those files within the extension directory and using relative paths to reference them. These relative paths will be properly handled.

If there are resources that you need to have copied to the input directory as a part of rendering the document (for example, a `bst` file for LaTeX bibliographies or a logo or other file referenced from a LaTeX template), you can provide `format-resources`, which is a list of file paths. Each of these files will be copied into the directory containing the input that is being rendered when the document is rendered. For example:

```yaml
contributes:
  format:
    format-resources:
       - plos2015.bst
```

## Extension Embedding

In some cases format extensions will want to make use of other extensions. This is permitted, but installing extensions for use within a custom format must be done with a special command line flag to ensure they are embedded correctly.

For example, here we want to make the [fancy-text](https://github.com/quarto-ext/fancy-text) extension (which provides special formatting for the words {{< latex >}} and {{< bibtex >}}) available for users of the [jss](https://github.com/quarto-journals/jss) custom format:

``` bash
quarto install extension quarto-ext/fancy-text --embed quarto-journals/jss
```

This will install the `quarto-ext/fancy-text` extension into the `quarto-journals/jss` extension in the `_extensions` folder. By embedding an extension you make it available without creating the potential for conflict with other versions of the extension that uses might already have installed.

