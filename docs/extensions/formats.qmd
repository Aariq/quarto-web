---
title: "Creating Formats"
---

## Overview

Quarto format extensions enable you to add new formats to the built-in formats (e.g. `html`, `pdf`, `docx`) already available. Custom formats can provide default document options, style-sheets, header, footer, or logo elements, and even bundle other extensions like [filters](filters.qmd) and [shortcodes](shortcodes.qmd). They are a great way to provide a common baseline for authoring documents or presentations within an organization, for a particular type of project or analysis, or for a specific publication.

You can specify a custom format beneath the `format` key just like a built-in format. For example:

``` yaml
----
title: "My Document"
format:
   apsa-pdf:
     toc: true
---
```

Custom formats all derive from one of the base formats, and include that base format as a suffix. Format can also provide multiple variations that derive from distinct base formats. For example:

``` yaml
----
title: "My Document"
toc: true
format:
   apsa-pdf: default
   apsa-html: default
---
```

Note that we moved the `toc` option to the top level since its shared between both of the formats.

Custom formats can also be used with the `--to` argument to `quarto render`. For example:

``` bash
quarto render document.qmd --to apsa-html
```

## Format Components

Custom formats are a type of [Quarto Extension](index.qmd) and creating a format works much like creating a [filter](filter.qmd) or [shortcode](shortcode.qmd) extension. We'll walk through a custom format that extends the built-in `revealjs` format as an example. We'll call our format `lexcorp`. Here is what the source code repository of the format extension might look like:

``` default
README.md
LICENSE
template.qmd
_extensions/
  lexcorp/
    _extension.yml
    theme.scss
    logo.png
    title.png
```

As with other types of extensions, the only thing strictly required is the `_extensions` directory (anything above that is for your own purposes and is ignored during format installation). Even so, it's good practice to include a `README.md` and `LICENSE` file. The `template.qmd` file serves a couple of purposes:

1.  It can be rendered as you develop your format to ensure that things work as expected.
2.  It can serve as the basis for a [format template](#format-templates) (which can help users gets started using your format more easily).

Here is what the contents of `_extension.yml` might look like:

``` yaml
title: Lexcorp Presentation
author: Lexcorp
version: 1.0.0
contributes:
  formats:
    revealjs:
       theme: [default, custom.scss]
       logo: logo.png
       footer: | 
         Copyright 2022 (c) Lexcorp, Inc.
       title-slide-attributes:
          data-background-image: title.png
          data-background-size: contain
       preview-links: auto
       
```

This format mostly provides organization-level content and theming. As mentioned above, formats can also include filters which allow for adding custom markdown constructions and rendering behavior.

Here is what the contents of `template.qmd` might look like:

ally have code that exercises the extension. For example:

```` {.markdown filename="example.qmd"}
---
title: "Output Folding Example"
filters:
  - output-folding
---

```{{python}}
#| output-fold: true

1 + 1
```
````

To develop your extension, just make changes to `output-folding.lua` and render `example.qmd` to test them out.

## Format Templates

### Distribution

if your extension source code it located within a GitHub repository, then it can be installed by referencing the GitHub organization and repository name. For example:

``` bash
# install the current HEAD of the extension
quarto install extension cooltools/output-folding

# install a tagged release of the extension
quarto install extension cooltools/output-folding@v1
```

Note that it is possible to bundle and distribute extensions as simple gzip archives (as opposed to using a GitHub repository as described above). See the article on [Distributing Extensions](distributing.qmd) for additional details.
