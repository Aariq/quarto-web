---
title: "Running Documents"
---

## Overview

There are a number of ways to run Shiny for Python interactive documents:

1.  Use the **Quarto: Preview** command within VS Code.
2.  Use the `quarto preview` command line interface with any editor.
3.  Deploy them to a server for use by a wider audience.

We'll cover all of these scenarios in depth here.

{{< include _shiny-requirements.qmd >}}

## VS Code

The [Quarto VS Code Extension](https://marketplace.visualstudio.com/items?itemName=quarto.quarto) provides integrated support for previewing Shiny interactive documents (just use the **Quarto: Preview** command as you normally would with a static document):

![](images/preview.png){.border}

Note that you need the very latest version of the VS Code extension (v1.103.0 or greater) preview Shiny interactive documents.

## Command Line

If you are using another editor, you can also preview Shiny interactive documents from the command line via `quarto preview`. For example:

``` {.bash filename="Terminal"}
quarto preview document.qmd
```

There are a number of options to the `preview` command to control the port and host of the document server as well as whether a browser is automatically opened for the running document. You can learn more about these options with `quarto preview help`.

If you want to serve your document without the features of `quarto preview` (i.e. automatic re-rendering when the document changes) you can use the `quarto serve` command:

``` {.bash filename="Terminal"}
quarto serve example.qmd
```

Note that the `quarto serve` command is exactly equivalent to rendering the document with Quarto and serving it with the `shiny run` command:

``` {.bash filename="Terminal"}
quarto render example.qmd
shiny run example-app.py
```

## Deployment

As you can see from `shiny run` example immediately above, Shiny interactive documents are really just normal Shiny applications that are created using `quarto render`. In fact, you don't need Quarto at all to serve interactive documents, rather, you can just `shiny run` the application generated by `quarto render`.

For any given `.qmd`, the generated Shiny application will be written to the base document name with the `-app.py` suffix appended (e.g. `example-app.py`). Note that the static HTML content located at `example.html` and `example_files/` is also part of the Shiny application.

You can deploy Shiny interactive documents using a variety of cloud hosting services and on-premisies servers. The most important things to remember when deploying interactive documents are:

1)  Your application consists of both the static HTML and Python script generated by `quarto render`. For an application generated from `example.qmd`, all of the following files need to be present at deployment time:

    ``` bash
    example-app.py
    example.html
    example_files/
    ```

2)  In the above example, your application entry point would `example-app:app`. This entry point is typically provided on the command line for various deployment techniques, and for normal Shiny applications is typically `app:app`. So when you see the documentation provide and example like this:

    ``` bash
    rsconnect deploy shiny . --entrypoint app:app
    ```

    You should translate it to this (assuming your source document is `example.qmd`):

    ``` bash
    rsconnect deploy shiny . --entrypoint example-app:app
    ```

Learn more about the various deployment options at <https://shiny.posit.co/py/docs/deploy.html>.


## Learning More

To learn more about Shiny for Python interactive documents see the following articles:

-   [Getting Started](index.qmd) explains the basics of Shiny interactive documents.

-   [Execution Contexts](execution.qmd) goes in depth on when different code cells run (e.g. rendering vs. serving).

-   [Component Layout](/docs/interactive/layout.qmd) enumerates the various techniques you can use to layout interactive components within your documents.