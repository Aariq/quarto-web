{
  "hash": "21af6e0d27fc8ef1e30e42a734ad8593",
  "result": {
    "markdown": "---\ntitle: \"HTML Basics\"\nformat: html\ncomments:\n  hypothesis: true\n---\n\n\n\n## Overview\n\nUse the `html` format to create HTML output. For example:\n\n```yaml\n---\ntitle: \"My document\"\nformat:\n  html:\n    toc: true\n    html-math-method: katex\n    css: styles\n---\n```\n\nThis example highlights a few of the options available for HTML output. This document covers these and other options in detail.\n\n```{.include}\n_document-options-begin.md\n```\n\n\n## CSS Styles\n\nTo add a CSS stylesheet to your document, just provide the `css` option. For example:\n\n``` {.yaml}\nformat:\n  html: \n    css: styles.css\n```\n\nUsing the `css` option works well for simple tweaks to document appearance. If you want to do more extensive customiation see the documentation on [HTML Themes](html-themes.md).\n\n## LaTeX Equations\n\nBy default, LaTeX equations are rendered using [MathJax](https://www.mathjax.org/). Use the `html-math-method` option to choose another method. For example:\n\n``` {.yaml}\nformat:\n  html:\n    html-math-method: katex\n```\n\nYou can also specify a `url` for the library to load for a given method:\n\n``` {.yaml}\nhtml-math-method:\n  method: mathjax\n  url: \"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"\n```\n\nAvailable math rendering methods include:\n\n| Method    | Description                                                                                                                                                                                                                      |\n|-----------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `mathjax` | Use [MathJax](https://www.mathjax.org/) to display embedded TeX math in HTML output.                                                                                                                                             |\n| `katex`   | Use [KaTeX](https://github.com/Khan/KaTeX) to display embedded TeX math in HTML output.                                                                                                                                          |\n| `webtex`  | Convert TeX formulas to `<img>` tags that link to an external script that converts formulas to images.                                                                                                                           |\n| `gladtex` | Enclose TeX math in `<eq>` tags in HTML output. The resulting HTML can then be processed by [GladTeX](https://humenda.github.io/GladTeX/) to produce images of the typeset formulas and an HTML file with links to these images. |\n| `mathml`  | Convert TeX math to [MathML](https://www.w3.org/Math/) (note that currently only Firefox and Safari natively support MathML)                                                                                                     |\n| `plain`   | No special processing (formulas are put inside a `span` with `class=\"math\").`                                                                                                                                                    |\n\nNote that this is more detailed documentation on each of these options in the Pandoc [Math Rendering in HTML](https://pandoc.org/MANUAL.html#math-rendering-in-html) documentation.\n\n## Code Blocks\n\n### Folding\n\nClick the **Code** button to see the code that produced this plot.\n\n::: {.cell fold='true' fig.alt='{}'}\n\n```{.r .cell-code  fold=\"true\"}\nlibrary(ggplot2)\ndat <- data.frame(cond = rep(c(\"A\", \"B\"), each=10),\n                  xvar = 1:20 + rnorm(20,sd=3),\n                  yvar = 1:20 + rnorm(20,sd=3))\n\nggplot(dat, aes(x=xvar, y=yvar)) +\n    geom_point(shape=1) + \n    geom_smooth() \n```\n\n::: {.cell-output-display}\n![](html-basics_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\nCode folding can be set globally or on a per-chunk basis (chunks can be set to display folded or unfolded by default). For example:\n\n``` {.yaml}\nformat:\n  html:\n    code-fold: true\n    code-summary: \"Show the code\"\n```\n\nNote that we've also customized summary text that appears in place of the code (the default is just \"Code\").\n\nValid values for `code-fold` include:\n\n| `false` | No folding (default)         |\n|---------|------------------------------|\n| `true`  | Fold code (initially hidden) |\n| `show`  | Fold code (initially shown)  |\n\nUse the `fold` and `summary` chunk attributes to control this on a chunk-by-chunk basis:\n\n```` {.python}\n```{r}\n#| fold: true\n#| summary: \"Show the code\"\n\n```\n````\n\n### Copy Button\n\nHover over the code block below and you will see a copy icon in the top-right corner:\n\n::: {.cell }\n\n```{.r .cell-code}\nlibrary(dygraphs)\ndygraph(nhtemp, main = \"New Haven Temperatures\") %>% \n  dyRangeSelector(dateWindow = c(\"1920-01-01\", \"1960-01-01\"))\n```\n:::\n\nThis behavior is enabled by default but you configure it using the `code-copy` option:\n\n``` {.yaml}\nformat:\n  html:\n    code-copy: false\n```\n\nValid values for `code-copy` include:\n\n+----------------------------------+-----------------------------------+\n| `hover`                          | Show button on hover (default)    |\n+==================================+===================================+\n| `true`                           | Always show code copy button      |\n+----------------------------------+-----------------------------------+\n| `false`                          | Never show code copy button       |\n+----------------------------------+-----------------------------------+\n\n### Linking\n\nThe `code-link` option enables hyper-linking of functions within code blocks to their online documentation:\n\n``` {.yaml}\nformat:\n  html:\n    code-link: true\n```\n\nCode linking is currently implemented only for the knitr engine (via the [downlit](https://downlit.r-lib.org) package).\n\n## Self Contained\n\nHTML documents typically have a number of external dependencies (e.g. images, CSS style sheets, JavaScript, etc.). By default these dependencies are placed in a `_files` directory alongside your document. For example, if you render `report.md` to HTML:\n\n``` {.bash}\n$ quarto render report.md --to html\n```\n\nThen the following output is produced:\n\n``` {.ini}\nreport.html\nreport_files/\n```\n\nYou might alternatively want to create an entirely self-contained HTML document (with images, css, etc. embedded into the HTML file). You can do this by specifying the `self-contained` option:\n\n``` {.yaml}\nformat:\n  html\n    self-contained: true\n```\n\nThis will produce a standalone HTML file with no external dependencies, using `data:` URIs to incorporate the contents of linked scripts, style sheets, images, and videos. The resulting file should be \"self-contained,\" in the sense that it needs no external files and no net access to be displayed properly by a browser.\n\n## Anchor Sections\n\nHover over a section title to see an anchor link. Enable/disable this behavior with:\n\n``` {.yaml}\nformat:\n  html:\n    anchor-sections: true\n```\n\nAnchor links are also automatically added to figures and tables that have a [cross reference](../authoring/cross-references.md) defined.\n\n## Reference Popups\n\nHover over @xie2015 to see a reference to the definitive book on knitr[^1].\n\n[^1]: knitr is an R package for creating dynamic documents.\n\nControl this behavior with the following options:\n\n``` {.yaml}\nformat:\n  html:\n    hover-citations: true\n    hover-footnotes: true\n```\n\n## Commenting\n\nThis page has commenting with [Hypothes.is](https://web.hypothes.is/) enabled via the following YAML option:\n\n``` {.yaml}\ncomments:\n  hypothesis: true\n```\n\nYou can see the Hypothesis UI at the far right of the page. Rather than `true`, you can specify any of the available Hypothesis [embedding options](https://h.readthedocs.io/projects/client/en/latest/publishers/config/) as a sub-key of `hypothesis`. For example:\n\n``` {.yaml}\ncomments:\n  hypothesis: \n    theme: clean\n```\n\nYou can enable [Utterances](https://utteranc.es/) commenting using the `utterances` option. Here you need to specify at least the Git repo you want to use for storing comments:\n\n``` {.yaml}\ncomments:\n  utterances:\n    repo: quarto-dev/quarto-docs\n```\n\nYou can also specify the other options [documented here](https://utteranc.es/).\n\n```{.include}\n_document-options-end.md\n```\n\n\n## References {.unlisted}",
    "supporting": [
      "html-basics_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": [],
    "engineDependencies": {},
    "preserve": {},
    "postProcess": null
  }
}