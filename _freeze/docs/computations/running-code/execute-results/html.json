{
  "hash": "199a84285261915d67f4b56f2f23cc06",
  "result": {
    "markdown": "---\ntitle: Running Code\ndescription: \"Quarto supports executable code blocks within markdown. This allows you to create fully reproducible documents and reports---the code required to produce your output is part of the document itself, and is automatically re-run whenever the document is rendered.\"\nformat: html\n---\n\n## Overview\n\nQuarto supports executable code blocks within markdown. This allows you to create fully reproducible documents and reports---the code required to produce your output is part of the document itself, and is automatically re-run whenever the document is rendered.\n\nThere are currently two engines supported for running computations:\n\n-   [Jupyter](https://jupyter.org/), for running code from Python and many other languages.\n\n-   [Knitr](https://yihui.org/knitr/), for running code from R.\n\nExtensive customization of code chunk output is supported, including the ability to hide code and/or output as well as fold code (make it visible only on demand).\n\n## Code Blocks\n\nCode blocks that use braces around the language name (e.g. ```` ```{python} ````) are executable, and will be run by Quarto during render. Here are a couple of simple examples in Python and R to illustrate (the output produced by the code block is shown on the Output tab):\n\n### Python (Jupyter)\n\n::: panel-tabset\n## Code\n\n````{.markdown}\n---\ntitle: \"Jupyter Document\"\nformat: html\njupyter: python3\n---\n\n```{{python}}\nimport matplotlib.pyplot as plt\nplt.plot([1,2,3,4])\nplt.show()\n```\n\n```{{python}}\nimport pandas as pd\nd = {'one' : [1., 2., 3., 4.],\n     'two' : [4., 3., 2., 1.]}\ndf = pd.DataFrame(d)\ndf\n```\n````\n\n## Output\n\n![](/docs/computations/images/jupyter-document.png){.border fig-alt=\"The resulting document rendered from the source code in the `Code` tab using the Jupyter engine. At the top of the page is the title `Jupyter Document` in large text. There is a block of code with a gray background underneath the title. Underneath this block is a line plot of y = x. There is another code block with a gray background under this and a table underneath that.\"}\n:::\n\n### R (Knitr)\n\n::: panel-tabset\n## Code\n\n````{.markdown}\n---\ntitle: \"Knitr Document\"\nformat: html\nexecute:\n  warning: false\n---\n\n```{{r}}\nlibrary(ggplot2)\nggplot(airquality, aes(Temp, Ozone)) + \n        geom_point() + \n        geom_smooth(method = \"loess\", se = FALSE)\n```\n\n```{{r}}\nsummary(airquality)\n```\n````\n\n## Output\n\n![](/docs/computations/images/knitr-document.png){.border .preview-image fig-alt=\"The resulting document rendered from the source code in the `Code` tab using the Knitr engine. At the top of the page is the title `Knitr Document` in large text. There is a block of code with a gray background underneath the title. Underneath this block is a scatterplot of the `airquality` dataset fit with a polynomial regression line and overlaid with a grey ribbon representing the confidence interval. There is another code block with a gray background under this plot with the output of `summary(airquality)`.\"}\n:::\n\nNote that we added the `execute: warning: false` option to suppress printing of warnings. See [Execution Options](/docs/computations/execution-options.qmd) for additional details.\n\nYou can produce a wide variety of output types from executable code blocks, including:\n\n-   Static plots (e.g. from matplotlib or ggplot2).\n\n-   Interactive plots (e.g. from plotly or leaflet).\n\n-   Tabular output (e.g. from printing R or Pandas data frames)\n\n-   Plain text output (e.g. printing the results of statistical summaries).\n\n### Non-Executable Blocks\n\nNote that code blocks that use convential markdown code block syntax (either ```` ```python ```` or ```` ```{.python} ````) are not executable:\n\n+-------------------+---------------+\n| Code Block Syntax | Executable?   |\n+===================+:=============:+\n|     ```{python}   | Yes           |\n|     1 + 1         |               |\n|     ```           |               |\n+-------------------+---------------+\n|     ```python     | No            |\n|     1 + 1         |               |\n|     ```           |               |\n+-------------------+---------------+\n|     ```{.python}  | No            |\n|     1 + 1         |               |\n|     ```           |               |\n+-------------------+---------------+\n\nNon-executable code blocks are printed but not executed.\n\n## Rendering\n\n### Markdown\n\nQuarto will automatically run computations in any markdown document that contains executable code blocks. For example, the Python example shown above might be rendered with:\n\n``` bash\nquarto render jupyter-document.qmd\n```\n\nThe R example might have been rendered with:\n\n``` bash\nquarto render knitr-document.qmd\n```\n\n### Notebooks\n\nThe Python example above uses a markdown input file, Quarto can also render any Jupyter notebook (.ipynb):\n\n``` bash\nquarto render jupyter-document.ipynb\n```\n\n``` include\n_jupyter-execute.md\n```\n\n## Inline Code\n\nBoth Jupyter and Knitr support executing inline code within markdown (e.g. to allow narrative to automatically use the most up to date computations). The syntax for this varies across the engines.\n\n### Jupyter\n\nTo include executable expressions within markdown in a Jupyter notebook, you use [`IPython.display.Markdown`](https://ipython.readthedocs.io/en/stable/api/generated/IPython.display.html) to dynamically generate markdown from within an ordinary code cell. For example, if we have a variable `radius` we can use it within markdown as follows:\n\n``` {{python}}\n#| echo: false\nradius = 10\nfrom IPython.display import display, Markdown\ndisplay(Markdown(\"\"\"\n## Circle\n\nThe radius of the circle is {radius}.\n\"\"\".format(radius = radius)))\n```\n\nNote that we also include the `echo: false` option to ensure that the code used to generate markdown isn't included in the final output.\n\n### Knitr\n\nTo include executable expressions within markdown for Knitr, enclose the expression in `` `r ` ``. For example, if we have a variable `radius` we can use it within markdown as follows:\n\n``` markdown\n## Circle\n\nThe radius of the circle is `r radius`.\n```\n\n\n## Engine Binding\n\nEarlier we said that the engine used for computations was determined automatically. You may want to customize this---for example you may want to use the Jupyter [R kernel](https://github.com/IRkernel/IRkernel) rather than Knitr, or you may want to use Knitr with Python code (via [reticulate](https://rstudio.github.io/reticulate/)).\n\nHere are the basic rules for automatic binding:\n\n+-----------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| Extension | Engine Binding                                                                                                                                                                                     |\n+===========+====================================================================================================================================================================================================+\n| .qmd      | Use Knitr engine if an `{r}` code block is discovered within the file                                                                                                                              |\n|           |                                                                                                                                                                                                    |\n|           | Use Jupyter engine if an executable code block (e.g. `{python}`) is discovered within the file. The kernel used is determined based on the language of the first executable code block discovered. |\n|           |                                                                                                                                                                                                    |\n|           | Use no engine if no executable code blocks are discovered.                                                                                                                                         |\n+-----------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| .ipynb    | Jupyter engine                                                                                                                                                                                     |\n+-----------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| .Rmd      | Knitr engine                                                                                                                                                                                       |\n+-----------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| .md       | No engine                                                                                                                                                                                          |\n+-----------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n\nYou can override the engine used via the `engine` option. For example:\n\n``` markdown\nengine: jupyter\n```\n\n``` markdown\nengine: knitr\n```\n\nYou can also specify that no execution engine should be used via `engine: markdown`.\n\nThe presence of the `knitr` or `jupyter` option will also override the default engine:\n\n``` markdown\nknitr: true\n```\n\n``` markdown\njupyter: python3\n```\n\nVariations with additional engine-specific options also work to override the default engine:\n\n``` markdown\nknitr:\n  opts_knit:\n    verbose: true\n```\n\n``` markdown\njupyter:\n  kernelspec:\n    display_name: Python 3\n    language: python\n    name: python3\n```\n\n## Fenced Echo\n\nIf you are writing a tutorial or documentation on using Quarto code blocks, you'll likely want to include the fenced code delimiter (e.g. ```` ```{python} ````) in your code output to emphasize that executable code requires that delimiter. You can do this using the `echo: fenced` option. For example, the following code block:\n\n``` {{python}}\n#| echo: fenced\n1 + 1\n```\n\nWill be rendered as:\n\n::: {.cell execution_count=1}\n```` { .cell-code}\n```{{python}}\n1 + 1\n```\n\n````\n\n::: {.cell-output-display execution_count=1}\n```\n2\n```\n:::\n:::\n\n\nThis is especially useful when you want to demonstrate the use of cell options. For example, here we demonstrate the use of the `output` and `code-overflow` options:\n\n``` {{python}}\n#| echo: fenced\n#| output: false\n#| code-overflow: wrap\n1 + 1\n```\n\nThis code block appears in the rendered document as:\n\n::: {.cell execution_count=2}\n```` { .cell-code .code-overflow-wrap}\n```{{python}}\n#| output: false\n#| code-overflow: wrap\n1 + 1\n```\n\n````\n:::\n\n\nNote that all YAML options will be included in the fenced code output *except for* `echo: fenced` (as that might be confusing to readers).\n\nThis behavior can also be specified at the document level if you want all of your executable code blocks to include the fenced delimiter and YAML options:\n\n``` yaml\n---\ntitle: \"My Document\"\nformat: html\nexecute:\n  echo: fenced\n---\n```\n\n#### Unexecuted Blocks\n\nOften you'll want to include a fenced code block purely as documentation (not executable). You can do this by using two curly braces around the language (e.g. `python`, `r`, etc.) rather than one. For example:\n\n``` {{{python}}}\n1 + 1\n```\n\nWill be output into the document as:\n\n``` {{python}}\n1 + 1\n```\n\nIf you want to show an example with multiple code blocks and other markdown, just enclose the entire example in 4 backticks (e.g. ````` ```` `````) and use the two curly brace syntax for code blocks within. For example:\n\n    ````\n    ---\n    title: \"My document\"\n    ---\n\n    Some markdown content.\n\n    ```{{{python}}}\n    1 + 1\n    ```\n\n    Some additional markdown content.\n\n    ````\n\n",
    "supporting": [
      "running-code_files"
    ],
    "filters": [],
    "includes": {}
  }
}