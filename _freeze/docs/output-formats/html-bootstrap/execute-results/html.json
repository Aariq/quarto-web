{
  "hash": "b8e57a7295f9ebafd6e6d4c0052ab861",
  "result": {
    "markdown": "---\ntitle: \"HTML w/ Bootstrap\"\nformat: html\n---\n\n## Overview\n\nThere are a number of additional HTML output features that are available when you are using a [Bootstrap](https://getbootstrap.com/) based theme, including:\n\n-   Floating TOC\n\n-   Tabsets\n\n-   Additional code block options\n\n-   Responsive figures\n\n::: {.callout-note}\nNote that the `html` format uses a Bootstrap theme by default, so you don't need to do anything special to enable these features. If however you specify `theme: none` or `theme: pandoc` they will not be available.\n:::\n\n## Floating TOC\n\nThe HTML format by default uses a floating table of contents which can be customized using the following:\n\n``` {.yaml}\nformat:\n  html:\n    toc: true\n    toc-float: true\n    toc-title: Contents\n```\n\nThe floating table of contents can be used to navigate to sections of the document and also will automatically highlight the appropriate section as the user scrolls. The table of contents is responsive and will become hidden once the viewport becomes too narrow. See an example on the right of this page.\n\n## Tabsets\n\nYou can use tabsets to present content that will vary in interest depending on the audience. For example, here we provide some example code in a variety of languages:\n\n::: {.panel-tabset}\n## R\n\n``` {.r}\nfizz_buzz <- function(fbnums = 1:50) {\n  output <- dplyr::case_when(\n    fbnums %% 15 == 0 ~ \"FizzBuzz\",\n    fbnums %% 3 == 0 ~ \"Fizz\",\n    fbnums %% 5 == 0 ~ \"Buzz\",\n    TRUE ~ as.character(fbnums)\n  )\n  print(output)\n}\n```\n\n## Python\n\n``` {.python}\ndef fizz_buzz(num):\n  if num % 15 == 0:\n    print(\"FizzBuzz\")\n  elif num % 5 == 0:\n    print(\"Buzz\")\n  elif num % 3 == 0:\n    print(\"Fizz\")\n  else:\n    print(num)\n```\n\n## Java\n\n``` {.java}\npublic class FizzBuzz\n{\n  public static void fizzBuzz(int num)\n  {\n    if (num % 15 == 0) {\n      System.out.println(\"FizzBuzz\");\n    } else if (num % 5 == 0) {\n      System.out.println(\"Buzz\");\n    } else if (num % 3 == 0) {\n      System.out.println(\"Fizz\");\n    } else {\n      System.out.println(num);\n    }\n  }\n}\n```\n\n## Julia\n\n``` {.julia}\nfunction FizzBuzz(num)\n  if num % 15 == 0\n    println(\"FizzBuzz\")\n  elseif num % 5 == 0\n    println(\"Buzz\")\n  elseif num % 3 == 0\n    println(\"Fizz\")\n  else\n    println(num)\n  end\nend\n```\n:::\n\nCreate a tabset via a markdown div with the class name panel-tabset (e.g. `::: {.panel-tabset}`). Each top-level heading within the div creates a new tab. For example, here is the markdown used to implement the first two tabs displayed above:\n\n```` {.markdown}\n::: {.panel-tabset}\n## R\n\n``` {.r}\nfizz_buzz <- function(fbnums = 1:50) {\n  output <- dplyr::case_when(\n    fbnums %% 15 == 0 ~ \"FizzBuzz\",\n    fbnums %% 3 == 0 ~ \"Fizz\",\n    fbnums %% 5 == 0 ~ \"Buzz\",\n    TRUE ~ as.character(fbnums)\n  )\n  print(output)\n}\n```\n\n## Python\n\n``` {.python}\ndef fizz_buzz(num):\n  if num % 15 == 0:\n    print(\"FizzBuzz\")\n  elif num % 5 == 0:\n    print(\"Buzz\")\n  elif num % 3 == 0:\n    print(\"Fizz\")\n  else:\n    print(num)\n```\n\n:::\n````\n\n## Code Blocks\n\nBy default code blocks are rendered with a left border whose color is derived from the currently theme. You can customize code chunk appearance with some simple options that control the background color and left border. Options can either be booleans to enable or disable the treatment or can be legal CSS color strings (or they could even be SASS variable names!).\n\n### Appearance\n\nHere is the default appearance for code blocks (`code-background: true`):\n\n![](images/code-bg.png)\n\nYou can instead use a left border treatment using the `code-border-left` option:\n\n``` {.yaml}\ncode-border-left: true\n```\n\n![](images/code-default.png)\n\nYou can combine a background and border treatment as well as customize the left border color:\n\n``` {.yaml}\ncode-background: true\ncode-border-left: \"#31BAE9\"\n```\n\n![](images/code-custom.png)\n\n### Highlighting\n\nYou can specify the code highlighting style using `highlight-style` and specifying one of the supported themes. Supported themes include all the themes included in Pandoc (pygments, tango, espresso, zenburn, kate, monochrome, breezedark, haddock) as well as an additional set of extended themes here:\n\n<https://github.com/quarto-dev/quarto-cli/tree/main/src/resources/pandoc/highlight-styles>\n\nFor example:\n\n``` {.yaml}\nhighlight-style: github\n```\n\nHighlighting themes can provide either a single highlighting definition or two definitions, one optimized for a light colored background and another optimized for a dark color background. When available, Quarto will automatically select the appropriate style based upon the code chunk background color's darkness. Users may always opt to specify the full name (e.g. `atom-one-dark`) to by pass this automatic behavior.\n\nBy default, code is highlighted using the `arrow` theme. We've additionally introduced the `arrow-dark` theme which is designed to provide beautiful, accessible highlighting against dark backgrounds.\n\nExamples of the light and dark themes:\n\n#### Arrow (light)\n\n![](images/arrow.png)\n\n#### Arrow (dark)\n\n![](images/arrow-dark.png)\n\n#### Ayu (light)\n\n![](images/ayu.png)\n\n#### Ayu (dark)\n\n![](images/ayu-dark.png)\n\n## Responsive Figures\n\nIf an image does not include an explicitly set height, it will automatically become responsive. Try resizing the browser and note how the image below grows and shrinks.\n\n::: {.cell}\n::: {.cell-output-display}\n![](html-bootstrap_files/figure-html/pressure-1.png){width=672}\n:::\n:::",
    "supporting": [
      "html-bootstrap_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "dependencies": {
      "type": "includes",
      "data": []
    },
    "preserve": {},
    "postProcess": null
  }
}