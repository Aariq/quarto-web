{
  "hash": "f7dbafda4c52b92b4757762a3cdc7f6e",
  "result": {
    "markdown": "---\ntitle: \"HTML w/ Bootstrap\"\ndescription: \"Quarto supports a number of additional HTML output features that are available when you are using a Bootstrap based theme.\"\nformat: html\n---\n\n\n## Syntax Highlighting\n\nPandoc will automatically highlight syntax in [fenced code blocks](https://pandoc.org/MANUAL.html#fenced-code-blocks) that are marked with a language name.\n\nYou can specify the code highlighting style using `highlight-style` and specifying one of the supported themes. Supported themes include: arrow, pygments, tango, espresso, zenburn, kate, monochrome, breezedark, haddock, atom-one, ayu, breeze, dracula, github, gruvbox, monokai, nord, oblivion, printing, radical, solarized, and vim.\n\nFor example:\n\n``` {.yaml}\nhighlight-style: github\n```\n\nHighlighting themes can provide either a single highlighting definition or two definitions, one optimized for a light colored background and another optimized for a dark color background. When available, Quarto will automatically select the appropriate style based upon the code chunk background color's darkness. You may may always opt to specify the full name (e.g. `atom-one-dark`) to bypass this automatic behavior.\n\nBy default, code is highlighted using the `arrow` theme, which is optimized for accessibility. Here are examples of the `arrow` light and dark themes:\n\n::: {.panel-tabset}\n#### Light\n\n![](images/arrow.png)\n\n#### Dark\n\n![](images/arrow-dark.png)\n:::\n\n\n## Code Blocks\n\n### Folding\n\nClick the **Code** button to see the code that produced this plot.\n\n::: {.cell}\n\n```{.r .cell-code  fold=\"true\"}\nlibrary(ggplot2)\ndat <- data.frame(cond = rep(c(\"A\", \"B\"), each=10),\n                  xvar = 1:20 + rnorm(20,sd=3),\n                  yvar = 1:20 + rnorm(20,sd=3))\n\nggplot(dat, aes(x=xvar, y=yvar)) +\n    geom_point(shape=1) + \n    geom_smooth() \n```\n\n::: {.cell-output-stderr}\n```\n`geom_smooth()` using method = 'loess' and formula 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](html-bootstrap_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\nCode folding can be set globally or on a per-chunk basis (chunks can be set to display folded or unfolded by default). For example:\n\n``` {.yaml}\nformat:\n  html:\n    code-fold: true\n    code-summary: \"Show the code\"\n```\n\nNote that we've also customized summary text that appears in place of the code (the default is just \"Code\").\n\nValid values for `code-fold` include:\n\n|         |                              |\n|---------|------------------------------|\n| `false` | No folding (default)         |\n| `true`  | Fold code (initially hidden) |\n| `show`  | Fold code (initially shown)  |\n\nUse the `fold` and `summary` chunk attributes to control this on a chunk-by-chunk basis:\n\n```` {.python}\n```{r}\n#| fold: true\n#| summary: \"Show the code\"\n\n```\n````\n\n### Copy Button\n\nHover over the code block below and you will see a copy icon in the top-right corner:\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dygraphs)\ndygraph(nhtemp, main = \"New Haven Temperatures\") %>% \n  dyRangeSelector(dateWindow = c(\"1920-01-01\", \"1960-01-01\"))\n```\n:::\n\nThis behavior is enabled by default but you configure it using the `code-copy` option:\n\n``` {.yaml}\nformat:\n  html:\n    code-copy: false\n```\n\nValid values for `code-copy` include:\n\n|         |                                |\n|---------|--------------------------------|\n| `hover` | Show button on hover (default) |\n| `true`  | Always show code copy button   |\n| `false` | Never show code copy button    |\n\n### Linking\n\nThe `code-link` option enables hyper-linking of functions within code blocks to their online documentation:\n\n``` {.yaml}\nformat:\n  html:\n    code-link: true\n```\n\nCode linking is currently implemented only for the knitr engine (via the [downlit](https://downlit.r-lib.org) package).\n\n\n## Code Blocks\n\nBy default code blocks are rendered with a left border whose color is derived from the currently theme. You can customize code chunk appearance with some simple options that control the background color and left border. Options can either be booleans to enable or disable the treatment or can be legal CSS color strings (or they could even be SASS variable names!).\n\n### Appearance\n\nHere is the default appearance for code blocks (`code-background: true`):\n\n![](images/code-bg.png)\n\nYou can instead use a left border treatment using the `code-border-left` option:\n\n``` {.yaml}\ncode-border-left: true\n```\n\n![](images/code-default.png)\n\nYou can combine a background and border treatment as well as customize the left border color:\n\n``` {.yaml}\ncode-background: true\ncode-border-left: \"#31BAE9\"\n```\n\n![](images/code-custom.png)\n\n### Highlighting\n\nYou can specify the code highlighting style using `highlight-style` and specifying one of the supported themes. Supported themes include all the themes included in Pandoc (pygments, tango, espresso, zenburn, kate, monochrome, breezedark, haddock) as well as an additional set of extended themes here:\n\n<https://github.com/quarto-dev/quarto-cli/tree/main/src/resources/pandoc/highlight-styles>\n\nFor example:\n\n``` {.yaml}\nhighlight-style: github\n```\n\nHighlighting themes can provide either a single highlighting definition or two definitions, one optimized for a light colored background and another optimized for a dark color background. When available, Quarto will automatically select the appropriate style based upon the code chunk background color's darkness. Users may always opt to specify the full name (e.g. `atom-one-dark`) to by pass this automatic behavior.\n\nBy default, code is highlighted using the `arrow` theme. We've additionally introduced the `arrow-dark` theme which is designed to provide beautiful, accessible highlighting against dark backgrounds.\n\nExamples of the light and dark themes:\n\n#### Arrow (light)\n\n![](images/arrow.png)\n\n#### Arrow (dark)\n\n![](images/arrow-dark.png)\n\n#### Ayu (light)\n\n![](images/ayu.png)\n\n#### Ayu (dark)\n\n![](images/ayu-dark.png){.preview-image}\n\n## Responsive Figures\n\nIf an image does not include an explicitly set height, it will automatically become responsive. Try resizing the browser and note how the image below grows and shrinks.\n\n::: {.cell}\n::: {.cell-output-display}\n![](html-bootstrap_files/figure-html/pressure-1.png){width=672}\n:::\n:::",
    "supporting": [
      "html-bootstrap_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": [],
    "engineDependencies": {},
    "preserve": {},
    "postProcess": null
  }
}