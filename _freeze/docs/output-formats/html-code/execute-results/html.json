{
  "hash": "5e91c4aec1174687e9bb671b02546de3",
  "result": {
    "markdown": "---\ntitle: \"HTML Code Blocks\"\ndescription: \"Quarto options for customizing the display of source code in HTML output.\"\nformat: \n  html:\n    code-tools: true\nexecute:\n  warning: false\n---\n\n## Overview\n\nThere are wide variety of options available to customize the display of source code within HTML documents, including:\n\n1.  Hiding some or all code that was executed by [Knitr](https://yihui.name/knitr) or [Jupyter](https://jupyter.org).\n2.  Code folding for executed code (hidden by default and expandable by readers).\n3.  View the source code of the markdown file used to generate the document.\n4.  Syntax highlighting themes and other options to control the appearance of code.\n5.  Copy to clipboard button for code blocks.\n6.  Generating hyperlinks to online documentation for functions used within code blocks via the [downlit](https://downlit.r-lib.org/) package (note that this option currently only works when using the Knitr engine).\n\nDetails on using all of these options are provided below.\n\n## Hiding Code\n\nFor many documents you may want to hide all of the executable source code used to produce dynamic outputs. You can do this by specifying `echo: false` in the document `execute` options. For example:\n\n``` {.yaml}\n---\ntitle: \"My Document\"\nexecute:\n  echo: false\njupyter: python3\n---\n```\n\nNote that we can override this option on a per code-block basis. For example:\n\n```` {.markdown}\n```{python}\n#| echo: true\n\nimport matplotlib.pyplot as plt\nplt.plot([1,2,3,4])\nplt.show()\n```\n````\n\nCode block options are included in a special comment at the top of the block (lines at the top prefaced with `#|` are considered options).\n\n## Folding Code\n\nUse the `code-fold` option to include code but have it hidden by default using the HTML `<details>` tag. For example, click the **Code** button to see the code that produced this plot.\n\n::: {.cell}\n\n```{.r .cell-code  fold=\"true\"}\nlibrary(ggplot2)\ndat <- data.frame(cond = rep(c(\"A\", \"B\"), each=10),\n                  xvar = 1:20 + rnorm(20,sd=3),\n                  yvar = 1:20 + rnorm(20,sd=3))\n\nggplot(dat, aes(x=xvar, y=yvar)) +\n    geom_point(shape=1) + \n    geom_smooth() \n```\n\n::: {.cell-output-display}\n![](html-code_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\nHere we specify both `code-fold: true` as well as custom summary text (the default is just \"Code\" as shown above):\n\n``` {.yaml}\nformat:\n  html:\n    code-fold: true\n    code-summary: \"Show the code\"\n```\n\nValid values for `code-fold` include:\n\n| Value   | Behavior                     |\n|---------|------------------------------|\n| `false` | No folding (default)         |\n| `true`  | Fold code (initially hidden) |\n| `show`  | Fold code (initially shown)  |\n\nUse the `fold` and `summary` chunk attributes to control this on a chunk-by-chunk basis:\n\n```` {.python}\n```{r}\n#| fold: true\n#| summary: \"Show the code\"\n\n```\n````\n\n## Code Tools\n\nYou can include a **Code** menu in the header of your document that provides various tools for readers to interact with the source code. Specify `code-tools: true` to activate these tools:\n\n``` {.yaml}\nformat:\n  html:\n    code-fold: true\n    code-tools: true\n```\n\nIf you have a document that includes folded code blocks then the **Code** menu will present options to show and hide the folded code as well as view the full source code of the document:\n\n![](images/code-tools-01.png){.border}\n\nThis document specifies `code-tools: true` in it's options so you should see the **Code** menu above next to the main header.\n\nYou can control which of these options are made available as well as the \"Code\" caption text using sub-options of `code-tools`. For example, here we specify that we want only \"View Source\" (no toggling of code visibility) and no caption on the code menu:\n\n``` {.yaml}\nformat:\n  html: \n    code-tools:\n      source: true\n      toggle: false\n      caption: none\n```\n\nBy default, the source code is embedded in the document and shown in a popup window like this:\n\n![](images/code-tools-source.png)\n\nYou can alternatively specify a URL for the value of `source`:\n\n``` {.yaml}\nformat:\n  html: \n    code-tools:\n      source: https://github.com/quarto-dev/quarto-web/blob/main/index.md\n```\n\nIf you are within a project and have specified a `repo-url` option then you can just use `repo` and the correct link to your source file will be generated:\n\n``` {.yaml}\nformat:\n  html: \n    code-tools:\n      source: repo\n```\n\n## Appearance\n\nBy default code blocks are rendered with a left border whose color is derived from the currently theme. You can customize code chunk appearance with some simple options that control the background color and left border. Options can either be booleans to enable or disable the treatment or can be legal CSS color strings (or they could even be SASS variable names!).\n\nHere is the default appearance for code blocks (`code-background: true`):\n\n![](images/code-bg.png)\n\nYou can instead use a left border treatment using the `code-border-left` option:\n\n``` {.yaml}\ncode-border-left: true\n```\n\n![](images/code-default.png)\n\nYou can combine a background and border treatment as well as customize the left border color:\n\n``` {.yaml}\ncode-background: true\ncode-border-left: \"#31BAE9\"\n```\n\n![](images/code-custom.png)\n\n## Highlighting\n\nYou can specify the code highlighting style using `highlight-style` and specifying one of the supported themes. Supported themes include all the themes included in Pandoc:\n\n-   pygments\n-   tango\n-   espresso\n-   zenburn\n-   kate\n-   monochrome\n-   breezedark\n-   haddock\n\nAs well as an additional set of extended themes including:\n\n-   arrow\n-   atom-one\n-   ayu\n-   breeze\n-   dracula\n-   github\n-   gruvbox\n-   mokokai\n-   nord\n-   oblivion\n-   printing\n-   radical\n-   solarized\n-   vim-dark\n\nFor example:\n\n``` {.yaml}\nhighlight-style: github\n```\n\nHighlighting themes can provide either a single highlighting definition or two definitions, one optimized for a light colored background and another optimized for a dark color background. When available, Quarto will automatically select the appropriate style based upon the code chunk background color's darkness. Users may always opt to specify the full name (e.g. `atom-one-dark`) to by pass this automatic behavior.\n\nBy default, code is highlighted using the `arrow` theme, which optimized for accessibility. We've additionally introduced the `arrow-dark` theme which is designed to provide accessible highlighting against dark backgrounds.\n\nExamples of the light and dark themes:\n\n#### Arrow (light)\n\n![](images/arrow.png)\n\n#### Arrow (dark)\n\n![](images/arrow-dark.png)\n\n#### Ayu (light)\n\n![](images/ayu.png)\n\n#### Ayu (dark)\n\n![](images/ayu-dark.png){.preview-image}\n\n## Copy Button\n\nHover over the code block below and you will see a copy icon in the top-right corner:\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dygraphs)\ndygraph(nhtemp, main = \"New Haven Temperatures\") %>% \n  dyRangeSelector(dateWindow = c(\"1920-01-01\", \"1960-01-01\"))\n```\n:::\n\nThis behavior is enabled by default but you configure it using the `code-copy` option:\n\n``` {.yaml}\nformat:\n  html:\n    code-copy: false\n```\n\nValid values for `code-copy` include:\n\n|         |                                |\n|---------|--------------------------------|\n| `hover` | Show button on hover (default) |\n| `true`  | Always show code copy button   |\n| `false` | Never show code copy button    |\n\n## Code Linking\n\nThe `code-link` option enables hyper-linking of functions within code blocks to their online documentation:\n\n``` {.yaml}\nformat:\n  html:\n    code-link: true\n```\n\nCode linking is currently implemented only for the knitr engine (via the [downlit](https://downlit.r-lib.org) package).",
    "supporting": [
      "html-code_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": [],
    "engineDependencies": {},
    "preserve": {},
    "postProcess": null
  }
}