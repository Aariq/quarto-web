{
  "hash": "8eedb3e0463f1ab04cbf495852a7b057",
  "result": {
    "markdown": "---\ntitle: \"Revealjs\"\nslide-format: revealjs\n---\n\n## Overview\n\nYou can create [Revealjs](https://revealjs.com/) presentations using the `revealjs` format. The best way to get a sense for the capabilities of Revealjs is this [demo](demo/){target=\"_blank\"} presentation:\n\n::: column-page-right\n```{=html}\n<iframe class=\"slide-deck\" src=\"demo/\"></iframe>\n```\n:::\n\nIf you prefer to view the demo in a standalone browser you can do that [here](demo/){target=\"_blank\"}. Check out the [source code](https://github.com/quarto-dev/quarto-web/blob/main/docs/presentations/revealjs/demo/index.qmd) for the demo to see how the slides were created.\n\nSee the Revealjs [format reference](../../reference/formats/presentations/revealjs.qmd) for a comprehensive overview of all options supported for Revealjs output.\n\n``` include\n../_creating-slides.md\n../_incremental-lists.md\n../_incremental-pause.md\n../_columns.md\n```\n\n## Content Overflow\n\nIf you have a slide that has more content than can be displayed on a single frame there are two slide-level classes you can apply to mitigate this:\n\n1.  Use the `.smaller` class to use a smaller typeface so that more text fits on the slide. For example:\n\n    ```{.markdown code-example=\"examples/smaller.qmd\"}\n    ## Slide Title {.smaller}\n    ```\n\n2.  Use the `.scrollable` class to make off-slide content available by scrolling. For example:\n\n    ```{.markdown code-example=\"examples/scrollable.qmd\"}\n    ## Slide Title {.scrollable}\n    ```\n\nBoth of these options can also be applied globally to all slides as follows:\n\n```{.yaml code-example=\"examples/scrollable-and-smaller.qmd\"}\n---\nformat:\n  revealjs:\n    smaller: true\n    scrollable: true\n---\n```\n\n``` include\n../_speaker-notes.md\n```\n\nPress the <kbd>S</kbd> key (or use the [Navigation Menu](presenting.qmd#navigation-menu)) to show the presentation speaker view:\n\n![](images/speaker-view.png){.border}\n\nYou'll typically use this view on one screen (e.g. your laptop) while presenting the slides on another screen.\n\n## Themes\n\n``` include\n_theme-basics.md\n```\n\nSee the article on [Reveal Themes](themes.qmd) for additional details on customizing themes and creating brand new themes of your own.\n\n## Footer & Logo\n\nYou can include footer text and a logo at the bottom of each slide using the `footer` and `logo` options. For example:\n\n```{.yaml code-example=\"examples/footer-and-logo.qmd\"}\n---\nformat:\n  revealjs:\n    logo: logo.png\n    footer: \"Footer text\"\n---\n```\n\nYou can also include a custom footer per-slide by adding a footer div at the bottom of the the slide:\n\n```{.markdown code-example=\"examples/per-slide-footer.qmd\"}\n## Slide Title\n\nSlide content\n\n::: footer\nCustom footer text\n:::\n```\n\n## Code Blocks\n\nMost of the core capabilities of Quarto [HTML Code Blocks](../../output-formats/html-code.qmd) are available for Reveal slides, including code folding, code copy, and the ability to pick a custom syntax highlighting theme. Note that if you choose a dark Reveal theme then the default Quarto dark syntax highlighting theme will be used.\n\n### Line Highlighting\n\nYou may want to highlight specific lines of code output (or even highlight distinct lines over a progression of steps). You can do this using the `code-line-numbers` attribute of code blocks. For example:\n\n````{.java code-example=\"examples/line-highlighting-1.qmd\"}\n```{.python code-line-numbers=\"6-8\"}\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'})\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()\n```\n````\n\nNote that you can also highlight disparate ranges of lines by separating them with a comma. For example:\n\n````{.java code-example=\"examples/line-highlighting-2.qmd\"}\n```{.python code-line-numbers=\"7,9\"}\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'})\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()\n```\n````\n\nFinally, you can highlight different line ranges progressively by separating them with `|`. For example, here we start by showing all lines, then progress to highlighting line 6, and finally to highlighting line 9:\n\n````{.java code-example=\"examples/line-highlighting-3.qmd\"}\n```{.python code-line-numbers=\"|6|9\"}\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'})\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()\n```\n````\n\nYou can use this same option within an executable code cell by using the `code-line-numbers` cell options:\n\n````{.java code-example=\"examples/line-highlighting-4.qmd\"}\n```{.python}\n#| echo: fenced\n#| code-line-numbers: \"|6|9\"\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'})\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()\n```\n````\n\n## Executable Code\n\nYou can include the output of executable code blocks on slides just the same as with other Quarto documents. This works essentially the same for slides as it does for other formats, however there are a couple of special considerations for slides covered below.\n\n### Figure Size\n\nYou will frequently need to customize the size of figures created for slides so that they either fill the entire slide or whatever region of the slide you need them to. Quarto provides some help here: for Python the figure sizes for [Matplotlib](https://matplotlib.org/) and [Plotly Express](https://plotly.com/python/plotly-express/) are set to fill the slide area below the title, and for R the Knitr figure width and height are similarly defaulted.\n\nNevertheless, you will frequently need to change these defaults for a given figure. The details on how to do this vary by graphics library. Here's an example of explicitly sizing an [Altair](https://altair-viz.github.io/) plot:\n\nIS THIS CHANGING AT ALL HELLO HELLO\n\n```{.python code-example=\"examples/executable-code-figure-size.qmd\"}\nalt.Chart(cars).mark_point().encode(\n    x='Horsepower',\n    y='Miles_per_Gallon',\n    color='Origin',\n).properties(\n    width=700,\n    height=300\n).interactive()\n```\n\n### Code Echo\n\nUnlike with ordinary documents, within Quarto presentations executable code blocks do not `echo` their source code by default (this is because often the code produces a figure that wants to occupy as much vertical space as possible). You can override this behavior using the `echo` option. For example:\n\n````{.java code-example=\"examples/code-echo.qmd\"}\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'})\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/cell-2-output-1.png){width=442 height=432}\n:::\n:::\n\n\n````\n\nSee the documentation on [Running Code](../../computations/running-code.qmd) for more details on the various other ways to customize output from code execution.\n\n## Tabsets\n\nYou can add tabbed content to slides using the standard Quarto syntax for [tabsets](../../output-formats/html-basics.qmd#tabsets). For example:\n\n```{.markdown code-example=\"examples/tabset.qmd\"}\n::: {.panel-tabset}\n\n### Tab A\n\nContent for `Tab A`\n\n### Tab B\n\nContent for `Tab B`\n\n:::\n```\n\nNote that one significant disadvantage to tabsets is that only the first tab will be visible when printing to PDF.\n\n## Slide Backgrounds\n\nSlides are contained within a limited portion of the screen by default to allow them to fit any display and scale uniformly. You can apply full page backgrounds outside of the slide area by adding a `background` attribute to your slide headers. Four different types of backgrounds are supported: color, image, video and iframe.\n\nAll CSS color formats are supported, including hex values, keywords, `rgba()` or `hsl()`. For example:\n\n```{.markdown code-example=\"examples/background-color.qmd\"}\n## Slide Title {background-color=\"aquamarine\"}\n```\n\nYou can also use various types of media (image, video, or iframe) as your slide background. These options are described below.\n\n::: {.callout-tip appearance=\"simple\"}\nNote that if the background color of your media differs from your presentation's theme (e.g. a dark image when using a light theme) then you should also explicitly set the `background-color` so that text on top of the background appears in the correct color (e.g. light text on a dark background).\n:::\n\n### Image Backgrounds\n\nBy default, background images are resized to cover the full page. Available options:\n\n| **Attribute**         | **Default** | **Description**                                                                                   |\n|:----------------------|:------------|:--------------------------------------------------------------------------------------------------|\n| `background-image`    |             | URL of the image to show. GIFs restart when the slide opens.                                      |\n| `background-size`     | cover       | See [background-size](https://developer.mozilla.org/docs/Web/CSS/background-size) on MDN.         |\n| `background-position` | center      | See [background-position](https://developer.mozilla.org/docs/Web/CSS/background-position) on MDN. |\n| `background-repeat`   | no-repeat   | See [background-repeat](https://developer.mozilla.org/docs/Web/CSS/background-repeat) on MDN.     |\n| `background-opacity`  | 1           | Opacity of the background image on a 0-1 scale. 0 is transparent and 1 is fully opaque.           |\n\nFor example:\n\n```{.markdown code-example=\"examples/image-background.qmd\"}\n## Slide Title {background-color=\"black\" background-image=\"https://placekitten.com/100/100\" background-size=\"100px\" background-repeat=\"repeat\"}\n\nThis slide's background image will be sized to 100px and repeated.\n```\n\nSince this image has a dark background and our slides use the default (light) theme, we explicitly set the `background-color` to black so that text drawn on top of it is light.\n\n### Video Backgrounds\n\nAutomatically plays a full size video behind the slide.\n\n| **Attribute**            | **Default** | **Description**                                                                         |\n|:-------------------------|:------------|:----------------------------------------------------------------------------------------|\n| `background-video`       |             | A single video source, or a comma separated list of video sources.                      |\n| `background-video-loop`  | false       | Flags if the video should play repeatedly.                                              |\n| `background-video-muted` | false       | Flags if the audio should be muted.                                                     |\n| `background-size`        | cover       | Use `cover` for full screen and some cropping or `contain` for letterboxing.            |\n| `background-opacity`     | 1           | Opacity of the background video on a 0-1 scale. 0 is transparent and 1 is fully opaque. |\n\nFor example:\n\n``` markdown\n## Slide Title {background-video=\"video.mp4\" background-video-loop=\"true\" background-video-muted=\"true\"}\n\nThis slides's background video will play in a loop with audio muted.\n```\n\n### IFrame Backgrounds\n\nEmbeds a web page as a slide background that covers 100% of the reveal.js width and height. The iframe is in the background layer, behind your slides, and as such it's not possible to interact with it by default. To make your background interactive, you can add the `background-interactive` attribute.\n\n| **Attribute**            | **Default** | **Description**                                                                                                                                 |\n|:-------------------------|:------------|:------------------------------------------------------------------------------------------------------------------------------------------------|\n| `background-iframe`      |             | URL of the iframe to load                                                                                                                       |\n| `background-interactive` | false       | Include this attribute to make it possible to interact with the iframe contents. Enabling this will prevent interaction with the slide content. |\n\nFor example:\n\n``` markdown\n## Slide Title {background-iframe=\"https://example.com\"}\n```\n\n## Learning More\n\nSee these articles lo learn about more advanced capabilities of Reveal:\n\n-   [Presenting Slides](presenting.qmd) describes slide navigation, printing to PDF, drawing on slides using a chalkboard, and creating multiplex presentations.\n-   [Advanced Reveal](advanced.qmd) delves into transitions, animations, advanced layout and positioning, and other options available for customizing presentations.\n-   [Reveal Themes](themes.qmd) talks about using and customizing existing themes as well as creating brand new themes.\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}