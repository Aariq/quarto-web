{
  "hash": "dc1b85988a8a0cc2c353c619e6bd23ea",
  "result": {
    "markdown": "---\ntitle: \"Tutorial: Quarto Basics\"\ncss: tutorial.css\ntoc: false\n---\n\n### Choose your tool: {.unlisted}\n\n::: panel-tabset\n## ![](images/rstudio-logo.png){width=\"77\"}RStudio\n\nThis is a Quarto file with the extension `.qmd`. You can open it [here](https://rstudio.cloud/project/3519977) on RStudio Cloud.\n\n![](images/quarto-basics/penquins-meet-quarto.png){.column-page-right fig-alt=\"RStudio IDE with a Quarto document titled \\\"Hello Quarto!\\\" open on the left side and a blank viewer pane on the right side.\"}\n\nThe source code (on the left) looks very similar to the rendered output (on the right) since we are viewing the file in the [visual editor](https://rstudio.github.io/visual-markdown-editing/). Switching to the source editor reveals the plain text source code underlying the document.\n\n![](images/quarto-basics/visual-source-editor.png){.column-page-right fig-alt=\"On the left: Document in the visual editor. On the right: Same document in the source editor.\"}\n\nNotice that the file contains three types of content:\n\n-   An (optional) YAML header surrounded by fences comprised of three dashes (`---`):\n\n![](images/quarto-basics/yaml.png){.column-body-outset-right fig-alt=\"YAML of the of the linked example document titled \\\"Penguins, meet Quarto!\\\", with annotation that reads \\\"YAML\\\".\"}\n\n-   R code chunks identified with `{r}` with (optional) chunk options, in YAML style, identified by `#|` at the beginning of the line:\n\n![](images/quarto-basics/chunk.png){.column-body-outset-right fig-alt=\"The first code chunk of the of the linked example document titled \\\"Penguins, meet Quarto!\\\", with annotation that reads \\\"Code chunk\\\".\"}\n\n-   Text with formatting, including section headers, hyperlinks, an embedded image, and an inline code chunk:\n\n![](images/quarto-basics/text.png){.column-body-outset-right fig-alt=\"Text portion of the of the linked example document titled \\\"Penguins, meet Quarto!\\\", with annotation that reads \\\"Text\\\".\"}\n\n### Rendering output\n\nUse the ![](images/quarto-basics/render.png){width=\"60\"} (**Render**) button in the RStudio IDE to render the file and preview the output with a single click or keyboard shortcut (⇧⌘K).\n\nIf you prefer to automatically render whenever you save you can check the **Render on Save** option on the editor toolbar. The preview will update whenever you re-render the document. Side-by-side preview works for both HTML and PDF outputs.\n\n![](images/quarto-basics/render-on-save.png){.column-body-outset-right fig-alt=\"Top of the editor in the RStudio IDE with \\\"Render on Save\\\" checked\"}\n\nWhen rendering, Quarto generates a new file that contains selected text, code, and results from the .qmd file. The new file can be an [HTML](https://quarto.org/docs/output-formats/all-formats.html), [PDF](https://quarto.org/docs/output-formats/pdf-basics.html), [MS Word](https://quarto.org/docs/output-formats/ms-word.html) document, [presentation](https://quarto.org/docs/presentations/), [website](https://quarto.org/docs/websites/), [book](https://quarto.org/docs/books/), [interactive document](https://quarto.org/docs/interactive/), or [other format](https://quarto.org/docs/output-formats/all-formats.html).\n\nYou can also render the document using the functions from the [**quarto**](https://github.com/quarto-dev/quarto-r) package, which provides an R interface to the Quarto CLI:\n\n::: {.cell}\n\n```{.r .cell-code}\nquarto::quarto_render()\n```\n:::\n\n### Notebook interface\n\nWhen you open the file in the RStudio IDE, it becomes a notebook interface for R. You can run each code chunk by clicking the ![](https://d33wubrfki0l68.cloudfront.net/18153fb9953057ee5cff086122bd26f9cee8fe93/3aba9/images/quarto-basics/notebook-run-chunk.png) icon. RStudio executes the code and displays the results either inline within your file or in the Console.\n\n![](images/quarto-basics/inline-output.png){.column-body-outset-right fig-alt=\"Run a code chunk and display output inline\" fig-align=\"center\"}\n\n### How it works\n\nWhen you render a Quarto document, first [knitr](http://yihui.name/knitr/) executes all of the code chunks and creates a new markdown (.md) document which includes the code and its output. This markdown file generated is then processed by [pandoc](http://pandoc.org/), which creates the finished format. The Render button encapsulates these actions and executes them in the right order for you.\\\n\\\n\n## ![](images/jupyter-logo.png){width=\"77\"}Jupyter\n\n### Overview\n\nIn this tutorial we'll show you how to use Jupyter Lab as an editor for Quarto. You'll work in Juptyer Lab just as you would with any notebook, and preview the rendered document in a web browser as you work.\n\nHere's how this will look:\n\n![](images/quarto-basics/jupyterlab-preview.png){.column-body-outset-right}\n\nThe notebook is *rendered* into the HTML version you see on the right (it could have equally been rendered into PDF, MS Word, etc.).\n\nThis is the basic model for Quarto publishing---take a source document (in this case a notebook), and render it to a variety of output formats.\n\n### Rendering\n\n\\[Download ipynb\\]\n\nquarto render notebook.ipynb --to html quarto render notebook.ipynb --to pdf quarto render notebook.ipynb --to docx\n\nIllustration\n\n### Author and Preview\n\nNow preview it -- use a terminal to run `quarto preview`\n\nquarto preview notebook.ipynb\n\nRender it, show the rendered version in a web browser, and update the web browser as a I work.\n\nStart up in Jupyter Lab.\n\nA browser opens with a preview of the document.\n\nTry changing some of the code or even inserting a new cell, then save the notebook, you'll see that the preview updates immediately.\n\nNote that preview works with both HTML and PDF\n\nquarto preview notebook.ipynb --to pdf\n\n### YAML Front Matter\n\nDocument wide options\n\nLet's try some. Link to refernece.\n\n### Markdown\n\nUse any quarto markdown\n\n### Code Cells\n\nLet's try some\n\nShow screenshot\n\n## ![](images/vscode-logo.png){width=\"77\"}VS Code\n\n## ![](images/text-editor-logo.png){#text-editor-logo width=\"77\"}Text Editor\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": [],
    "engineDependencies": {},
    "preserve": {},
    "postProcess": null
  }
}