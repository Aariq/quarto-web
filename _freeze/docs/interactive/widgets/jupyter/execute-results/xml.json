{
  "hash": "0de2ab874e64ad7135e40225596e9722",
  "result": {
    "markdown": "---\ntitle: \"Jupyter Widgets\"\ntoc: false\n---\n\n## Overview\n\n[Jupyter Widgets](https://jupyter.org/widgets) enable you to use JavaScript visualization libraries like [Leaflet](https://ipyleaflet.readthedocs.io/en/latest/), [Plotly](https://plotly.com/python/), and [threejs](https://pythreejs.readthedocs.io/) directly from Python.\n\nIf you are using the Jupyter engine with Quarto this is a great way to incorporate interactivity without learning JavaScript.\n\n## Leaflet Example\n\nIncluding Jupyter Widgets within a Quarto document is as easy as including a plot. For example, here is how we embed a [Leaflet](https://ipyleaflet.readthedocs.io/en/latest/) map:\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nfrom ipyleaflet import Map, Marker, basemaps, basemap_to_tiles\nm = Map(\n  basemap=basemap_to_tiles(\n    basemaps.NASAGIBS.ModisTerraTrueColorCR, \"2017-04-08\"\n  ),\n  center=(52.204793, 360.121558),\n  zoom=4\n)\nm.add_layer(Marker(location=(52.204793, 360.121558)))\nm\n```\n\n::: {.cell-output .cell-output-display}\n```\nMap(center=[52.204793, 360.121558], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title'â€¦\n```\n:::\n:::\n\n\nTo learn about available Jupyter Widgets visit <https://jupyter.org/widgets>.\n\n## Plotly\n\nPlotly is an interactive graphics library that can also be used with the Jupyter engine. Here's an example of using [Plotly](https://plotly.com/python/):\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nimport plotly.express as px\nimport plotly.io as pio\ndf = px.data.iris()\nfig = px.scatter(df, x=\"sepal_width\", y=\"sepal_length\", \n                 color=\"species\", \n                 marginal_y=\"violin\", marginal_x=\"box\", \n                 trendline=\"ols\", template=\"simple_white\")\nfig.show()\n```\n\n::: {.cell-output .cell-output-display}\n```\nUnable to display output for mime type(s): text/html\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```\nUnable to display output for mime type(s): text/html\n```\n:::\n:::\n\n\n::: {.callout-note}\nIf you are using Plotly within the VS Code Notebook Editor you will need to add a line of code to ensure that your plots can be seen both within VS Code and when rendered to HTML by Quarto. You can do this by configuring the Plotly [default renderer](https://plotly.com/python/renderers/#setting-the-default-renderer) as follows:\n\n```{{python}}\nimport plotly.io as pio\npio.renderers.default = \"plotly_mimetype+notebook_connected\"\n```\n\nThis workaround is required because when running within VS Code, Plotly chooses a default rendering that can't be easily exported to HTML (for more background, see this [GitHub Issue](https://github.com/microsoft/vscode-jupyter/issues/6999) and related discussion). Note that this workaround is only required for the VS Code Notebook Editor (it is not required if you are using Jupyter Lab or if you are editing a plain-text `.qmd` file).\n:::\n\n",
    "supporting": [
      "jupyter_files/figure-publish"
    ],
    "filters": []
  }
}